<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>VSCode cquery(lsp) 实现 C/C++ 补全</title>
      <link href="/2018/05/04/VSCode-cquery-lsp-%E5%AE%9E%E7%8E%B0-C-C-%E8%A1%A5%E5%85%A8/"/>
      <url>/2018/05/04/VSCode-cquery-lsp-%E5%AE%9E%E7%8E%B0-C-C-%E8%A1%A5%E5%85%A8/</url>
      <content type="html"><![CDATA[<p><a href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="external">LSP</a>（Language-Server-Protocol）开源的语言服务器协定，微软出品，语言服务端提供索引代码的服务，编辑器直接调用。套用官话就是，可以让不同的程序编辑器与集成开发环境（IDE）方便嵌入各种程序语言，允许开发人员在最喜爱的工具中使用各种语言来撰写程序。</p><p>目前语言与编辑器支持情况见 <a href="https://langserver.org/" target="_blank" rel="external">https://langserver.org/</a></p><p><a href="https://github.com/cquery-project/cquery" target="_blank" rel="external">cquery</a> 就是 C/C++/Objective-C 的 language server，VSCode, Vim, Emacs 等只要安装了 lsp 插件，就可调用它来实现 C/C++/Objective-C 语法补全等功能。</p><p>下面以 Visual Studio Code 为例来实现 C/C++ 补全。<a id="more"></a></p><h2 id="build-cquery"><a href="#build-cquery" class="headerlink" title="build cquery"></a>build cquery</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/cquery-project/cquery --single-branch --depth=1</div><div class="line"><span class="built_in">cd</span> cquery</div><div class="line">git submodule update --init &amp;&amp; ./waf configure build</div></pre></td></tr></table></figure><h2 id="VSCode-配置"><a href="#VSCode-配置" class="headerlink" title="VSCode 配置"></a>VSCode 配置</h2><p>首先在插件商店安装 cquery 插件，用户配置中加入以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"cquery.launch.workingDirectory"</span>: <span class="string">"/YOUR_PATH_TO/cquery/build"</span>,</div><div class="line">    <span class="attr">"cquery.launch.command"</span>: <span class="string">"release/bin/cquery"</span>,</div><div class="line">    <span class="attr">"cquery.cacheDirectory"</span>: <span class="string">"/tmp/vscode-cquery"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="项目编译选项配置"><a href="#项目编译选项配置" class="headerlink" title="项目编译选项配置"></a>项目编译选项配置</h2><p>推荐 <a href="https://github.com/cquery-project/cquery/wiki/compile_commands.json" target="_blank" rel="external">compile_commands.json</a></p><p>例如，如果使用 CMake，用以下命令生成 <code>compile_commands.json</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CMake</div><div class="line">mkdir build</div><div class="line">(<span class="built_in">cd</span> build; cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=YES ..)</div><div class="line">ln <span class="_">-s</span> build/compile_commands.json</div></pre></td></tr></table></figure><p>或者新建一个 <code>.cquery</code> 文件，内容示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">%clang</div><div class="line">%c -std=gnu11</div><div class="line">%cpp -std=gnu++14</div><div class="line">-pthread</div><div class="line"></div><div class="line"># Includes</div><div class="line">-I/work/cquery/third_party</div><div class="line">-I/work/cquery/another_third_party</div><div class="line"># -I space_is_not_allowed</div></pre></td></tr></table></figure><p>最终效果</p><p><img src="/img/vscode_cquery.png" alt="vscode-cquery"></p><p>参考：<a href="http://maskray.me/blog/2017-12-03-c++-language-server-cquery" target="_blank" rel="external">http://maskray.me/blog/2017-12-03-c++-language-server-cquery</a></p>]]></content>
      
      
        <tags>
            
            <tag> lsp </tag>
            
            <tag> editor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu awesome terminal</title>
      <link href="/2018/04/28/ubuntu-awesome-terminal/"/>
      <url>/2018/04/28/ubuntu-awesome-terminal/</url>
      <content type="html"><![CDATA[<h2 id="gnome-terminal-solarized-theme"><a href="#gnome-terminal-solarized-theme" class="headerlink" title="gnome-terminal solarized theme"></a>gnome-terminal solarized theme</h2><p><a href="https://github.com/Anthony25/gnome-terminal-colors-solarized" target="_blank" rel="external">Solarized Colorscheme for Gnome Terminal</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/Anthony25/gnome-terminal-colors-solarized.git</div><div class="line"><span class="built_in">cd</span> gnome-terminal-colors-solarized</div><div class="line">./install.sh</div></pre></td></tr></table></figure><a id="more"></a><p>按提示选择 <code>dark</code> 或 <code>light</code> 主题。为了使 <code>ls</code> 命令显示色彩与之相配，中间会提示是否下载 <code>dircolors</code>（由于伟大的墙的问题，有可能下载不成功），手动安装方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.github.com/seebi/dircolors-solarized/master/dircolors.ansi-dark</div><div class="line">mv dircolors.ansi-dark .dircolors</div><div class="line"><span class="built_in">eval</span> `dircolors ~/.dircolors`</div><div class="line"></div><div class="line"><span class="comment"># or light</span></div><div class="line">wget --no-check-certificate https://raw.github.com/seebi/dircolors-solarized/master/dircolors.ansi-light</div><div class="line">mv dircolors.ansi-light .dircolors</div><div class="line"><span class="built_in">eval</span> `dircolors ~/.dircolors`</div></pre></td></tr></table></figure><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt install zsh</div><div class="line">chsh <span class="_">-s</span> /usr/bin/zsh</div></pre></td></tr></table></figure><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></div></pre></td></tr></table></figure><h2 id="omz-powerlevel9k-theme"><a href="#omz-powerlevel9k-theme" class="headerlink" title="omz powerlevel9k theme"></a>omz powerlevel9k theme</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</div></pre></td></tr></table></figure><p>配置 ~/.zshrc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME=<span class="string">"powerlevel9k/powerlevel9k"</span></div><div class="line"></div><div class="line">POWERLEVEL9K_MODE=<span class="string">'awesome-fontconfig'</span></div><div class="line">POWERLEVEL9K_SHORTEN_DIR_LENGTH=2</div><div class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon dir vcs)</div><div class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()</div><div class="line"></div><div class="line">POWERLEVEL9K_OS_ICON_BACKGROUND=<span class="string">"white"</span></div><div class="line">POWERLEVEL9K_OS_ICON_FOREGROUND=<span class="string">"blue"</span></div><div class="line">POWERLEVEL9K_DIR_HOME_FOREGROUND=<span class="string">"white"</span></div><div class="line">POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND=<span class="string">"white"</span></div><div class="line">POWERLEVEL9K_DIR_DEFAULT_FOREGROUND=<span class="string">"white"</span></div><div class="line">POWERLEVEL9K_TIME_FORMAT=<span class="string">"%D&#123;%H:%M \uE868  %d.%m.%y&#125;"</span></div></pre></td></tr></table></figure><h2 id="powerline-与-awesome-字体"><a href="#powerline-与-awesome-字体" class="headerlink" title="powerline 与 awesome 字体"></a>powerline 与 awesome 字体</h2><p>显示 git 分支等一些特殊字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install fonts-powerline</div></pre></td></tr></table></figure><p>如果有问题的话，手动安装打好补丁的字体 <a href="https://github.com/powerline/fonts" target="_blank" rel="external">powerline font</a> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</div><div class="line"><span class="built_in">cd</span> fonts</div><div class="line">./install.sh</div></pre></td></tr></table></figure><p>然后在 <code>gnome-terminal -&gt; Edit -&gt; Preferences</code> 里选 <code>Custom font</code>，设置想要的字体，我这里选择 <code>Source Code Pro for Powerline Medium</code></p><p>为了配合上面的 powerlevel9k 显示出一些更 awesome 的字符，需要 <a href="https://github.com/gabrielelana/awesome-terminal-fonts" target="_blank" rel="external">awesome-terminal-fonts</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/gabrielelana/awesome-terminal-fonts.git --depth=1</div><div class="line"><span class="built_in">cd</span> awesome-terminal-fonts</div><div class="line">cp build/* ~/.local/share/fonts/</div><div class="line"><span class="built_in">fc</span>-cache -fv</div><div class="line">cp config/10-symbols.conf ~/.config/fontconfig/conf.d/</div></pre></td></tr></table></figure><p>修改 <code>.zshrc</code> 添加一行 <code>source $HOME/.local/share/fonts/*.sh</code></p><p>修改 <code>~/.config/fontconfig/conf.d/10-symbols.conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">alias</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Source Code Pro for Powerline<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Pomodoro<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>FontAwesome<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Octicons<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">family</span>&gt;</span>Icomoon<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></div></pre></td></tr></table></figure><p>最终效果</p><p><img src="/img/awesome-terminal.png" alt="awesome-terminal"></p><p>后记：最后一步，awesome glyph 字符，有人做了各种字体的 patch，直接集成到字体中 <a href="https://nerdfonts.com/" target="_blank" rel="external">nerdfonts</a>，可以直接使用这些字体</p>]]></content>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PyCharm 使用 Windows 10 WSL Ubuntu 子系统中的 Python</title>
      <link href="/2016/08/18/PyCharm-%E4%BD%BF%E7%94%A8-Windows-10-WSL-Ubuntu-%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84-Python/"/>
      <url>/2016/08/18/PyCharm-%E4%BD%BF%E7%94%A8-Windows-10-WSL-Ubuntu-%E5%AD%90%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84-Python/</url>
      <content type="html"><![CDATA[<p>首先升级 Windows 10 Anniversary 周年纪念版，又称 RedStone1。如果没有收到推送，可以到这个网址 <a href="https://support.microsoft.com/en-us/help/12387/windows-10-update-history" target="_blank" rel="external">https://support.microsoft.com/en-us/help/12387/windows-10-update-history</a> 手动升级。</p><h2 id="Step-0-安装-WSL-Ubuntu"><a href="#Step-0-安装-WSL-Ubuntu" class="headerlink" title="Step 0: 安装 WSL Ubuntu"></a>Step 0: 安装 WSL Ubuntu</h2><p>在设置中开启开发人员模式，添加 Windows Subsystem for Linux (Beta)，嗯，目前还是 Beta。</p><p>Win + X 打开 CMD 管理员，输入 <code>bash</code> 或者 <code>lxrun /install</code>,会有提示是否安装 Ubuntu，完成之后会提示输入用户名和密码。<a id="more"></a></p><h2 id="Step-1-修改-etc-ssh-sshd-config"><a href="#Step-1-修改-etc-ssh-sshd-config" class="headerlink" title="Step 1: 修改 /etc/ssh/sshd_config"></a>Step 1: 修改 <code>/etc/ssh/sshd_config</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PasswordAuthentication yes</div><div class="line">UsePrivilegeSeparation no</div></pre></td></tr></table></figure><h2 id="Step-2-生成密钥"><a href="#Step-2-生成密钥" class="headerlink" title="Step 2: 生成密钥"></a>Step 2: 生成密钥</h2><p>执行 <code>sudo dpkg-reconfigure openssh-server</code></p><h2 id="Step-3-sshd-无密码运行"><a href="#Step-3-sshd-无密码运行" class="headerlink" title="Step 3: sshd 无密码运行"></a>Step 3: sshd 无密码运行</h2><p>执行 <code>sudo visudo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># $USER 是你 Step0 中设置的用户名</div><div class="line">$USER ALL = (root) NOPASSWD: /usr/sbin/sshd</div></pre></td></tr></table></figure><h2 id="Step-4-开启-ssh"><a href="#Step-4-开启-ssh" class="headerlink" title="Step 4: 开启 ssh"></a>Step 4: 开启 ssh</h2><p>执行 <code>sudo /usr/sbin/sshd -d</code>，确认无误后 <code>sudo /usr/sbin/sshd</code></p><p>可以写成一个脚本 wsl_ssh.bat <code>bash.exe -c &quot;sudo service ssh start &amp;&amp;&amp; sleep 999d&quot;</code></p><h2 id="Step-5-配置-PyCharm"><a href="#Step-5-配置-PyCharm" class="headerlink" title="Step 5: 配置 PyCharm"></a>Step 5: 配置 PyCharm</h2><p><a href="https://www.jetbrains.com/help/pycharm/2016.1/configuring-remote-interpreters-via-ssh.html" target="_blank" rel="external">https://www.jetbrains.com/help/pycharm/2016.1/configuring-remote-interpreters-via-ssh.html</a></p><h2 id="Step-X-完善"><a href="#Step-X-完善" class="headerlink" title="Step X: 完善"></a>Step X: 完善</h2><p>cmd 替代品 <a href="http://conemu.github.io/" target="_blank" rel="external">ConEmu</a>，最新版内置支持 wsl bash。</p><p>也可以用 XShell ssh 上去。</p><p>apt 源替换为 aliyun, <code>sudo sed -i &#39;s/archive.ubuntu/mirrors.aliyun/g&#39; /etc/apt/sources.list</code></p><p>安装新版 git, <code>sudo add-apt-repository ppa:git-core/ppa</code></p><p>安装新版 pip， <code>curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;</code>, <code>sudo python get-pip.py</code></p><p><img src="/img/pycharm02.png" alt="pycharm"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Django之路: Python Decouple</title>
      <link href="/2016/08/05/Django%E4%B9%8B%E8%B7%AF-Python-Decouple/"/>
      <url>/2016/08/05/Django%E4%B9%8B%E8%B7%AF-Python-Decouple/</url>
      <content type="html"><![CDATA[<p>Django settings 中存有很多私密信息，如 database url, password, secret key, allowed hosts 等，我们还可能有 Debug / Deploy 两套不同的运行环境，<a href="https://pypi.python.org/pypi/python-decouple" target="_blank" rel="external">python-decouple</a> 可以让这些环境变量与代码分离。<a id="more"></a></p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>例如 <code>settings.py</code> 内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</div><div class="line">SECRET_KEY = <span class="string">'3izb^ryglj(bvrjb2_y1fZvcnbky#358_l6-nn#i8fkug4mmz!'</span></div><div class="line">DEBUG = <span class="keyword">True</span></div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</div><div class="line">        <span class="string">'NAME'</span>: <span class="string">'HELLO_DJANGO'</span>,</div><div class="line">        <span class="string">'USER'</span>: <span class="string">'U_HELLO'</span>,</div><div class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'hA8(scA@!fg3*sc&amp;xaGh&amp;6%-l&lt;._&amp;xCf'</span>,</div><div class="line">        <span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在项目根目录下创建一个 <code>.env</code> 文件，内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">SECRET_KEY</span>=<span class="number">3</span>izb^ryglj(bvrjb2_y1fZvcnbky#<span class="number">358</span>_l6-nn#i8fkug4mmz!</div><div class="line"><span class="attr">DEBUG</span>=<span class="literal">True</span></div><div class="line"><span class="attr">DB_NAME</span>=HELLO_DJANGO</div><div class="line"><span class="attr">DB_USER</span>=U_HELLO</div><div class="line"><span class="attr">DB_PASSWORD</span>=hA8(scA@!fg3*sc&amp;xaGh&amp;<span class="number">6</span>%-l&lt;._&amp;xCf</div><div class="line"><span class="attr">DB_HOST</span>=<span class="number">127.0</span>.<span class="number">0.1</span></div></pre></td></tr></table></figure><p>将 <code>.env</code> 加入到 <code>.gitignore</code>，修改 <code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> decouple <span class="keyword">import</span> config</div><div class="line"></div><div class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</div><div class="line">SECRET_KEY = config(<span class="string">'SECRET_KEY'</span>)</div><div class="line">DEBUG = config(<span class="string">'DEBUG'</span>, cast=bool)</div><div class="line">DATABASES = &#123;</div><div class="line">    <span class="string">'default'</span>: &#123;</div><div class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql_psycopg2'</span>,</div><div class="line">        <span class="string">'NAME'</span>: config(<span class="string">'DB_NAME'</span>),</div><div class="line">        <span class="string">'USER'</span>: config(<span class="string">'DB_USER'</span>),</div><div class="line">        <span class="string">'PASSWORD'</span>: config(<span class="string">'DB_PASSWORD'</span>),</div><div class="line">        <span class="string">'HOST'</span>: config(<span class="string">'DB_HOST'</span>),</div><div class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><code>.env</code> 内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">DEBUG</span>=<span class="literal">True</span></div><div class="line"><span class="attr">EMAIL_PORT</span>=<span class="number">25</span></div><div class="line"><span class="attr">ALLOWED_HOSTS</span>=.localhost, .herokuapp.com</div></pre></td></tr></table></figure><p><code>settings.py</code> 内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> decouple <span class="keyword">import</span> config, Csv</div><div class="line"></div><div class="line">DEBUG = config(<span class="string">'DEBUG'</span>, default=<span class="keyword">True</span>, cast=bool)</div><div class="line">EMAIL_PORT = config(<span class="string">'EMAIL_PORT'</span>, cast=int)</div><div class="line">ALLOWED_HOSTS = config(<span class="string">'ALLOWED_HOSTS'</span>, cast=Csv())</div></pre></td></tr></table></figure><p>也可用外部环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEBUG=False python manage.py</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux驱动开发之一 Hello World</title>
      <link href="/2015/07/19/Linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E4%B8%80-Hello-World/"/>
      <url>/2015/07/19/Linux%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E4%B8%80-Hello-World/</url>
      <content type="html"><![CDATA[<p>完整的 Hello World 内核模块 hello.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></div><div class="line">MODULE_LICENSE(<span class="string">"Dual BSD/GPL"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_ALERT <span class="string">"Hello, world\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    printk(KERN_ALERT <span class="string">"Goodbye, cruel world\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(hello_init);</div><div class="line">module_exit(hello_exit);</div></pre></td></tr></table></figure><p>Makefile</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">obj-m +=hello.o</div><div class="line"></div><div class="line">KDIR = /usr/src/linux-headers-3.19.0-21-generic</div><div class="line"></div><div class="line"><span class="section">all:</span></div><div class="line"><span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> SUBDIRS=<span class="variable">$(PWD)</span> modules</div><div class="line"></div><div class="line"><span class="section">clean:</span></div><div class="line">rm -rf *.o *.ko *.mod.* *.symvers *.order</div></pre></td></tr></table></figure><p>To run the code</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> insmod hello.ko</div><div class="line"><span class="variable">$dmesg</span></div><div class="line">u will get the output</div><div class="line"><span class="variable">$sudo</span> rmmod hello.ko</div><div class="line"><span class="variable">$dmesg</span></div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LinuxDriver </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux/Ubuntu 下为 Android 创建无线分享热点</title>
      <link href="/2015/06/24/Linux-Ubuntu-%E4%B8%8B%E4%B8%BA-Android-%E5%88%9B%E5%BB%BA%E6%97%A0%E7%BA%BF%E5%88%86%E4%BA%AB%E7%83%AD%E7%82%B9/"/>
      <url>/2015/06/24/Linux-Ubuntu-%E4%B8%8B%E4%B8%BA-Android-%E5%88%9B%E5%BB%BA%E6%97%A0%E7%BA%BF%E5%88%86%E4%BA%AB%E7%83%AD%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>create ap hotspot for ubuntu linux</p><p>准备</p><p><a href="https://w1.fi/hostapd/" target="_blank" rel="external">https://w1.fi/hostapd/</a></p><p><a href="https://github.com/oblique/create_ap" target="_blank" rel="external">https://github.com/oblique/create_ap</a></p><p>编译 hostapd</p><pre><code>sudo apt-get install libnl-3-dev libnl-gen-3-devmake &amp;&amp; sudo make install</code></pre><p>安装 create_ap</p><pre><code>git clone https://github.com/oblique/create_ap.gitcd create_ap &amp;&amp; make install</code></pre><p>创建无线热点</p><pre><code>sudo create_ap wlan0 ppp0 hotspot password</code></pre>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记10 AJAX 图片上传</title>
      <link href="/2014/09/04/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-AJAX-%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>/2014/09/04/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-AJAX-%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<p>Spring MVC AJAX 方式图片上传，采用 base64 编码图片。</p><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><a id="more"></a><p>注：如果使用了 Spring security，其中也有 Base64 类，可以不需要 commons-codec</p><p>applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.htm<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.json<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.mooc"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span></span></div><div class="line">    <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"500000"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>UploadController.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"upload"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUpload</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"ajaxupload"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</div><div class="line">  <span class="meta">@ResponseBody</span></div><div class="line">  <span class="function"><span class="keyword">public</span> JsonLogo <span class="title">doUpload</span><span class="params">(@RequestParam(<span class="string">"logo"</span>)</span> MultipartFile logo,</span></div><div class="line">      MultipartHttpServletRequest request) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      JsonLogo jsonLogo = <span class="keyword">new</span> JsonLogo();</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!logo.isEmpty()) &#123;</div><div class="line">        jsonLogo.setImage(<span class="keyword">new</span> String(Base64.encodeBase64(logo</div><div class="line">            .getBytes())));</div><div class="line"></div><div class="line">        String logoPathDir = <span class="string">"/upload"</span>;</div><div class="line">        String logoRealPathDir = request.getSession()</div><div class="line">            .getServletContext().getRealPath(logoPathDir);</div><div class="line">        File logoSaveFile = <span class="keyword">new</span> File(logoRealPathDir);</div><div class="line">        <span class="keyword">if</span> (!logoSaveFile.exists())</div><div class="line">          logoSaveFile.mkdirs();</div><div class="line"></div><div class="line">        String suffix = logo.getOriginalFilename().substring(</div><div class="line">            logo.getOriginalFilename().lastIndexOf(<span class="string">"."</span>));</div><div class="line">        String logoImageName = String.valueOf(System</div><div class="line">            .currentTimeMillis()) + suffix;</div><div class="line">        String fileName = logoRealPathDir + File.separator</div><div class="line">            + logoImageName;</div><div class="line">        File file = <span class="keyword">new</span> File(fileName);</div><div class="line">        logo.transferTo(file);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> jsonLogo;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>JsonLogo.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonLogo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1165407268915529059L</span>;</div><div class="line">  </div><div class="line">  <span class="meta">@JsonProperty</span></div><div class="line">  <span class="keyword">private</span> String image;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getImage</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> image;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(String image)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.image = image;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ajaxupload.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></div><div class="line">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">UTF-8</span>"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/resources/js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax Upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"uploadLogoForm"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Logo:<span class="tag">&lt;/<span class="name">label</span>&gt;</span>                </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"imagePlaceHolder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"logo"</span>&gt;</span>Choose your logo:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"logo"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"logo"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"uploadLogoButton"</span>&gt;</span>Upload Logo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">  $(document).ready(function()&#123;</div><div class="line">    $('#uploadLogoButton').on('click', function () &#123;</div><div class="line">      var form = new FormData(document.getElementById('uploadLogoForm'));</div><div class="line">      $.ajax(&#123;</div><div class="line">        url: "upload.json",</div><div class="line">        data: form,</div><div class="line">        dataType: 'text',</div><div class="line">        processData: false,</div><div class="line">        contentType: false,</div><div class="line">        type: 'POST',</div><div class="line">        </div><div class="line">        success: function (response) &#123;</div><div class="line">          var data = jQuery.parseJSON(response);   </div><div class="line">          $('#imagePlaceHolder').html('<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"data:image/jpg;base64,' + data.image + '"</span>/&gt;</span>');   </div><div class="line">        &#125;,</div><div class="line">        error: function (jqXHR) &#123;</div><div class="line">          //Error handling</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;);    </div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记9 JQuery 验证</title>
      <link href="/2014/09/01/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09-JQuery-%E9%AA%8C%E8%AF%81/"/>
      <url>/2014/09/01/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B09-JQuery-%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<p>前面我们已经学习过了在服务器端进行验证，这次学习 JQuery Validator 客户端验证。客户端验证虽然可以被用户绕过，但是可以作为辅助手段，对于一般用户可以减少一定的服务器通讯。</p><p>以注册页面为例，实现一般化的验证，并且加上二次输入密码、用户名字段唯一性验证。<a id="more"></a></p><p>首先添加 jquery.min.js, jquery.validate.js。</p><p>register.jsp，jquery, bootstrap 在之前的 sitemesh 基础模板内。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"sf"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags"</span> <span class="attr">prefix</span>=<span class="string">"spring"</span>%&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sf:form</span> <span class="attr">commandName</span>=<span class="string">"user"</span> <span class="attr">cssClass</span>=<span class="string">"form-horizontal registrationForm"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;param.success eq true &#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span>Registration successful!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"userName"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"userName"</span> <span class="attr">id</span>=<span class="string">"userName"</span> <span class="attr">cssClass</span>=<span class="string">"form-control"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"userName"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"fullname"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Nickname:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"fullname"</span> <span class="attr">id</span>=<span class="string">"fullname"</span> <span class="attr">cssClass</span>=<span class="string">"form-control"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"fullname"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">cssClass</span>=<span class="string">"form-control"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">path</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">cssClass</span>=<span class="string">"form-control"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Password again:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password_again"</span> <span class="attr">id</span>=<span class="string">"password_again"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primay"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sf:form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">    $(document).ready(function()&#123;</div><div class="line">        $('ul.navbar-nav li').removeClass("active");</div><div class="line">        $('ul.navbar-nav li:nth-child(4)').addClass("active");</div><div class="line">        $(".registrationForm").validate(</div><div class="line">            &#123;</div><div class="line">                rules: &#123;</div><div class="line">                    userName: &#123;</div><div class="line">                        required : true,</div><div class="line">                        minlength : 3,</div><div class="line">                        remote : &#123;</div><div class="line">                            url: "<span class="tag">&lt;<span class="name">spring:url</span> <span class="attr">value</span>=<span class="string">'/register/available'</span> /&gt;</span>",</div><div class="line">                            type: "get",</div><div class="line">                            data: &#123;</div><div class="line">                                username: function() &#123;</div><div class="line">                                    return $("#userName").val();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    email: &#123;</div><div class="line">                        required : true,</div><div class="line">                        email : email</div><div class="line">                    &#125;,</div><div class="line">                    password: &#123;</div><div class="line">                        required : true,</div><div class="line">                        minlength : 5</div><div class="line">                    &#125;,</div><div class="line">                    password_again: &#123;</div><div class="line">                        required : true,</div><div class="line">                        minlength : 5,</div><div class="line">                        equalTo: '#password'</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                highlight: function(element) &#123;</div><div class="line">                    $(element).closest('.form-group').removeClass('has-success').addClass('has-error');</div><div class="line">                &#125;,</div><div class="line">                unhighlight: function(element) &#123;</div><div class="line">                    $(element).closest('.form-group').removeClass('has-error').addClass('has-success');</div><div class="line">                &#125;,</div><div class="line">                messages: &#123;</div><div class="line">                    userName: &#123;</div><div class="line">                        remote: "Such username already exists!"</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        );</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>重点在 remote</p><p>UniqueUsername 注解类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123; FIELD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;UniqueUsernameValidator.class &#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UniqueUsername &#123;</div><div class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</div><div class="line"></div><div class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniqueUsernameValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">UniqueUsername</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HibUserService hibUserService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(UniqueUsername constraintAnnotation)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String username, ConstraintValidatorContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (hibUserService == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> hibUserService.findUserByName(username) == <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>User 类 userName 字段加上注解。</p><p>RegisterController.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"register"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HibUserService hibUserService;</div><div class="line"></div><div class="line">    <span class="meta">@ModelAttribute</span>(<span class="string">"user"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">constructUser</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showRegister</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"register"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method= RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(@ModelAttribute(<span class="string">"user"</span>)</span> @Valid User user,</span></div><div class="line">                           BindingResult result,</div><div class="line">                           HttpServletRequest request) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"register"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        user.setLastIp(request.getRemoteAddr());</div><div class="line">        user.setLastVisit(<span class="keyword">new</span> Date());</div><div class="line">        hibUserService.save(user);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:register?success=true"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/available"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">available</span><span class="params">(@RequestParam String username)</span> </span>&#123;</div><div class="line">        Boolean available = (hibUserService.findUserByName(username) == <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> available.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记8 Spring Security</title>
      <link href="/2014/08/31/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08-Spring-Security/"/>
      <url>/2014/08/31/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08-Spring-Security/</url>
      <content type="html"><![CDATA[<p>Spring Security 是为基于 Spring 的应用程序提供声明式安全保护的安全性框架，基于 Spring AOP 和 Servlet 过滤器实现，能够在 Web 请求级别和方法调用级别处理身份验证和授权。它使用 Servlet 过滤器保护 Web 请求和限制 URL 级别的访问，也可以使用 Spring AOP 保护方法调用——借助于对象代理和使用通知，能够确保只有具备适当权限的用户才能访问安全保护的方法。<a id="more"></a></p><p>web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p><p>security.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans:beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/security"</span></span></div><div class="line">             <span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">             <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">           http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">           http://www.springframework.org/schema/security</div><div class="line">           http://www.springframework.org/schema/security/spring-security.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">global-method-security</span> <span class="attr">pre-post-annotations</span>=<span class="string">"enabled"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">http</span> <span class="attr">auto-config</span>=<span class="string">"false"</span> <span class="attr">use-expressions</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/u**"</span> <span class="attr">access</span>=<span class="string">"hasRole('ROLE_USER')"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/u/**"</span> <span class="attr">access</span>=<span class="string">"hasRole('ROLE_USER')"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/admin**"</span> <span class="attr">access</span>=<span class="string">"hasRole('ROLE_ADMIN')"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">form-login</span> <span class="attr">login-page</span>=<span class="string">"/index"</span> <span class="attr">default-target-url</span>=<span class="string">"/userhome"</span> <span class="attr">authentication-failure-url</span>=<span class="string">"/index?error=true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">logout</span> <span class="attr">logout-url</span>=<span class="string">"/logout"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">http</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">authentication-manager</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">authentication-provider</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">password-encoder</span> <span class="attr">hash</span>=<span class="string">"bcrypt"</span>/&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">jdbc-user-service</span> <span class="attr">data-source-ref</span>=<span class="string">"dataSource"</span></span></div><div class="line">                <span class="attr">authorities-by-username-query</span>=<span class="string">"select user_tbl.user_name, role_tbl.name from user_tbl</span></div><div class="line">join user_tbl_role_tbl on user_tbl.user_id=user_tbl_role_tbl.users_user_id</div><div class="line">join role_tbl on user_tbl_role_tbl.roles_role_id = role_tbl.role_id</div><div class="line">where user_tbl.user_name = ?"</div><div class="line">                <span class="attr">users-by-username-query</span>=<span class="string">"select user_name, password, true from user_tbl where user_name = ?"</span> /&gt;</div><div class="line"></div><div class="line">                <span class="comment">&lt;!--&lt;user-service&gt;--&gt;</span></div><div class="line">                    <span class="comment">&lt;!--&lt;user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN" /&gt;--&gt;</span></div><div class="line">                <span class="comment">&lt;!--&lt;/user-service&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">authentication-provider</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">authentication-manager</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans:beans</span>&gt;</span></div></pre></td></tr></table></figure></p><p>User.java, Role.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"user_tbl"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"user_id"</span>)</div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Long userId;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"user_name"</span>)</div><div class="line">    <span class="meta">@Size</span>(min=<span class="number">3</span>)</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String fullname;</div><div class="line"></div><div class="line">    <span class="meta">@Size</span>(min=<span class="number">1</span>)</div><div class="line">    <span class="meta">@Email</span></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line"></div><div class="line">    <span class="meta">@Size</span>(min=<span class="number">3</span>)</div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"password"</span>)</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="meta">@ManyToMany</span>(fetch = FetchType.EAGER)</div><div class="line">    <span class="meta">@JoinTable</span></div><div class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"role_tbl"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"role_id"</span>)</div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Long userId;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"roles"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>HomeController.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = (Logger) LoggerFactory.getLogger(HomeController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HibUserService hibUserService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HibSpittleService hibSpittleService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        List&lt;Spittle&gt; spittleList = hibSpittleService.getRecentSpittles(<span class="number">5</span>);</div><div class="line">        model.addAttribute(<span class="string">"spittleList"</span>, spittleList);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"userhome"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginSuccess</span><span class="params">(HttpServletRequest request, Principal principal)</span> </span>&#123;</div><div class="line">        String username = principal.getName();</div><div class="line">        User user = hibUserService.findUserByName(username);</div><div class="line">        user.setLastIp(request.getRemoteAddr());</div><div class="line">        user.setLastVisit(<span class="keyword">new</span> java.sql.Timestamp((<span class="keyword">new</span> java.util.Date()).getTime()));</div><div class="line">        hibUserService.loginSuccess(user);</div><div class="line">        request.getSession().setAttribute(<span class="string">"currentUser"</span>, user);</div><div class="line"></div><div class="line">        logger.info(<span class="string">"User id: "</span> + user.getUserId().toString());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:u/"</span> + username;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在不登录访问 /u, /admin url 路径，都会跳到首页。</p><p>实现一个 Spittle 只有管理员和其作者才可以删除，在 Service 类上应用方法级安全措施</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibSpittleService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HibSpittleDao hibSpittleDao;</div><div class="line">    <span class="comment">//...</span></div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"#spittle.user.userName == authentication.name or hasRole('ROLE_ADMIN')"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@P(<span class="string">"spittle"</span>)</span> Spittle spittle) </span>&#123;</div><div class="line">        hibSpittleDao.delSpittle(spittle);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在与 AJAX 技术结合时，如果出现 Could not write JSON: failed to lazily initialize a collection of role，参考</p><p><a href="https://github.com/FasterXML/jackson-datatype-hibernate" target="_blank" rel="external">https://github.com/FasterXML/jackson-datatype-hibernate</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.hibernate4.Hibernate4Module;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateAwareObjectMapper</span> <span class="keyword">extends</span> <span class="title">ObjectMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HibernateAwareObjectMapper</span><span class="params">()</span> </span>&#123;</div><div class="line">        Hibernate4Module hm = <span class="keyword">new</span> Hibernate4Module();</div><div class="line">        hm.configure(Hibernate4Module.Feature.FORCE_LAZY_LOADING, <span class="keyword">false</span>);</div><div class="line">        registerModule(hm);</div><div class="line">        configure(SerializationFeature.INDENT_OUTPUT, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记7 表现层 Tiles Sitemesh</title>
      <link href="/2014/08/30/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07-%E8%A1%A8%E7%8E%B0%E5%B1%82-Tiles-Sitemesh/"/>
      <url>/2014/08/30/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B07-%E8%A1%A8%E7%8E%B0%E5%B1%82-Tiles-Sitemesh/</url>
      <content type="html"><![CDATA[<p>表现层为了减少手工写 jsp 页面代码的工作量，出现了许多不同的技术方案，Tiles, SiteMesh, Velocity, FreeMarker 等。这里选用 Tiles3/Sitemesh 负责自定义的 header, body, footer 组装，jsp 页面加入 bootstrap, jQuery ，暂时不用 Velocity/FreeMarker 模板。<a id="more"></a></p><h2 id="Tiles"><a href="#Tiles" class="headerlink" title="Tiles"></a>Tiles</h2><p>applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tilesConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.tiles3.TilesConfigurer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"definitions"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>/WEB-INF/defs/general.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"urlViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.UrlBasedViewResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.tiles3.TilesView"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> /&gt;</span></div></pre></td></tr></table></figure></p><p>注：不同的 ViewResolver 可以添加 order 属性值，运行时从小到大查找。TilesView 2/3 内置 JSTL 支持。css/js 放在 webapp/resources 目录下。</p><p>general.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE tiles-definitions PUBLIC</span></div><div class="line">        "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN"</div><div class="line">        "http://tiles.apache.org/dtds/tiles-config_3_0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tiles-definitions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"common"</span> <span class="attr">template</span>=<span class="string">"/WEB-INF/layout/classic.jsp"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"footer"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/layout/footer.jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">definition</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">definition</span> <span class="attr">name</span>=<span class="string">"index"</span> <span class="attr">extends</span>=<span class="string">"common"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Java Blog Aggregator"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/index.jsp"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">put-attribute</span> <span class="attr">name</span>=<span class="string">"current"</span> <span class="attr">value</span>=<span class="string">"index"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">definition</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tiles-definitions</span>&gt;</span></div></pre></td></tr></table></figure></p><p>classic.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags"</span> <span class="attr">prefix</span>=<span class="string">"spring"</span>%&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/resources/css/bootstrap.min.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/resources/js/jquery-1.11.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/resources/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">tiles:getAsString</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Static navbar --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".navbar-collapse"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"&lt;spring:url value="</span>/" /&gt;</span>"&gt;Spitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;spring:url value="</span>/" /&gt;</span>"&gt;Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">role</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-header"</span>&gt;</span>Nav header<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../navbar-static-top/"</span>&gt;</span>Static top<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../navbar-fixed-top/"</span>&gt;</span>Fixed top<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--/.nav-collapse --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--/.container-fluid --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- /container --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tiles:insertAttribute</span> <span class="attr">name</span>=<span class="string">"body"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tiles:insertAttribute</span> <span class="attr">name</span>=<span class="string">"footer"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>footer.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>@copyright Joseph Pei 2014<span class="tag">&lt;/<span class="name">center</span>&gt;</span></div></pre></td></tr></table></figure></p><p>index.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后 index 页面就可以看到 bootstrap navbar 了</p><p>上面的活动条目跟随页面不同而不同，注意 general.xml 的 current 属性，页面中设置如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tilesx:useAttribute</span> <span class="attr">name</span>=<span class="string">"current"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"$&#123;current == 'index' ? 'active' : '' &#125;"</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="Sitemesh"><a href="#Sitemesh" class="headerlink" title="Sitemesh"></a>Sitemesh</h2><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>opensymphony<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sitemesh<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sitemesh<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.opensymphony.sitemesh.webapp.SiteMeshFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sitemesh<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p><p>WEB-INF 目录下新建 decorators.xml 和 decorators 目录</p><p>decorators.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">decorators</span> <span class="attr">defaultdir</span>=<span class="string">"/WEB-INF/decorators"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Any urls that are excluded will never be decorated by Sitemesh --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>/about.jsp<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>/static/*<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">decorator</span> <span class="attr">name</span>=<span class="string">"main-layout"</span> <span class="attr">page</span>=<span class="string">"main-layout.jsp"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">decorator</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">decorators</span>&gt;</span></div></pre></td></tr></table></figure></p><p>decorators/main-layout.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://www.opensymphony.com/sitemesh/decorator"</span> <span class="attr">prefix</span>=<span class="string">"sitemesh"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">c:set</span> <span class="attr">var</span>=<span class="string">"ctx"</span> <span class="attr">value</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">sitemesh:title</span>/&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/static/css/bootstrap.min.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery-1.11.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.validate.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">sitemesh:head</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%@</span> <span class="attr">include</span> <span class="attr">file</span>=<span class="string">"/WEB-INF/decorators/navbar.jsp"</span>%&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sitemesh:body</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%@</span> <span class="attr">include</span> <span class="attr">file</span>=<span class="string">"/WEB-INF/decorators/footer.jsp"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>navbar.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="comment">&lt;!-- Static navbar --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span> <span class="attr">role</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">".navbar-collapse"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Spitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">role</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-header"</span>&gt;</span>Nav header<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--/.nav-collapse --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--/.container-fluid --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>index.jsp 示例，可以看到几乎感觉不到 sitemesh 的存在<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"sf"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span>Welcome to Spitter<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-8"</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-3"</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记6 SLF4J Logback 日志</title>
      <link href="/2014/08/25/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06-SLF4J-Logback-%E6%97%A5%E5%BF%97/"/>
      <url>/2014/08/25/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B06-SLF4J-Logback-%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<p>Simple Logging Facade for Java(SL4J)</p><p>SLF4J 提供了一组抽象接口，在部署应用时后端可以选择不同的日志框架，而无需更改已有代码。</p><p>Logback 是项目 Log4j 的后继。它由三个模块组成：logback-core, logback-classic, logback-access。其中 logback-core 是基础模块。logback-classic 是 log4j 的改良版，是 slf4j api 的原生实现，可以方便地更换成其它日志框架。logback-access 模块与 Servlet 容器集成提供Http-access 日志的功能。 <a id="more"></a></p><p>Spring 默认使用 Jakarta Commons Logging，但可以切换成其它日志框架。</p><p>首先移除 spring-core 对 commons-logging 依赖，添加 logback 模块。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1$&#123;jcloverslf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>基本参考配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"consoleAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>.%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg %n</div><div class="line">            <span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>TRACE<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"dailyRollingFileAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>/tmp/spring-demo.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- daily rollover --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>spring-demo.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- keep 30 days' worth of history --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"errorFileAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">OnMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">OnMismatch</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">OnMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">OnMatch</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>/tmp/spring-err.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>spring-err.log.%i.bak<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">MinIndex</span>&gt;</span>1<span class="tag">&lt;/<span class="name">MinIndex</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">MaxIndex</span>&gt;</span>3<span class="tag">&lt;/<span class="name">MaxIndex</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.EXAMPLE"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dailyRollingFileAppender"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"errorFileAppender"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleAppender"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">"INFO"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"consoleAppender"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>logback 将记录日志任务委托给 appender，有几种不同的日志级别 TRACE, DEBUG, INFO, WARN, ERROR 。</p><p>static final Logger logger = LoggerFactory.getLogger(MyClassName.class);</p><p>参考</p><p><a href="http://www.codingpedia.org/ama/how-to-log-in-spring-with-slf4j-and-logback/" target="_blank" rel="external">http://www.codingpedia.org/ama/how-to-log-in-spring-with-slf4j-and-logback/</a></p><p><a href="http://logback.qos.ch/documentation.html" target="_blank" rel="external">http://logback.qos.ch/documentation.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记5 REST与AJAX</title>
      <link href="/2014/08/24/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-REST%E4%B8%8EAJAX/"/>
      <url>/2014/08/24/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B05-REST%E4%B8%8EAJAX/</url>
      <content type="html"><![CDATA[<p>近来，以信息为中心的表述性状态转移(Representational State Transfer, REST)已成为替换传统 SOAP Web 服务的流行方案，Spring MVC 封装了对 REST 的良好支持。</p><p>当谈论REST时，有一种常见的错误就是将其视为“基于 URL 的 Web 服务”，将 REST 作为另一种类型的远程过程调用(RPC)机制。恰好相反，REST 与 RPC 几乎没有任何关系，RPC 是面向服务的，并关注于行为和动作，而 REST 是面向资源的，强调描述应用程序的事物和名词。REST 就是将资源的状态以最合适的形式从服务器端转移到客户端（或者反之）。</p><p>本节应用 @ResponseBody 注解实现简单的 RESTless URL，并与 JQuery AJAX 结合。<a id="more"></a></p><p>用户登录之后，转到 /u/USERNAME 页面，显示用户微博列表，每条微博后面有 Delete URL。使用RESTless URL and AJAX 实现添加新微博和删除旧微博。</p><p>需要添加 jackson 包，有 1.x 和 2.x 两种版本，1.x 已不在开发新功能，只维护 bug。这里使用 2.x 版本。</p><p>servlet.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Configure to plugin JSON as request and response in method handler --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jsonMessageConverter"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Configure bean to convert JSON to POJO and vice versa --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>微博条目 Spittle.java，Date 类型的序列化使用 jackson 2.x 版本新增的 JsonFormat 注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"spittle_tbl"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spittle</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="comment">//omit getter and setter</span></div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"spittle_id"</span>)</div><div class="line">    <span class="keyword">private</span> Long spittleId;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"text"</span>)</div><div class="line">    <span class="keyword">private</span> String text;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"push_time"</span>)</div><div class="line">    <span class="meta">@JsonFormat</span>(shape=JsonFormat.Shape.STRING, pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line">    <span class="keyword">private</span> Date pushTime;</div><div class="line"></div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"user_id"</span>, referencedColumnName = <span class="string">"user_id"</span>)</div><div class="line">    <span class="meta">@ManyToOne</span>(optional = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> User user;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>用户页面 Controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/u/&#123;username&#125;"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpitterController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HibSpittleService hibSpittleService;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">userPage</span><span class="params">(@PathVariable String username, HttpServletRequest request, Model model)</span> </span>&#123;</div><div class="line">        User user = (User) request.getSession().getAttribute(<span class="string">"user"</span>);</div><div class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/"</span>);</div><div class="line"></div><div class="line">        List&lt;Spittle&gt; spittles = hibSpittleService.getSpittlesForUser(user);</div><div class="line">        model.addAttribute(<span class="string">"spittle"</span>, <span class="keyword">new</span> Spittle());</div><div class="line">        model.addAttribute(<span class="string">"spittles"</span>, spittles);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"user_page"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method=RequestMethod.POST, produces = <span class="string">"application/json; charset=utf-8"</span>)</div><div class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.CREATED)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function">Spittle <span class="title">pushSpittle</span><span class="params">(@PathVariable String username, @RequestBody Spittle spittle,</span></span></div><div class="line">                              HttpServletRequest request ) &#123;</div><div class="line">        User user = (User) request.getSession().getAttribute(<span class="string">"user"</span>);</div><div class="line"></div><div class="line">        spittle.setPushTime(<span class="keyword">new</span> java.sql.Timestamp((<span class="keyword">new</span> java.util.Date()).getTime()));</div><div class="line">        spittle.setUser(user);</div><div class="line">        hibSpittleService.addSpittle(spittle);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> spittle;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/delete/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">delSpittleByID</span><span class="params">(@PathVariable String username, @PathVariable Long id)</span> </span>&#123;</div><div class="line">        hibSpittleService.delSpittleById(id);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"logout"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        request.getSession().invalidate();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>用户页面 jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"sf"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span>%&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery-1.11.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">        $(document).ready(function() &#123;</div><div class="line">            $('#newSpittle').submit(function(event) &#123;</div><div class="line"></div><div class="line">                var mess = $('#text').val();</div><div class="line">                var formData = &#123; "text" : mess&#125;;</div><div class="line"></div><div class="line">                $.ajax(&#123;</div><div class="line">                    url: $("#newSpittle").attr( "action"),</div><div class="line">                    type: "POST",</div><div class="line">                    contentType: 'application/json; charset=utf-8',</div><div class="line">                    dataType: 'json',</div><div class="line">                    async: false,</div><div class="line">                    data: JSON.stringify(formData),</div><div class="line"></div><div class="line">                    success: function(spittle) &#123;</div><div class="line">                        var respContent = "";</div><div class="line">                        var delLink = "/u/" + spittle.user.userName + "/delete/" + spittle.spittleId;</div><div class="line"></div><div class="line">                        respContent += "<span class="tag">&lt;<span class="name">li</span>&gt;</span>";</div><div class="line">                        respContent += spittle.user.userName + ", ";</div><div class="line">                        respContent += spittle.pushTime + ", " ;</div><div class="line">                        respContent += spittle.text;</div><div class="line">                        respContent += '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"' + delLink + '"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span>';</div><div class="line">                        respContent += "<span class="tag">&lt;/<span class="name">li</span>&gt;</span>";</div><div class="line"></div><div class="line">                        $('#mblog').prepend(respContent);</div><div class="line">                    &#125;,</div><div class="line">                    error: function(jqXHR, textStatus, errorThrown) &#123;</div><div class="line">                        var respBody = $.parseJSON(jqXHR.responseText);</div><div class="line">                        alert("Error: " + respBody.message);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                event.preventDefault();</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            var deleteLink = $("a:contains('Delete')");</div><div class="line"></div><div class="line">            $(deleteLink).click(function(event) &#123;</div><div class="line"></div><div class="line">                $.ajax(&#123;</div><div class="line">                    url: $(event.target).attr("href"),</div><div class="line">                    type: "DELETE",</div><div class="line"></div><div class="line">                    success: function(id) &#123;</div><div class="line">                        alert("delete" + id);</div><div class="line">                        var rowToDelete = $(event.target).closest("li");</div><div class="line"></div><div class="line">                        rowToDelete.remove();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                event.preventDefault();</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">        html,body&#123;margin:10px; padding: 10px;&#125;</div><div class="line">        .left,.right,.center &#123; height: 600px; &#125;</div><div class="line"></div><div class="line">        .left &#123;float:left; width: 200px; background-color: #ccc;&#125;</div><div class="line">        .right &#123;float:right; width: 200px; background-color: #ccc;&#125;</div><div class="line">        .center &#123; margin: 0 210px; background-color: #666;&#125;</div><div class="line"></div><div class="line">        ul.navbar &#123;</div><div class="line">            list-style-type: none;</div><div class="line">            padding: 0;</div><div class="line">            margin: 0 &#125;</div><div class="line">        ul.navbar li &#123;</div><div class="line">            background: white;</div><div class="line">            margin: 0.5em 0;</div><div class="line">            padding: 0.3em;</div><div class="line">            border-left: 1em solid black &#125;</div><div class="line">        ul.navbar a &#123;</div><div class="line">            text-decoration: none &#125;</div><div class="line">        a:link &#123;</div><div class="line">            color: blue &#125;</div><div class="line">        a:visited &#123;</div><div class="line">            color: purple &#125;</div><div class="line"></div><div class="line">        ul.mblog li &#123;</div><div class="line">            background: #ccc;</div><div class="line">            margin-bottom: 0.5em;</div><div class="line">            margin-right: 1em;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome, <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;sessionScope.user.getUserName()&#125;"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;sessionScope.user.getUserName()&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../static/img/default.jpg"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Site navigation menu --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"index.html"</span>&gt;</span>Home page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"musings.html"</span>&gt;</span>Musings<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"town.html"</span>&gt;</span>My town<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/u/$&#123;sessionScope.user.getUserName()&#125;/logout"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sf:form</span> <span class="attr">id</span>=<span class="string">"newSpittle"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">modelAttribute</span>=<span class="string">"spittle"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">sf:textarea</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">path</span>=<span class="string">"text"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Push"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">sf:form</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"newWeibo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"mblog"</span> <span class="attr">class</span>=<span class="string">"mblog"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"spittle"</span> <span class="attr">items</span>=<span class="string">"$&#123;spittles&#125;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">                $&#123;spittle.user.userName&#125;, $&#123;spittle.pushTime&#125;, $&#123;spittle.text&#125;</div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/u/$&#123;sessionScope.user.getUserName()&#125;/delete/$&#123;spittle.spittleId&#125;"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>参考</p><p><a href="http://www.journaldev.com/2552/spring-restful-web-service-example-with-json-jackson-and-client-program" target="_blank" rel="external">http://www.journaldev.com/2552/spring-restful-web-service-example-with-json-jackson-and-client-program</a></p><p><a href="http://www.codingpedia.org/ama/tutorial-rest-api-design-and-implementation-in-java-with-jersey-and-spring/" target="_blank" rel="external">http://www.codingpedia.org/ama/tutorial-rest-api-design-and-implementation-in-java-with-jersey-and-spring/</a></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记4 数据库之整合Hibernate</title>
      <link href="/2014/08/20/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%95%B4%E5%90%88Hibernate/"/>
      <url>/2014/08/20/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%95%B4%E5%90%88Hibernate/</url>
      <content type="html"><![CDATA[<p>整合 Spring MVC 与 Hibernate</p><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><a id="more"></a><p>servlet.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>io.github.josephpei.domain<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.PostgreSQL82Dialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.use_sql_comments"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"current_session_context_class"</span>&gt;</span>org.springframework.orm.hibernate4.SpringSessionContext<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"transactionAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> /&gt;</span></div></pre></td></tr></table></figure></p><p>User.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name=<span class="string">"user_tbl"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"user_id"</span>)</div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Long userId;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"user_name"</span>)</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"password"</span>)</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"last_ip"</span>)</div><div class="line">    <span class="keyword">private</span> String lastIp;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name=<span class="string">"last_visit"</span>)</div><div class="line">    <span class="keyword">private</span> Date lastVisit;</div><div class="line"></div><div class="line">    <span class="comment">// omit getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>HibUserDao.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibUserDao</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SessionFactory sessionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getMatchCount</span><span class="params">(String userName, String password)</span> </span>&#123;</div><div class="line">        String hql = <span class="string">"select count(*) from User where userName=:name and password=:pass"</span>;</div><div class="line"></div><div class="line">        Query q = sessionFactory.getCurrentSession().createQuery(hql);</div><div class="line">        q.setParameter(<span class="string">"name"</span>, userName);</div><div class="line">        q.setParameter(<span class="string">"pass"</span>, password);</div><div class="line"></div><div class="line">        Long row = <span class="number">0L</span>;</div><div class="line">        <span class="keyword">for</span> (Iterator it = q.iterate(); it.hasNext(); )</div><div class="line">            row = (Long) it.next();</div><div class="line">        <span class="keyword">return</span> row;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        Query q = sessionFactory.getCurrentSession().createQuery(<span class="string">"from User where userName=:name"</span>);</div><div class="line">        q.setParameter(<span class="string">"name"</span>, userName);</div><div class="line">        List&lt;User&gt; users = q.list();</div><div class="line">        <span class="keyword">return</span> (users.isEmpty() ? <span class="keyword">null</span> : users.get(<span class="number">0</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateLoginInfo</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        sessionFactory.getCurrentSession().update(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        sessionFactory.getCurrentSession().save(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>HibUserService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibUserService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HibUserDao hibUserDao;</div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMatchUser</span><span class="params">(String userName, String password)</span> </span>&#123;</div><div class="line">        Long count = hibUserDao.getMatchCount(userName, password);</div><div class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hibUserDao.findUserByName(userName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        hibUserDao.updateLoginInfo(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        hibUserDao.insertUser(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记3 验证Validator</title>
      <link href="/2014/08/18/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E9%AA%8C%E8%AF%81Validator/"/>
      <url>/2014/08/18/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E9%AA%8C%E8%AF%81Validator/</url>
      <content type="html"><![CDATA[<p>Spring Framework 验证有两种方式，一是 Spring 传统的，对需要验证的 POJO 对象编写一个对应的验证类（实现Validator接口）；二是标准的 JSR-303/349 Bean Validation API，需要第三方的实现（Hibernate-validator）；三是使用 JSR-349 中的 ScriptAssert。</p><p>下面以注册页面验证为例，用 JSR Bean Validation 实现基本字段验证，应用不同手段实现密码校验。<br><a id="more"></a></p><p>要实现验证的注册页面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"sf"</span> <span class="attr">uri</span>=<span class="string">"http://www.springframework.org/tags/form"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">        .error &#123; color: red; font-size: 0.9em; font-weight: bold; &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sf:form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"register.do"</span> <span class="attr">modelAttribute</span>=<span class="string">"registerCommand"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">size</span>=<span class="string">"15"</span> <span class="attr">maxlength</span>=<span class="string">"15"</span>/&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"username"</span> <span class="attr">cssClass</span>=<span class="string">"error"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"fullname"</span>&gt;</span>Nickname<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"fullname"</span> <span class="attr">id</span>=<span class="string">"fullname"</span> <span class="attr">size</span>=<span class="string">"15"</span>/&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"fullname"</span> <span class="attr">cssClass</span>=<span class="string">"error"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">sf:password</span> <span class="attr">path</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">size</span>=<span class="string">"30"</span>/&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"password"</span> <span class="attr">cssClass</span>=<span class="string">"error"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"confirmation"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">sf:password</span> <span class="attr">path</span>=<span class="string">"confirmation"</span> <span class="attr">id</span>=<span class="string">"confirmation"</span> <span class="attr">size</span>=<span class="string">"30"</span>/&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"confirmation"</span> <span class="attr">cssClass</span>=<span class="string">"error"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">sf:input</span> <span class="attr">path</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">size</span>=<span class="string">"30"</span>/&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">sf:errors</span> <span class="attr">path</span>=<span class="string">"email"</span> <span class="attr">cssClass</span>=<span class="string">"error"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"I accept. Create my account."</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sf:form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>servlet.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"validator"</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ResourceBundleMessageSource"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basename"</span> <span class="attr">value</span>=<span class="string">"errormess"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p><p>resources 目录下 errormess.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Size=the &#123;0&#125; field must be between &#123;2&#125; and &#123;1&#125; characters long</div><div class="line">Size.loginCommand.name=Name must be between &#123;2&#125; and &#123;1&#125; characters</div><div class="line">password.confirmation.error=Password don&apos;t confirm</div><div class="line">password.null=Field cannot be left blank</div><div class="line">password.confirmation.null=Field cannot be left blank</div><div class="line"></div><div class="line">NotEmpty=Field cannot be left blank</div><div class="line">NotNull=Field cannot be left blank</div></pre></td></tr></table></figure></p><p>验证对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterCommand</span> </span>&#123;</div><div class="line">    <span class="comment">// omit getter and setter</span></div><div class="line"></div><div class="line">    <span class="meta">@Size</span>(min=<span class="number">5</span>, max=<span class="number">20</span>)</div><div class="line">    <span class="meta">@Pattern</span>(regexp=<span class="string">"^[a-zA-Z0-9]+$"</span>, message=<span class="string">"Username must be alphanumeric with no spaces"</span>)</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String fullname;</div><div class="line"></div><div class="line">    <span class="meta">@Size</span>(min=<span class="number">6</span>, max=<span class="number">20</span>)</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="meta">@Size</span>(min=<span class="number">6</span>, max=<span class="number">20</span>)</div><div class="line">    <span class="keyword">private</span> String confirmation;</div><div class="line"></div><div class="line">    <span class="meta">@Email</span></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="方法一，编写自定义-Validator"><a href="#方法一，编写自定义-Validator" class="headerlink" title="方法一，编写自定义 Validator"></a>方法一，编写自定义 Validator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> RegistrationValidator.class.isAssignableFrom(aClass);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object o, Errors errors)</span> </span>&#123;</div><div class="line">        RegisterCommand registerCommand = (RegisterCommand) o;</div><div class="line">        <span class="keyword">if</span> (!registerCommand.getConfirmation().equals(registerCommand.getPassword()))</div><div class="line">            errors.rejectValue(<span class="string">"confirmation"</span>, <span class="string">"password.confirmation.error"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>控制器注入自定义的Validator，HomeController.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String salt = <span class="string">"SECRET"</span>;</div><div class="line">    <span class="comment">//private static final int DEFAULT_SPITTERS_PER_PAGE = 25;</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RegistrationValidator registrationValidator;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginCommand</span><span class="params">(Model model)</span></span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"loginCommand"</span>, <span class="keyword">new</span> LoginCommand());</div><div class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">loginCheck</span><span class="params">(@ModelAttribute(<span class="string">"loginCommand"</span>)</span> @Valid LoginCommand loginCommand,</span></div><div class="line">                                   BindingResult result,</div><div class="line">                                   HttpServletRequest request, Model model) &#123;</div><div class="line">        String name = loginCommand.getUsername();</div><div class="line">        String pass = loginCommand.getPassword();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"home"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String secretPass = DigestUtils.md5Hex(salt + pass);</div><div class="line">        <span class="keyword">boolean</span> valid = userService.hasMatchUser(name, secretPass);</div><div class="line">        <span class="keyword">if</span> (!valid) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/"</span>, <span class="string">"fatal"</span>, <span class="string">"Username or password error!"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            User user = userService.findUserByName(name);</div><div class="line">            user.setLastIp(request.getRemoteAddr());</div><div class="line">            user.setLastVisit(<span class="keyword">new</span> Date());</div><div class="line">            userService.loginSuccess(user);</div><div class="line">            request.getSession().setAttribute(<span class="string">"user"</span>, user);</div><div class="line">            String userPage = <span class="string">"redirect:user/"</span> + name;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(userPage);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/user/&#123;name&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">userPage</span><span class="params">(@PathVariable String name, HttpServletRequest request, Model model)</span> </span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"name"</span>, name);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"sucess"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"register.html"</span>, method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"registerCommand"</span>, <span class="keyword">new</span> RegisterCommand());</div><div class="line">        <span class="keyword">return</span> <span class="string">"register"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"register.do"</span>, method=RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(@ModelAttribute(<span class="string">"registerCommand"</span>)</span> @Valid RegisterCommand registerCommand,</span></div><div class="line">                           BindingResult result,</div><div class="line">                           HttpServletRequest request, Model model) &#123;</div><div class="line">        registrationValidator.validate(registerCommand, result);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"register"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setUserName(registerCommand.getUsername());</div><div class="line">        user.setPassword(DigestUtils.md5Hex(salt + registerCommand.getPassword()));</div><div class="line">        user.setLastIp(request.getRemoteAddr());</div><div class="line">        user.setLastVisit(<span class="keyword">new</span> Date());</div><div class="line">        userService.insertUser(user);</div><div class="line"></div><div class="line">        model.addAttribute(<span class="string">"loginCommand"</span>, <span class="keyword">new</span> LoginCommand());</div><div class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="方法二，编写注解类"><a href="#方法二，编写注解类" class="headerlink" title="方法二，编写注解类"></a>方法二，编写注解类</h2><p>CheckPassword<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123; TYPE, ANNOTATION_TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="meta">@Constraint</span>(validatedBy = CheckPasswordValidator.class)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckPassword &#123;</div><div class="line"></div><div class="line">    <span class="comment">//默认错误消息</span></div><div class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line"></div><div class="line">    <span class="comment">//分组</span></div><div class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//负载</span></div><div class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</div><div class="line"></div><div class="line">    <span class="comment">//指定多个时使用</span></div><div class="line">    <span class="meta">@Target</span>(&#123; FIELD, METHOD, PARAMETER, ANNOTATION_TYPE &#125;)</div><div class="line">    <span class="meta">@Retention</span>(RUNTIME)</div><div class="line">    <span class="meta">@Documented</span></div><div class="line">    <span class="meta">@interface</span> List &#123;</div><div class="line">        CheckPassword[] value();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckPasswordValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">CheckPassword</span>, <span class="title">RegisterCommand</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(CheckPassword constraintAnnotation)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(RegisterCommand user, ConstraintValidatorContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//两次密码不一样</span></div><div class="line">        <span class="keyword">if</span> (!user.getPassword().trim().equals(user.getConfirmation().trim())) &#123;</div><div class="line">            context.disableDefaultConstraintViolation();</div><div class="line">            context.buildConstraintViolationWithTemplate(<span class="string">"&#123;password.confirmation.error&#125;"</span>)</div><div class="line">                    .addPropertyNode(<span class="string">"confirmation"</span>)</div><div class="line">                    .addConstraintViolation();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在只需要在验证对象 RegisterCommand 上加上注解 @CheckPassword 即可</p><p>这里 <a href="https://github.com/jirutka/validator-spring" target="_blank" rel="external">https://github.com/jirutka/validator-spring</a> ，有人写了一个更加通用的解决方案，可以在注解中自定义验证方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpELAssert</span>(value = <span class="string">"password.equals(passwordVerify)"</span>,</div><div class="line">            applyIf = <span class="string">"password || passwordVerify"</span>,</div><div class="line">            message = <span class="string">"&#123;validator.passwords_not_same&#125;"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> String passwordVerify;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="方法三，使用SpELAssert"><a href="#方法三，使用SpELAssert" class="headerlink" title="方法三，使用SpELAssert"></a>方法三，使用SpELAssert</h2><p>JSR-349 Bean Validation API 1.1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ScriptAssert</span>(script = <span class="string">"_this.confirmation==_this.password"</span>, lang = <span class="string">"javascript"</span>, alias = <span class="string">"_this"</span>,</div><div class="line">message=<span class="string">"Password don't confirm"</span>)</div></pre></td></tr></table></figure><p>参考</p><p><a href="http://codetutr.com/2013/05/28/spring-mvc-form-validation/" target="_blank" rel="external">http://codetutr.com/2013/05/28/spring-mvc-form-validation/</a></p><p><a href="http://haohaoxuexi.iteye.com/blog/1812584" target="_blank" rel="external">http://haohaoxuexi.iteye.com/blog/1812584</a></p><p><a href="http://www.javacodegeeks.com/2013/06/spring-mvc-validator-and-initbinder.html" target="_blank" rel="external">http://www.javacodegeeks.com/2013/06/spring-mvc-validator-and-initbinder.html</a></p><p><a href="https://github.com/jirutka/validator-spring" target="_blank" rel="external">https://github.com/jirutka/validator-spring</a></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记2 数据库之JDBC</title>
      <link href="/2014/08/17/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BJDBC/"/>
      <url>/2014/08/17/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BJDBC/</url>
      <content type="html"><![CDATA[<p>这一节为我们的登录模块添加数据库存储，使用Spring JdbcTemplate。<a id="more"></a></p><p>servlet.xml 定义 DataStore</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-</span> <span class="attr">method</span>=<span class="string">"close"</span>&gt;</span>  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span>  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span>  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span>  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"io.github.josephpei.DAO"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"io.github.josephpei.Service"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">1.&lt;jee:jndi-lookup id="dataSource" jndi-name="jdbc/jpetstore"/&gt;&lt;bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager" /&gt;</div><div class="line"></div><div class="line">2.#this is the service object that we want to make transactional&lt;bean id="fooService" class="x.y.service.DefaultFooService"/&gt;</div><div class="line">#the transactional semantics&lt;tx:advice id="txAdvice" transaction-manager="txManager"&gt;</div><div class="line">  &lt;tx:attributes&gt;</div><div class="line">    &lt;tx:method name="get*" read-only="true"/&gt;</div><div class="line">    &lt;tx:method name="*"/&gt;</div><div class="line">  &lt;/tx:attributes&gt;</div><div class="line">&lt;/tx:advice&gt;</div><div class="line"></div><div class="line">#ensure that the above transactional advice runs for any execution of an operation defined by the FooService</div><div class="line">&lt;aop:config&gt;</div><div class="line">  &lt;aop:pointcut id="fooServiceOperation" expression="execution(* x.y.service.FooService.*(..))"/&gt;</div><div class="line">  &lt;aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation"/&gt;&lt;/aop:config&gt;3.#enable the configuration of transactional behavior based on annotations&lt;tx:annotation-driven transaction-manager="txManager"/&gt;</div><div class="line">--&gt;</div></pre></td></tr></table></figure><p>User.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> String lastIp;</div><div class="line">    <span class="keyword">private</span> Date lastVisit;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// getter and setter...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>JdbcUserDao.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUserDao</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getMatchCount</span><span class="params">(String userName, String password)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"SELECT count(*) FROM user_tbl WHERE user_name=? and password=?"</span>;</div><div class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, userName, password);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(<span class="keyword">final</span> String userName)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"select user_id, user_name from user_tbl where user_name=?"</span>;</div><div class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> Object[] &#123;userName&#125;,</div><div class="line">                <span class="keyword">new</span> RowMapper&lt;User&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">                        User user = <span class="keyword">new</span> User();</div><div class="line">                        user.setUserId(resultSet.getInt(<span class="string">"user_id"</span>));</div><div class="line">                        user.setUserName(resultSet.getString(<span class="string">"user_name"</span>));</div><div class="line">                        <span class="keyword">return</span> user;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateLoginInfo</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"update user_tbl set last_visit=?, last_ip=? where user_id=?"</span>;</div><div class="line">        jdbcTemplate.update(sql, user.getLastVisit(), user.getLastIp());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>UserService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcUserDao jdbcUserDao;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMatchUser</span><span class="params">(String userName, String password)</span> </span>&#123;</div><div class="line">        Integer count = jdbcUserDao.getMatchCount(userName, password);</div><div class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> jdbcUserDao.findUserByName(userName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        jdbcUserDao.updateLoginInfo(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"file:src/main/webapp/WEB-INF/spitter-servlet.xml"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hasMatchUser</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> b1 = userService.hasMatchUser(<span class="string">"admin"</span>, <span class="string">"123456"</span>);</div><div class="line">        <span class="keyword">boolean</span> b2 = userService.hasMatchUser(<span class="string">"admin"</span>, <span class="string">"1111"</span>);</div><div class="line">        Assert.assertTrue(b1);</div><div class="line">        Assert.assertFalse(b2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByName</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = userService.findUserByName(<span class="string">"admin"</span>);</div><div class="line">        Assert.assertEquals(user.getUserName(), <span class="string">"admin"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>验证码，参考 <a href="http://chenzhou123520.iteye.com/blog/1987636" target="_blank" rel="external">http://chenzhou123520.iteye.com/blog/1987636</a></p><p><img src="/img/h001.png" alt="home"></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring MVC 学习笔记1 入门</title>
      <link href="/2014/08/16/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%85%A5%E9%97%A8/"/>
      <url>/2014/08/16/Spring-MVC-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架，前端控制器是DispatcherServlet；应用控制器其实拆为处理器映射器(Handler Mapping)进行处理器管理和视图解析器(View Resolver)进行视图管理；页面控制器/动作/处理器为Controller接口（仅包含ModelAndView handleRequest(request, response) 方法）的实现（也可以是任何的POJO类）；支持本地化（Locale）解析、主题（Theme）解析及文件上传等；提供了非常灵活的数据验证、格式化和数据绑定机制；提供了强大的约定大于配置（惯例优先原则）的契约式编程支持。</p><p>这里我们实现一个简单的登录模块，登录后地址转为 <a href="http://domain.com/USER_NAME" target="_blank" rel="external">http://domain.com/USER_NAME</a><br><a id="more"></a></p><p>采用 Maven 包管理系统，pom.xml 添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>3.2.7.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure><p>web.xml，这里我的工程名为 spitter<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></div><div class="line">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Spring MVC Spitter<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spitter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spitter<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/spitter-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p><p>spitter-servlet.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"io.github.josephpei.Controller"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p><p>控制器 HomeController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">"/"</span>, <span class="string">"/home"</span>&#125;, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"home"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/login"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">loginCheck</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestParam</span><span class="params">(<span class="string">"pass"</span>)</span> String pass) </span>&#123;</div><div class="line">        String userPage = <span class="string">"redirect:"</span> + name;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(userPage);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;name&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">userPage</span><span class="params">(@PathVariable String name, Model model)</span> </span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"name"</span>, name);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"success"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>home.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pass"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>success.jsp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome, <span class="tag">&lt;<span class="name">c:out</span> <span class="attr">value</span>=<span class="string">"$&#123;name&#125;"</span>/&gt;</span>!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动态规划 DP 应用之 01 背包</title>
      <link href="/2014/08/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E5%BA%94%E7%94%A8%E4%B9%8B-01-%E8%83%8C%E5%8C%85/"/>
      <url>/2014/08/06/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E5%BA%94%E7%94%A8%E4%B9%8B-01-%E8%83%8C%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>问题描述：n 个不同的物品，每个物品只有一个，有价值 value 和重量 weight 两个属性；背包容量 w。求背包所能容纳的最大价值。</p><p>最优子结构：当我们把一件物品放进背包里时，会让总价值变高，并且让背包变重。对某一件物品来说，我们可以选择放或不放，然后移去这件物品所带来的影响。</p><p>c(n, w) = max( c(n-1, w), c(n-1, w-W[n]) + C[n] )<br>               ^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^<br>               不放 -&gt; 0         放 -&gt; 1</p><p>n：第1个到第n个物品要放进背包内。<br>w：背包负重上限。<br>c(n, w)：第1个到第n个物品尽量塞进负重限制为w的背包时，最大价值。<br>W[n]：第n个物品的重量。<br>C[n]：第n个物品的价值。 <a id="more"></a></p><h2 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h2><p>Bottom UP 递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 物品总数上限</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 背包负重上限</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxW = <span class="number">100000</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 物品</span></div><div class="line"><span class="keyword">struct</span> Item &#123;<span class="keyword">int</span> cost, weight;&#125; items[MaxN];</div><div class="line"> </div><div class="line"><span class="comment">// DP矩阵</span></div><div class="line"><span class="keyword">int</span> c[MaxN + <span class="number">1</span>][MaxW + <span class="number">1</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> w)</span>             <span class="comment">// n 为物品数，w 为背包负重上限</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)         <span class="comment">// 每个物品都试试看</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= w; ++j)    <span class="comment">// 每个重量都试试看</span></div><div class="line">            <span class="keyword">if</span> (j - items[i].weight &lt; <span class="number">0</span>)</div><div class="line">                c[i+<span class="number">1</span>][j] = c[i][j];    <span class="comment">// 放不下</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">                c[i+<span class="number">1</span>][j] = max( c[i][j], c[i][j - items[i].weight] + items[i].value );</div><div class="line"> </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Max Value: "</span> &lt;&lt; c[n][w] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Top Down 递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, space, max, maxi, t;</div><div class="line">    <span class="keyword">if</span> (maxKnow[W] != <span class="number">-1</span>) <span class="keyword">return</span> maxKnown[W];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, max = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">        <span class="keyword">if</span> ((sapce = W - items[i].weight) &gt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">if</span> ((t = knapsack(space) + items[i].value) &gt; max)</div><div class="line">                &#123; max = t; maxi = i; &#125;</div><div class="line">    maxKnown[W] = max; itemKnown[W] = items[maxi];</div><div class="line">    <span class="keyword">return</span> max</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h2><p>因为计算时只需要用到上方和左上方的格子，所以只需要一个单行数组就可以了。不过计算次序需要改为由后向前，才不会覆盖掉需要用来计算的格子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">100</span>, MaxW = <span class="number">100000</span>;</div><div class="line"><span class="keyword">struct</span> Item &#123;<span class="keyword">int</span> cost, weight;&#125; items[MaxN];</div><div class="line"><span class="keyword">int</span> c[MaxW + <span class="number">1</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> w)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> weight = items[i].weight, cost = items[i].cost;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = w; j - weight &gt;= <span class="number">0</span>; --j)</div><div class="line">            c[j] = max( c[j], c[j - weight] + cost );</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Max Value: "</span> &lt;&lt; c[w] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">knapsack_iter</span><span class="params">(W, items)</span>:</span></div><div class="line">    A = zeros(<span class="number">2</span> * W).reshape(<span class="number">2</span>, W)</div><div class="line">    i = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (v, w) <span class="keyword">in</span> items:</div><div class="line">        A[(i+<span class="number">1</span>)%<span class="number">2</span>][:w] = A[i%<span class="number">2</span>][:w]</div><div class="line">        A[(i+<span class="number">1</span>)%<span class="number">2</span>][w:] = maximum(A[i%<span class="number">2</span>][w:], A[i%<span class="number">2</span>][:W-w] + v)</div><div class="line">        i += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> A[i%<span class="number">2</span>][W<span class="number">-1</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">knapsack_recur</span><span class="params">(W, items)</span>:</span></div><div class="line">    <span class="comment"># top-down solution with memoization via hashtable</span></div><div class="line">    N = len(items)</div><div class="line">    A = &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">A_</span><span class="params">(i, j)</span>:</span></div><div class="line">        <span class="keyword">if</span> (str(i)+<span class="string">','</span>+str(j)) <span class="keyword">in</span> A: <span class="keyword">return</span> A[str(i)+<span class="string">','</span>+str(j)] <span class="comment"># memoization</span></div><div class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        v, w = items[i]</div><div class="line">        <span class="keyword">if</span> j-w &lt; <span class="number">0</span>:</div><div class="line">            result = A_(i<span class="number">-1</span>, j)</div><div class="line">            A[str(i)+<span class="string">','</span>+str(j)] = result <span class="comment"># memoization</span></div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            result = max(A_(i<span class="number">-1</span>, j), A_(i<span class="number">-1</span>, j-w) + v)</div><div class="line">            A[str(i)+<span class="string">','</span>+str(j)] = result <span class="comment"># memoization</span></div><div class="line">            <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> A_(N<span class="number">-1</span>, W<span class="number">-1</span>)</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动态规划 DP 应用 HamiltonPath 及 TSP</title>
      <link href="/2014/08/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E5%BA%94%E7%94%A8-HamiltonPath-%E5%8F%8A-TSP/"/>
      <url>/2014/08/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-DP-%E5%BA%94%E7%94%A8-HamiltonPath-%E5%8F%8A-TSP/</url>
      <content type="html"><![CDATA[<p>Hamilton Path 及 TSP 都属于 NP 完全问题，目前理论上尚无多项式算法，穷举法的时间复杂度是 O(N!)，通过运用动态规划 DP，可以缩短至 O(2^N * N^2)。 </p><p>输入：无向图 G = (V, E)，点集 V = {0, 1, … , n-1}，起始点 0</p><p>最优子结构：考虑路径上的最后一条边</p><p>dp[s,j] = min ( dp[s-{j},i] + adj[i,j] )</p><p>dp[s+{j},j] = min ( dp[s,i] + adj[i,j] ) <a id="more"></a></p><p>i、j：点。</p><p>s：点集合。</p><p>dist[s,j]：经过 S 中所有点一次且最后一点是 j 的路径长度。</p><p>adj[i,j]：adjacency matrix。</p><p>递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5</span>;    <span class="comment">// 点的数目</span></div><div class="line"><span class="keyword">int</span> dp[<span class="number">1</span> &lt;&lt; N][N];</div><div class="line"><span class="keyword">int</span> adj[N][N] = &#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">10</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">1</span> &#125;, &#123; <span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span> &#125;,</div><div class="line">&#123; <span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span> &#125; &#125;;</div><div class="line"><span class="keyword">int</span> answer;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">TSP</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> i, <span class="keyword">int</span> s_size)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (s_size == N)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 最后再加上一条回到原点的边，形成环状回路</span></div><div class="line">        <span class="keyword">if</span> (dp[s][i] + adj[i][<span class="number">0</span>] &lt; answer)</div><div class="line">            answer = dp[s][i] + adj[i][<span class="number">0</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; N; ++j) <span class="comment">// 只走第0点以外的点</span></div><div class="line">        <span class="keyword">if</span> (!(s &amp; (<span class="number">1</span> &lt;&lt; j)))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// ss = s + &#123;j&#125;;</span></div><div class="line">            <span class="keyword">int</span> ss = s | (<span class="number">1</span> &lt;&lt; j);</div><div class="line">            <span class="keyword">if</span> (!dp[ss][j] || dp[s][i] + adj[i][j] &lt; dp[ss][j])</div><div class="line">            &#123;</div><div class="line">                dp[ss][j] = dp[s][i] + adj[i][j];</div><div class="line">                TSP(ss, j, s_size + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">answer = <span class="number">1e9</span>;</div><div class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">TSP(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);   <span class="comment">// 从第0点出发</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, answer);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>非递归 Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortestHamiltonianCycle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getShortestHamiltonianCycle</span><span class="params">(<span class="keyword">int</span>[][] dist)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = dist.length;</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span> &lt;&lt; n][n];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] d : dp)</div><div class="line">            Arrays.fill(d, Integer.MAX_VALUE / <span class="number">2</span>);</div><div class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> mask = <span class="number">1</span>; mask &lt; <span class="number">1</span> &lt;&lt; n; mask += <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">                <span class="keyword">if</span> ((mask &amp; <span class="number">1</span> &lt;&lt; i) != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                        <span class="keyword">if</span> ((mask &amp; <span class="number">1</span> &lt;&lt; j) != <span class="number">0</span>) &#123;</div><div class="line">                            dp[mask][i] = Math.min(dp[mask][i], dp[mask ^ (<span class="number">1</span> &lt;&lt; i)][j] + dist[j][i]);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">            res = Math.min(res, dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i] + dist[i][<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// reconstruct path</span></div><div class="line">        <span class="keyword">int</span> cur = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span>[] order = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">            <span class="keyword">int</span> bj = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> ((cur &amp; <span class="number">1</span> &lt;&lt; j) != <span class="number">0</span> &amp;&amp; (bj == -<span class="number">1</span> || dp[cur][bj] + dist[bj][last] &gt; dp[cur][j] + dist[j][last])) &#123;</div><div class="line">                    bj = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            order[i] = bj;</div><div class="line">            cur ^= <span class="number">1</span> &lt;&lt; bj;</div><div class="line">            last = bj;</div><div class="line">        &#125;</div><div class="line">        System.out.println(Arrays.toString(order));</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Usage example</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] dist = &#123; &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">10</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">1</span> &#125;, &#123; <span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span> &#125;,</div><div class="line">                &#123; <span class="number">10</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span> &#125; &#125;;</div><div class="line">        System.out.println(<span class="number">5</span> == getShortestHamiltonianCycle(dist));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考<br><a href="http://codeforces.com/blog/entry/337" target="_blank" rel="external">http://codeforces.com/blog/entry/337</a></p><p><a href="http://acm.nudt.edu.cn/~twcourse/DynamicProgramming.html" target="_blank" rel="external">http://acm.nudt.edu.cn/~twcourse/DynamicProgramming.html</a></p><p><a href="http://www.csie.ntnu.edu.tw/~u91029/AlgorithmDesign2.html" target="_blank" rel="external">http://www.csie.ntnu.edu.tw/~u91029/AlgorithmDesign2.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UW 软硬件接口lab3 bufbomb</title>
      <link href="/2014/08/02/UW-%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3lab3-bufbomb/"/>
      <url>/2014/08/02/UW-%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3lab3-bufbomb/</url>
      <content type="html"><![CDATA[<p>本实验即常见的缓冲区溢出攻击。（注：新的 64bit Win8/Linux 下这种简单方式无效，x86_64 cpu 的可执行标志位 exec-shield，gcc 栈保护选项开关 -fno-stack-protector）</p><p>主函数为 test()，首先声明一个局部变量 volatile int local = 0xdeadbeef，volatile 是编译时不使用 register 优化，必须分配栈空间，后面的实验过程不能覆盖这个 local 变量。</p><p>然后就是存在缓冲区溢出漏洞的 getbuf 函数，也就是我们要操作的对象。<a id="more"></a></p><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p>getbuf 函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(gdb)p $rbp</div><div class="line">$1 = (void *) 0x7fffffffb730</div><div class="line">(gdb)p $rsp</div><div class="line">$2 = (void *) 0x7fffffffb700</div><div class="line">(gdb)p &amp;buf</div><div class="line">$3 = (char (*)[36]) 0x7fffffffb700</div></pre></td></tr></table></figure><p>&amp;buf 到 %rbp 距离 48(0x30) Byte，加上 old %rbp 和 return address，一共 64 Byte</p><p>smoke.txt 内容应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">48 Byte 无意义内容</div><div class="line">8 Byte old %rbp</div><div class="line">8 Byte smoke 函数地址  (intel 是 little endian)</div></pre></td></tr></table></figure></p><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>fizz 函数一共有7个参数，前6个进 register，最后一个参数 val 进栈</p><p>fizz.txt 内容应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">48 Byte 无意义内容</div><div class="line">8 Byte old %rbp</div><div class="line">8 Byte fizz 函数地址</div><div class="line">8 Byte fizz 函数返回地址(这个可以是任意值)</div><div class="line">8 Byte val 参数值 (makecookie得到的值)</div></pre></td></tr></table></figure></p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>修改全局变量 global_value 等于 cookie，并跳转到指定函数 bang</p><p>bang.txt 内容应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">指令代码</div><div class="line">填充够 48 Byte 无意义内容</div><div class="line">8 Byte old %rbp</div><div class="line">8 Byte buff 首地址</div></pre></td></tr></table></figure></p><p>bang.s<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">movq 0x602320, %r9</div><div class="line">movq %r9, 0x602308</div><div class="line">pushq $0x401020</div><div class="line">retq</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> mooc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UW 软硬件接口lab2 bomb</title>
      <link href="/2014/08/02/UW-%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3lab2-bomb/"/>
      <url>/2014/08/02/UW-%E8%BD%AF%E7%A1%AC%E4%BB%B6%E6%8E%A5%E5%8F%A3lab2-bomb/</url>
      <content type="html"><![CDATA[<p>本实验是解除二进制炸弹。给你一个二进制可执行文件，运行该文件，你需要在没有任何提示的情况下输入6个password，如果都输入正确，则炸弹被解除（完成了实验）；如果输入错误，则炸弹爆炸（当然不是真爆炸了，需要重做）。<a id="more"></a></p><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p>x /s $rsi 即可看到比较函数的字符串参数</p><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p>输入6个数字，仔细阅读汇编代码，即可发现是比较后三个和前三个是否相等</p><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p>查看sscanf参数 x /s $rsi “%d %d”，输入两个整数</p><p>观察cmpl $0x7 0xc(%rsp)，并且由于sscanf的参数是从后向前压栈，输入两个整数存在 0x8(%rsp), 0xc(%rsp) 两个位置，并且第一个数要不大于7</p><p>下面就是根据第一个输入 switch</p><p>一共8组，输入任何一组都可以</p><p>(0, 535), (1, 926), (2, 214), (3, 339), (4, 119), (5, 352), (6, 919), (7, 412)</p><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><p>查看sscanf参数 x /s $rsi “%d”，输入一个整数，要大于 0 ，接着调用 func4，返回结果必须是 0x37</p><p>下面就是分析func4，这是一个递归函数，就是著名的 Fibnacci 数列</p><p>Fib(n) = Fib(n-1) + Fib(n-2)</p><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><p>输入两个整数 x, y</p><p>第一个数 %eax = x AND 0xF != 0xF，即第一个数二进制低4位不能全为 1</p><p>mov 0x401ba0(,%rax,4),%eax</p><p>0x401ba0 是数组起始地址，该数组一共有16个数 (gdb)p *0x401ba0@16</p><p>{10, 2, 14, 7, 8, 12, 15, 11, 0, 4, 1, 13, 3, 9, 6, 5}</p><p>phase_5 还原成 C 语言大致如下。要求最终 count = 0xC，r 等于输入的第二个数 y</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">10</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">phase_5</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x = ???;  <span class="comment">/* 0 ~ 14 */</span></div><div class="line"><span class="keyword">int</span> r = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">x = a[x];</div><div class="line">r += x;</div><div class="line">++count;</div><div class="line">&#125; <span class="keyword">while</span>(x != <span class="number">15</span>);</div><div class="line"></div><div class="line">assert(count == <span class="number">12</span>);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h2><p>链表</p>]]></content>
      
      
        <tags>
            
            <tag> mooc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode - two-sum</title>
      <link href="/2014/05/04/leetcode---two-sum/"/>
      <url>/2014/05/04/leetcode---two-sum/</url>
      <content type="html"><![CDATA[<p>原题：</p><p>Given an array of integers, find two numbers such that they add up to a specific target number.</p><p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p><p>You may assume that each input would have exactly one solution.</p><p>Input: numbers={2, 7, 11, 15}, target=9</p><p>Output: index1=1, index2=2<br><a id="more"></a></p><p>难点，原数组是未排序，且可能有重复，例如测例</p><p>Input: numbers={0, 1, 4, 0}, target=0</p><p>Output: index1=1, index2=4</p><p>经典的方法，复制数组，排序，两头往中间扫描，找到之后再在原数组来一趟扫描求得原index</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">int</span>[] num = numbers.clone();</div><div class="line">        Arrays.sort(num);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> length = numbers.length;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> right = length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"></div><div class="line">        ArrayList&lt;Integer&gt; index = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">            sum = num[left] + num[right];</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (sum == target) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</div><div class="line">                    <span class="keyword">if</span> (numbers[i] == num[left]) &#123;</div><div class="line">                        index.add(i + <span class="number">1</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numbers[i] == num[right]) &#123;</div><div class="line">                        index.add(i + <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (index.size() == <span class="number">2</span>) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</div><div class="line">                --right;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ++left;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line"></div><div class="line">        result[<span class="number">0</span>] = index.get(<span class="number">0</span>);</div><div class="line">        result[<span class="number">1</span>] = index.get(<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Solution slt = <span class="keyword">new</span> Solution();</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] numbers = &#123; <span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span> &#125;;</div><div class="line">        <span class="keyword">int</span> target = <span class="number">9</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line"></div><div class="line">        index = slt.twoSum(numbers, target);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"index1="</span> + index[<span class="number">0</span>] + <span class="string">", index2="</span> + index[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>暴力的直接用Hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">int</span>[] indices = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> len = numbers.length;</div><div class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (!map.containsKey(numbers[i])) &#123;</div><div class="line">                map.put(target - numbers[i], i);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                indices[<span class="number">0</span>] = map.get(numbers[i]) + <span class="number">1</span>;</div><div class="line">                indices[<span class="number">1</span>] = i + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> indices;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之工厂模式(Java实现)</title>
      <link href="/2014/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F(java%E5%AE%9E%E7%8E%B0)/"/>
      <url>/2014/02/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F(java%E5%AE%9E%E7%8E%B0)/</url>
      <content type="html"><![CDATA[<p>GoF 经典定义：Define an interface for creating an object, but let subclasses decide which class to initiate. Factory Method lets a class defer instantiation to subclasses.(定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到子类。)<a id="more"></a></p><p>通用UML图</p><p><img src="/img/Factory01.svg" alt="Factory UML"></p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>产品类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"invoke ConcreteProduct1 method!"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"invoke ConcreteProduct2 method!"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>产品工厂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</div><div class="line"><span class="function">Product <span class="title">createProduct</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product1Factory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product2Factory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>客户<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Product p1 = <span class="keyword">new</span> Product1Factory().createProduct();</div><div class="line">Product p2 = <span class="keyword">new</span> Product2Factory().createProduct();</div><div class="line"></div><div class="line">p1.method();</div><div class="line">p2.method();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">invoke ConcreteProduct1 method!</div><div class="line">invoke ConcreteProduct2 method!</div></pre></td></tr></table></figure></p><h2 id="参数化工厂"><a href="#参数化工厂" class="headerlink" title="参数化工厂"></a>参数化工厂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamFactory</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">(String cName)</span> <span class="keyword">throws</span> NotImplementProduct </span>&#123;</div><div class="line"><span class="keyword">if</span> (cName.compareTo(<span class="string">"ConcreteProduct1"</span>) == <span class="number">0</span>)</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cName.compareTo(<span class="string">"ConcreteProduct2"</span>) == <span class="number">0</span>)</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotImplementProduct(cName);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述方法需要添加新具体类时需要修改工厂代码，如果充分实现OO，可以使用泛型，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">&lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; c)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCreator</span> <span class="keyword">implements</span> <span class="title">Creator</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</div><div class="line">Product product = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">product = (Product) Class.forName(c.getName()).newInstance();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> (T)product;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">Creator creator = <span class="keyword">new</span> ProductCreator();</div><div class="line">Product p1 = creator.createProduct(ConcreteProduct1.class);</div><div class="line">Product p2 = creator.createProduct(ConcreteProduct2.class);</div><div class="line"></div><div class="line"></div><div class="line">p1.method();</div><div class="line">p2.method();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以更简单一点，取消工厂接口(基类)，将工厂方法定义为静态方法，这种模式适合小模块使用。如果具体产品类构造函数复杂，还是采用第一种模式为佳。</p><h2 id="延迟初始化"><a href="#延迟初始化" class="headerlink" title="延迟初始化"></a>延迟初始化</h2><p>延迟初始化(Lazy Initialization)是工厂模式的一个扩展应用，一个对象被消费完毕后，并不立刻释放，工厂类保持其初始状态，等待再次被使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyFactory</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Product&gt; pMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Product</span></div><div class="line"><span class="title">createProduct</span><span class="params">(String type)</span> <span class="keyword">throws</span> Exception &#123;</div><div class="line">Product product = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (pMap.containsKey(type)) &#123;</div><div class="line">product = pMap.get(type);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">if</span> (type.equals(<span class="string">"ConcreteProduct1"</span>)) &#123;</div><div class="line">product = <span class="keyword">new</span> ConcreteProduct1();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"ConcreteProduct2"</span>)) &#123;</div><div class="line">product = <span class="keyword">new</span> ConcreteProduct2();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotImplementProduct(type);</div><div class="line">&#125;</div><div class="line">pMap.put(type, product);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> product;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="抽象工厂方法"><a href="#抽象工厂方法" class="headerlink" title="抽象工厂方法"></a>抽象工厂方法</h2><p>上述的简单扩展</p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> design pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat 编码设定</title>
      <link href="/2014/02/16/tomcat-%E7%BC%96%E7%A0%81%E8%AE%BE%E5%AE%9A/"/>
      <url>/2014/02/16/tomcat-%E7%BC%96%E7%A0%81%E8%AE%BE%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>大部分网上文章都是Connector标签里面添加 URIEncoding=”utf-8”，这种方法过于暴力。</p><p>正确的做法是添加 useBodyEncodingForURI=”true”，这句的话告诉tomcat用页面的编码去处理post，推荐使用。</p><p>JSP页面头</p><pre><code>&lt;%@ page language=&quot;java&quot;  pageEncoding=&quot;UTF-8&quot;%&gt;</code></pre><p>html标签的head标签里加上</p><pre><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</code></pre>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Eclipse中使用Maven Tomcat构建Web应用</title>
      <link href="/2014/02/08/eclipse%E4%B8%AD%E4%BD%BF%E7%94%A8maven-tomcat%E6%9E%84%E5%BB%BAweb%E5%BA%94%E7%94%A8/"/>
      <url>/2014/02/08/eclipse%E4%B8%AD%E4%BD%BF%E7%94%A8maven-tomcat%E6%9E%84%E5%BB%BAweb%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="建立web应用"><a href="#建立web应用" class="headerlink" title="建立web应用"></a>建立web应用</h2><p>使用eclipse建立maven的web工程</p><h2 id="配置web工程"><a href="#配置web工程" class="headerlink" title="配置web工程"></a>配置web工程</h2><p>完善目录</p><p>让目录变成标准的maven结构，增加Maven项目必要的主目录（src/main/java）和测试目录（src/test/java）。<br><a id="more"></a><br>参考 <a href="http://blog.rockcms.com/archives/159" target="_blank" rel="external">http://blog.rockcms.com/archives/159</a></p><h2 id="配置tomcat-maven"><a href="#配置tomcat-maven" class="headerlink" title="配置tomcat maven"></a>配置tomcat maven</h2><p>tomcat 添加用户</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin-gui"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">password</span>=<span class="string">"admin"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script,admin-gui"</span> <span class="attr">username</span>=<span class="string">"admin"</span>/&gt;</span></div></pre></td></tr></table></figure><p>maven settings.xml添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="配置-Eclipse-项目"><a href="#配置-Eclipse-项目" class="headerlink" title="配置 Eclipse 项目"></a>配置 Eclipse 项目</h2><p>Preferences -&gt; Maven -&gt; Installations</p><p>不使用内置maven，使用我们自己安装的maven</p><p>项目 pom.xml</p><p><a href="http://tomcat.apache.org/maven-plugin.html" target="_blank" rel="external">http://tomcat.apache.org/maven-plugin.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">finalName</span>&gt;</span>SimpleDB<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/text<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">path</span>&gt;</span>/simpledb<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure><p>eclipse Debug Configuration</p><p><img src="/img/em01.jpg" alt="eclipse maven"></p><p>浏览器访问 <a href="http://127.0.0.1:8080/simpledb/" target="_blank" rel="external">http://127.0.0.1:8080/simpledb/</a></p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>src/main/java 下载创建名为 TestServlet 的jave类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.simpledb;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span></span></div><div class="line">                 <span class="keyword">throws</span> ServletException, IOException</div><div class="line">  &#123;</div><div class="line">    String hello=<span class="string">"Test : Hello April!"</span>;</div><div class="line">    System.out.print(hello);</div><div class="line">    res.getWriter().write(hello);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span></span></div><div class="line">                 <span class="keyword">throws</span> ServletException, IOException</div><div class="line">  &#123;</div><div class="line">    doPost(req, res);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>src/main/webapp/WEB-INF/web.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;web-app&gt;</div><div class="line">  &lt;display-name&gt;simpledb&lt;/display-name&gt;</div><div class="line">  &lt;servlet&gt;</div><div class="line">    &lt;servlet-name&gt;test&lt;/servlet-name&gt;</div><div class="line">    &lt;servlet-class&gt;com.example.TestServlet&lt;/servlet-class&gt;</div><div class="line">  &lt;/servlet&gt;</div><div class="line">  &lt;servlet-mapping&gt;</div><div class="line">    &lt;servlet-name&gt;test&lt;/servlet-name&gt;</div><div class="line">    &lt;url-pattern&gt;/test&lt;/url-pattern&gt;</div><div class="line">  &lt;/servlet-mapping&gt;</div><div class="line">  &lt;welcome-file-list&gt;</div><div class="line">    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</div><div class="line">    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</div><div class="line">    &lt;welcome-file&gt;index.shtml&lt;/welcome-file&gt;</div><div class="line">    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">  &lt;/welcome-file-list&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure><p>浏览器访问 <a href="http://127.0.0.1:8080/simpledb/test" target="_blank" rel="external">http://127.0.0.1:8080/simpledb/test</a></p><h2 id="直接在-Tomcat-下部署并调试"><a href="#直接在-Tomcat-下部署并调试" class="headerlink" title="直接在 Tomcat 下部署并调试"></a>直接在 Tomcat 下部署并调试</h2><p>进入 conf\Catalina\localhost 目录，添加simpledb.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Context</span>  <span class="attr">path</span>=<span class="string">"/simpledb"</span> <span class="attr">docBase</span>=<span class="string">"D:\code\java\simpledb\src\main\webapp"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">privileged</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure><p>现在可以点击<img src="/img/em02.png" alt="tomcat maven">来运行和调试maven的web工程了</p><p>注：如果遇到 Fatal error compiling: tools.jar not found: C:\Program Files\Java\jre7..\lib\tools.jar 错误，注意 JAVA_HOME 要设置为 JDK_HOME，或者在eclipse里</p><pre><code>Step 1 : Right Click on Eclipse project PropertiesStep 2 : Java Build Path &gt;LibrariesStep 3 : Click on JRE &gt; Edit &gt; Installed JREStep 4 : Edit Jre &gt; Set JRE Home = JDK_HOME</code></pre>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Maven 入门</title>
      <link href="/2014/02/08/maven-%E5%85%A5%E9%97%A8/"/>
      <url>/2014/02/08/maven-%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>Maven是构建Java应用的优秀管理工具，是Apache软件基金会的顶级项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p><p>官网地址  <a href="http://maven.apache.org/" target="_blank" rel="external">http://maven.apache.org/</a> <a id="more"></a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>Windows 添加环境变量 M2_HOME -&gt; D:\JavaApp\apache-maven-3.0.5（改成自己的哦）</p><p>在Path中加入 ;%M2_HOME%\bin</p><p>修改依赖包下载保存位置</p><p>默认是 ~/.m2/repository，修改M2_HOME/conf/settings.xml</p><localrepository>/path/to/local/repo</localrepository><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><h3 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h3><p>没有定制之前，所有的项目都有如下的结构</p><table><thead><tr><th>目录</th><th>目的</th></tr></thead><tbody><tr><td>${basedir}</td><td>存放 pom.xml和所有的子目录</td></tr><tr><td>${basedir}/src/main/java</td><td>项目的 java源代码</td></tr><tr><td>${basedir}/src/main/resources</td><td>项目的资源，比如说 property文件</td></tr><tr><td>${basedir}/src/test/java</td><td>项目的测试类，比如说 JUnit代码</td></tr><tr><td>${basedir}/src/test/resources</td><td>测试使用的资源</td></tr></tbody></table><p>接下来我们用 maven 来建立最著名的“Hello World!”程序 :)</p><pre><code>mvn archetype:generate [-DgroupId=com.mycompany.helloworld -DartifactId=helloworld -Dpackage=com.mycompany.helloworld -Dversion=1.0-SNAPSHOT]</code></pre><p>archetype:generate 目标会列出一系列的 archetype 让你选择。 Archetype 可以理解成项目的模型。 Maven 为我们提供了很多种的项目模型，包括从简单的 Swing 到复杂的 Web 应用。我们选择默认的 maven-archetype-quickstart (类型太多，看得眼花，可以加上 -DarchetypeCatalog=internal)。回车，这时候让你确定项目属性的配置</p><p>maven 的 archetype 插件建立了一个 helloworld 目录，这个名字来自 artifactId 。在这个目录下面，有一个 Project Object Model(POM) 文件 pom.xml 。这个文件用于描述项目，配置插件和管理依赖关系。源代码和资源文件放在 src/main 下面，而测试代码和资源放在 src/test 下面。</p><p>Maven 已经为我们建立了一个 App.java 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.mycompany.helloworld;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Hello world!</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println( <span class="string">"Hello World!"</span> );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>开始构建</p><pre><code>cd helloworldmvn package</code></pre><p> 这个时候， maven 在 helloworld 下面建立了一个新的目录 target/ ，构建打包后的 jar 文件 helloworld-1.0-SNAPSHOT.jar 就存放在这个目录下。编译后的 class 文件放在 target/classes/ 目录下面，测试 class 文件放在 target/test-classes/ 目录下面。</p><p> 为了验证我们的程序能运行，执行下面的命令</p><pre><code>java -cp target/helloworld-1.0-SNAPSHOT.jar com.mycompany.helloworld.App</code></pre><h3 id="使用-eclipse"><a href="#使用-eclipse" class="headerlink" title="使用 eclipse"></a>使用 eclipse</h3><p>Maven天生就对Eclipse做了集成，我们使用mvn eclipse:eclipse就得到了一个Eclipse的项目结构，在Eclipse中使用import功能就能直接导入到IDE中了。</p><p>安装eclipse插件 Maven Integration for Eclipse，新版eclispe可以从eclipse market中直接安装，旧版的源地址为</p><p><a href="http://download.eclipse.org/technology/m2e/releases" target="_blank" rel="external">http://download.eclipse.org/technology/m2e/releases</a></p><h2 id="Maven基础概念"><a href="#Maven基础概念" class="headerlink" title="Maven基础概念"></a>Maven基础概念</h2><h3 id="POM-Project-Object-Model"><a href="#POM-Project-Object-Model" class="headerlink" title="POM (Project Object Model)"></a>POM (Project Object Model)</h3><p>一个项目所有的配置都放置在 POM 文件中：定义项目的类型、名字，管理依赖关系，定制插件的行为等等。比如说，你可以配置 compiler 插件让它使用 java 1.5 来编译。</p><p>在 POM 中，groupId, artifactId, packaging, version 叫作 maven 坐标，它能唯一的确定一个项目。有了 maven 坐标，我们就可以用它来指定我们的项目所依赖的其他项目，插件，或者父项目。一般 maven 坐标写成如下的格式：</p><pre><code>groupId:artifactId:packaging:version</code></pre><p>大项目一般会分成几个子项目。在这种情况下，每个子项目就会有自己的 POM 文件，然后它们会有一个共同的父项目。这样只要构建父项目就能够构建所有的子项目了。子项目的 POM 会继承父项目的 POM。另外，所有的 POM都继承了一个 Super-POM。Super-POM 设置了一些默认值。果你想看到运行时候的 POM 的全部内容的话，可以运行下面的命令</p><pre><code>mvn help:effective-pom</code></pre><h3 id="Maven-插件"><a href="#Maven-插件" class="headerlink" title="Maven 插件"></a>Maven 插件</h3><p>在上文中，我们用了 mvn archetype:generate 命令来生成一个项目。那么这里的 archetype:generate 是什么意思呢？archetype 是一个插件的名字，generate是目标(goal)的名字。这个命令的意思是告诉 maven 执行 archetype 插件的 generate 目标。插件目标通常会写成 pluginId:goalId</p><p>一个目标是一个工作单元，而插件则是一个或者多个目标的集合。比如说Jar插件，Compiler插件，Surefire插件等。从看名字就能知道，Jar 插件包含建立Jar文件的目标， Compiler 插件包含编译源代码和单元测试代码的目标。Surefire 插件的话，则是运行单元测试。</p><h3 id="Maven-生命周期"><a href="#Maven-生命周期" class="headerlink" title="Maven 生命周期"></a>Maven 生命周期</h3><p>我们用的第二个命令是：mvn package。这里的 package 是一个maven的生命周期阶段 (lifecycle phase )。生命周期指项目的构建过程，它包含了一系列的有序的阶段 (phase)，而一个阶段就是构建过程中的一个步骤。</p><p>那么生命周期阶段和上面说的插件目标之间是什么关系呢？插件目标可以绑定到生命周期阶段上。一个生命周期阶段可以绑定多个插件目标。当 maven 在构建过程中逐步的通过每个阶段时，会执行该阶段所有的插件目标。</p><p>maven 能支持不同的生命周期，但是最常用的是默认的Maven生命周期 (default Maven lifecycle )。如果你没有对它进行任何的插件配置或者定制的话，那么上面的命令 mvn package 会依次执行默认生命周期中直到包括 package 阶段前的所有阶段的插件目标：</p><pre><code>process-resources 阶段：resources:resourcescompile 阶段：compiler:compileprocess-classes 阶段：(默认无目标)process-test-resources 阶段：resources:testResourcestest-compile 阶段：compiler:testCompiletest 阶段：surefire:testprepare-package 阶段：(默认无目标)package 阶段：jar:jar</code></pre><h3 id="Maven-依赖管理"><a href="#Maven-依赖管理" class="headerlink" title="Maven 依赖管理"></a>Maven 依赖管理</h3><p>maven 坐标能够确定一个项目。换句话说，我们可以用它来解决依赖关系。在 POM 中，依赖关系是在 dependencies 部分中定义的。</p><p>在 POM 的 dependencies 部分中，scope 决定了依赖关系的适用范围。我们的例子中 junit 的 scope 是 test，那么它只会在执行 compiler:testCompile and surefire:test 目标的时候才会被加到 classpath 中，在执行 compiler:compile 目标时是拿不到 junit 的。</p><p>我们还可以指定 scope 为 provided，意思是 JDK 或者容器会提供所需的jar文件。比如说在做web应用开发的时候，我们在编译的时候需要 servlet API jar 文件，但是在打包的时候不需要把这个 jar 文件打在 WAR 中，因为servlet容器或者应用服务器会提供的。</p><p>scope 的默认值是 compile，即任何时候都会被包含在 classpath 中，在打包的时候也会被包括进去。</p><h3 id="Maven-库"><a href="#Maven-库" class="headerlink" title="Maven 库"></a>Maven 库</h3><p>当 maven 查找需要的 jar 文件时，它会先在本地库中寻找，只有在找不到的情况下，才会去远程库中找。</p><p>运行下面的命令能把我们的 helloworld 项目安装到本地库</p><pre><code>mvn install</code></pre><p>一旦一个项目被安装到了本地库后，你别的项目就可以通过 maven 坐标和这个项目建立依赖关系。比如如果我现在有一个新项目需要用到 helloworld，那么在运行了上面的 mvn install 命令后，我就可以如下所示来建立依赖关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.helloworld<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用Python秒掉八皇后问题</title>
      <link href="/2014/01/09/%E7%94%A8python%E7%A7%92%E6%8E%89%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2014/01/09/%E7%94%A8python%E7%A7%92%E6%8E%89%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>来源：<a href="http://www.iteye.com/topic/106747" target="_blank" rel="external">http://www.iteye.com/topic/106747</a></p><p>在 <a href="http://www.iteye.com/topic/101055" target="_blank" rel="external">函数式编程语言曲高和寡？</a> 一文中，我们看到 Haskell 能用两行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sort [] = []</div><div class="line">sort (x:xs) = sort [y | y &lt;- xs, y &lt; x] ++ [x] ++ sort [y | y &lt;- xs, y &gt;= x]</div></pre></td></tr></table></figure><p>搞定快速排序算法。这是偶然，还是必然？在这篇文章中，lichray 用我们所熟悉的 Python 语言，几行代码搞定很多学编程几年的人都只是一知半解的算法——八皇后问题，展示和上篇文章中的快速排序一样清晰的、令人耳目一新的函数式算法思想。<a id="more"></a></p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>这一部分对于那些 Python 老手和已经知道八皇后问题定义的程序员来说是多余的。 </p><p>八皇后问题（摘自 SICP ed2 中文版 P84 练习2.42）<br>　　<br>“八皇后谜题”问的是怎样将八个皇后摆在国际象棋棋盘上，使得任意一个皇后都不能攻击另一个皇后（也就是说，任意两个皇后都不在同一行、同一列或者同一对角线上）。</p><p>在这篇文章中，我们要解决的问题比这个范围还要更广一点，即：允许棋盘是 n × m 大小的。也就是说，所谓的 n 皇后问题只是我们给出的程序的 n ＝ m 时的版本。不过别担心，函数式编程的力量就在于抽象等级的空前提高，问题越抽象，解决起来越顺手。<br>　　<br>列表领悟特性 </p><p>现在应该绝大多数动态语言的程序员都对这个特性很了解了，因为常见的 Python, Ruby, ErLang, Haskell 甚至是 JavaScript 都加上了这个特性。这是一种通过给出列表中每一项的形式和组成形式的元素要满足的条件自动生成列表的语法糖。下面是 Python 中的两个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 得到一个 2 到 20 中的偶数组成的列表，只要写</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">21</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>]</div><div class="line"></div><div class="line"><span class="comment"># 记住，只需给出一个形式，比方说想求两个列表的“笛卡尔乘积”</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[(x , y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>) <span class="keyword">for</span> y <span class="keyword">in</span> [<span class="number">3</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">8</span>]]</div></pre></td></tr></table></figure></p><p>很明显，仅仅使用列表领悟特性就可以表示一些算法了，比如提到过的快速排序： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort</span> <span class="params">(ls)</span>:</span> </div><div class="line">　　<span class="keyword">return</span> [] <span class="keyword">if</span> ls == [] \</div><div class="line">　　　<span class="keyword">else</span> sort([y <span class="keyword">for</span> y <span class="keyword">in</span> ls[<span class="number">1</span>:] <span class="keyword">if</span> y &lt; ls[<span class="number">0</span>]]) + \</div><div class="line">　　　[ls[<span class="number">0</span>]] + \</div><div class="line">　　　sort([y <span class="keyword">for</span> y <span class="keyword">in</span> ls[<span class="number">1</span>:] <span class="keyword">if</span> y &gt;= ls[<span class="number">0</span>]])</div><div class="line">　　<span class="comment"># 别忘了 python-2.5 的新特性条件分支表达式哦！可惜太长，不得不强制换行。</span></div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">## 算法描述</span></div><div class="line"></div><div class="line">首先我们要认识到一点，算法所对应的函数的输入和输出分别是什么。我们需要的是一个函数 queens()，它接受两个参数，自然数 row 和 col，分别表示行数和列数；坐标是 (col, row) 形式的序对，下标 从 <span class="number">0</span> 开始计数。</div><div class="line">　　　　</div><div class="line">我们把输出的结果表示为棋盘格局描述组成的列表。那棋盘格局呢？难道表示为所有棋子的坐标，像 [(<span class="number">5</span>,<span class="number">0</span>), (<span class="number">2</span>,<span class="number">1</span>), (<span class="number">0</span>,<span class="number">2</span>),(<span class="number">6</span>,<span class="number">3</span>), (<span class="number">4</span>,<span class="number">4</span>), (<span class="number">7</span>,<span class="number">5</span>), (<span class="number">1</span>,<span class="number">6</span>), (<span class="number">3</span>,<span class="number">7</span>)] ？不需要吧，看也能看出来，完全可以使得下标 col、row 中有一个是有序排列的。在这里，我们认为 row 是有序的，对于上面的例子，只须表示为 [<span class="number">5</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>] 即可，row 是一个解的下标。</div><div class="line"></div><div class="line">那么，整个函数的输出就应该类似这样：[[<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>]]；这是 queens(<span class="number">4</span>,<span class="number">4</span>) 的输出结果。 </div><div class="line"></div><div class="line">归纳法定义</div><div class="line"></div><div class="line">什么是归纳法定义？回忆一下经典的求级数例程是怎么写出来的。我们根据数学归纳法得到：</div><div class="line"></div><div class="line">    f (<span class="number">0</span>) = <span class="number">1</span> </div><div class="line">    f (n) = <span class="number">1</span> + f (n - <span class="number">1</span>) </div><div class="line"></div><div class="line">然后把这些抄成编程语言的形式。对于函数 queens 也是这样，我们要确定这个函数的递归下界和递推表示。 </div><div class="line"></div><div class="line">递归下界很好办，就是 queens(n,<span class="number">0</span>) （此处 n 忽略，因为不影响结果）的输出结果。对于一个没有列数的棋盘，只有一个解，空解 []；同时，输出的解集也只有这一个元素，为 [[]]（下面的数学定义使用了集合表示代替列表）。</div><div class="line"></div><div class="line">递推表示是什么呢？我们可以在纸上画画图，不难发现，对于一个解，你画出的最后一个位置就是在前面已画出的少一个棋子的格局的基础上再加一个位置安全的棋子。设这个“加”函数为 g (x,y)，“安全”函数为 s (x,y)。那么 </div><div class="line"></div><div class="line">    f (n,m) = &#123;g (x,y) | x ∈ [<span class="number">0</span>, n], y ∈ f (n,m<span class="number">-1</span>) s (x,y) = true&#125; </div><div class="line"></div><div class="line">形式化的思考：</div><div class="line"></div><div class="line">有了上面的数学定义，抄成 Python 代码，那就是用脚趾都能搞定呀。</div><div class="line">```python</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">queens</span> <span class="params">(row, col)</span>:</span></div><div class="line">　　<span class="keyword">return</span> [[]] <span class="keyword">if</span> col == <span class="number">0</span> \</div><div class="line">　　　<span class="keyword">else</span> [[ran] + rst \  <span class="comment"># 在 Python 中，g(x,y)=[x]+y </span></div><div class="line">　　　<span class="keyword">for</span> ran <span class="keyword">in</span> range(row) \</div><div class="line">　　　<span class="keyword">for</span> rst <span class="keyword">in</span> queens(row, col - <span class="number">1</span>) \</div><div class="line">　　　<span class="keyword">if</span> safe(ran, rst)]</div></pre></td></tr></table></figure><p>不难看出，有了列表领悟这个强大的武器，我们就可以放心大胆地利用描述一个元素形式的思路来解决这类列表输出的问题。这就是列表领悟最根本的思想：“形式化的思维方式”。 </p><p>现在只剩一个问题了：safe() 函数。先应用一次我们的“图形化的思考”。对一个格局（解，rst）来说，新加入的棋子的 col 值 ran 必须对这个格局中所有已存在的位置满足一个测试 check()，这个测试对于一个位置 (x,y)，要求（col 值不等已自动满足） ran ≠ x and |ran - x| ≠ y + 1。</p><p>an ≠ x 很好理解，就是不为同一列；|ran - x| ≠ y + 1 则意味着左右不在同一斜线上。</p><p>由于这里要同时用到 rst 中点的 col 值和 row 值，这样解决：在前文的算法描述中已经指出，因为 row 值被认为是有序的，事实上是一个解的下标，我们 check 一下这个下标，在 check() 的过程中去获取 col 值不就行了？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">check</span> <span class="params">(pos)</span>:</span></div><div class="line">　　　　<span class="comment"># 表达式变个形式，少打点字</span></div><div class="line">　　　　<span class="keyword">return</span> <span class="keyword">not</span> (ran == rst[pos] <span class="keyword">or</span> abs(ran - rst[pos]) == pos + <span class="number">1</span>)</div></pre></td></tr></table></figure><p>值得注意的是，由于这里 check() 用到了逃逸变量 ran 和 rst，check 函数体就必须写在 safe() 函数体内部以使这它们在其闭包环境中出现。</p><p>safe() 函数也就很明了了：先生成一个由全部 check(pos), pos ∈ [0, #rst] 结果组成的列表，然后判断一下这个列表中每一项是否都为真。假设我们已得到这样的一种测试一个列表中元素是否全为 True 的函数叫 ands()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe</span> <span class="params">(ran, rst)</span>:</span></div><div class="line">　　<span class="function"><span class="keyword">def</span> <span class="title">check</span> <span class="params">(pos)</span>:</span></div><div class="line">　　　　<span class="keyword">return</span> <span class="keyword">not</span> (ran == rst[pos] <span class="keyword">or</span> abs(ran - rst[pos]) == pos + <span class="number">1</span>)</div><div class="line">　　<span class="keyword">return</span> ands([check(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> range(len(rst))])</div></pre></td></tr></table></figure><p>前文已经说明，ands() 函数接受一个列表为参数，如果列表中每一项都为 True 则返回 True，否则返回 False。还是直接把数学定义抄一遍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ands</span> <span class="params">(ls)</span>:</span></div><div class="line">　　<span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> ls == [] \</div><div class="line">　　　<span class="keyword">else</span> (<span class="keyword">False</span> <span class="keyword">if</span> <span class="keyword">not</span> ls[<span class="number">0</span>] \</div><div class="line">　　　<span class="keyword">else</span> ands(ls[<span class="number">1</span>:]))</div></pre></td></tr></table></figure><p>于是，我们的程序就写完啦！试着跑一下 queens(4,4)，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>queens(<span class="number">4</span>,<span class="number">4</span>)</div><div class="line">[[<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>]]</div></pre></td></tr></table></figure><p>没问题！再跑一下 queens(8,8)！奇怪，为什么跑了 10 分钟还没出结果？</p><p>问题在哪儿： </p><p>拙劣的列表领悟实现。Python 在处理列表领悟时，一方面把“形式”部分封装为一个函数，然后找出所有未知数的列表，组装成一个大的矩阵，然后对矩阵中的每一项应用该函数。问题出在哪儿？先生成了所有项，占用了过多的空间。如果在 Haskell 里面，这样做是无所谓的，因为惰性的列表会生成一点，计算一点，抛弃一点，输出一点；但这对于严格（采用应用序求值）的命令式语言 Python 来说，这种实现仅仅是玩具级的。 </p><p>其实，列表领悟不仅仅是一个语法糖，在严格的语言实现它需要一定技巧：首先分析未知数对于的列表的计算所消耗时间（数据流分析 call 的次数），把计算耗时最多的列表应用群体操作，对结果的每一项应用产生下一个列表的群体操作，依此类推，只要产生一个包含所有未知数的序对就应用包装好的函数。空泛的讲这些用处不大，下面我们手工把这个该死的程序救活。</p><p>通用列表操作：<br>　　关键在于处理掉这一句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[ran] + rst \</div><div class="line">　　　<span class="keyword">for</span> ran <span class="keyword">in</span> range(row) \</div><div class="line">　　　<span class="keyword">for</span> rst <span class="keyword">in</span> queens(row, col - <span class="number">1</span>) \</div><div class="line">　　　<span class="keyword">if</span> safe(ran, rst)]</div></pre></td></tr></table></figure><p>首先对最耗时的列表 queens(row, col - 1) 应用群体操作 flatmap(newcol, queens(row, col - 1))。这里需要注意的是，光用 map() 是不够的，因为下面会根据另一个列表 rang(row) 中的每一项产生一个新列表，导致多出一个列表层。所以我们需要用 flatmap() 函数，它在普通的 map() 操作之后会用 append() 把产生的列表联结起来（所以叫“展平”的 map），把多出的一层列表消去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatmap</span> <span class="params">(opt, ls)</span>:</span></div><div class="line">　　<span class="comment"># 小技巧：累积器在连接列表时可以不用 lambda x,y: x+y，直接用 list.__add__，</span></div><div class="line">　　<span class="comment"># 重点是类型出错时有报警</span></div><div class="line">　　<span class="keyword">return</span> reduce(list.__add__, map(opt, ls))</div></pre></td></tr></table></figure><p>接下来，根据列表和列表生成列表（在通用列表操作的世界中，就是 list, list, and list），注意原来的形式 [ran] + rst 是怎么被函数封装掉的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">newcol</span> <span class="params">(rst)</span>:</span></div><div class="line">　　<span class="comment"># 顺手解决 filter 只能传递一个参数的限制，用 lambda 代掉</span></div><div class="line">　　<span class="keyword">return</span> filter(<span class="keyword">lambda</span> ls: safe(ls[<span class="number">0</span>], rst), map(<span class="keyword">lambda</span> x: [x] + rst, range(row)))</div></pre></td></tr></table></figure><p>其它什么内容都不用改了（当然了，如果你有心情，还可以把另一个列表领悟替换掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe</span> <span class="params">(ran, rst)</span>:</span></div><div class="line">　　<span class="keyword">return</span> every(check, range(len(rst)))</div><div class="line"><span class="comment"># every() 函数相当于打过兴奋剂的 ands</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">every</span> <span class="params">(test, ls)</span>:</span></div><div class="line">　　<span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> ls == [] \</div><div class="line">　　　<span class="keyword">else</span> (<span class="keyword">False</span> <span class="keyword">if</span> <span class="keyword">not</span> test(ls[<span class="number">0</span>]) \</div><div class="line">　　　<span class="keyword">else</span> every(test, ls[<span class="number">1</span>:]))</div></pre></td></tr></table></figure><p>不过单层的列表领悟没有性能问题）。现在可以完美地输出八皇后问题的 92 个解了（这里就不列了，太长了）。</p><p>反思： </p><ul><li>函数式编程的思想描述算法绝对强，无论是列表领悟还是通用列表操作都十分清晰，仿佛能感受到数据在表达式间游动；</li><li>和平起见，就不把我那个传说中的只有一行代码的版本拿来和几十行的命令式风格的代码比较了，但大家应该心领神会；</li><li>有时候，把问题想的简单一些，思维更“形而上学”一些，反而能更快的得到解决问题的思路，顺着思路再改进也不迟；</li><li>Python 的表达式版的分支语句很漂亮，但被该死的换行限制给玷污了；另外列表领悟实现得够烂，眼下只能是玩玩儿。</li></ul><p>最后留个小问题：我们在算法描述一节中提到了一种解的表示方法，把一个格局中所有棋子的坐标表示为序对，然后返回解的列表。请给出一个小函数，把我们现在的实现版本输出的解转换为这种形式。数据的本质是信息。信息的完全是首要的，数据的表示只是个次要问题。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">BOARD_SIZE = <span class="number">8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">under_attack</span><span class="params">(col, queens)</span>:</span></div><div class="line">    left = right = col</div><div class="line"></div><div class="line">    <span class="keyword">for</span> r, c <span class="keyword">in</span> reversed(queens):</div><div class="line">        left, right = left - <span class="number">1</span>, right + <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> (left, col, right):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> [[]]</div><div class="line"></div><div class="line">    smaller_solutions = solve(n - <span class="number">1</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [solution+[(n,i+<span class="number">1</span>)]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(BOARD_SIZE)</div><div class="line">            <span class="keyword">for</span> solution <span class="keyword">in</span> smaller_solutions</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> under_attack(i+<span class="number">1</span>, solution)]</div><div class="line"></div><div class="line"><span class="keyword">for</span> answer <span class="keyword">in</span> solve(BOARD_SIZE):</div><div class="line">    <span class="keyword">print</span> answer</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations <span class="keyword">as</span> perm</div><div class="line"></div><div class="line">cols = perm(range(<span class="number">1</span>, <span class="number">9</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">OK</span><span class="params">(s)</span>:</span></div><div class="line">    sl = set(r - c <span class="keyword">for</span> r, c <span class="keyword">in</span> enumerate(s))  <span class="comment"># r for row</span></div><div class="line">    bs = set(r + c <span class="keyword">for</span> r, c <span class="keyword">in</span> enumerate(s))  <span class="comment"># c for column</span></div><div class="line">    <span class="keyword">return</span> len(sl) == len(bs) == <span class="number">8</span></div><div class="line"></div><div class="line">solutions = [c <span class="keyword">for</span> c <span class="keyword">in</span> cols <span class="keyword">if</span> OK(c)]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(solutions, <span class="number">1</span>):</div><div class="line">    <span class="keyword">print</span> i, <span class="string">":"</span>, s</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> FP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>String Hash 字符串散列</title>
      <link href="/2014/01/01/string-hash-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%A3%E5%88%97/"/>
      <url>/2014/01/01/string-hash-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%A3%E5%88%97/</url>
      <content type="html"><![CDATA[<p>参考</p><p><a href="http://www.partow.net/programming/hashfunctions/index.html" target="_blank" rel="external">http://www.partow.net/programming/hashfunctions/index.html</a></p><p>有人翻译了一下</p><p><a href="http://blog.csdn.net/eaglex/article/details/6310727" target="_blank" rel="external">http://blog.csdn.net/eaglex/article/details/6310727</a><br><a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">RSHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> b    = <span class="number">378551</span>;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> a    = <span class="number">63689</span>;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash = hash * a + str[i];</div><div class="line">      a    = a * b;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of RS Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">JSHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">1315423911</span>;</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash ^= ((hash &lt;&lt; <span class="number">5</span>) + str[i] + (hash &gt;&gt; <span class="number">2</span>));</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of JS Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">PJWHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> BitsInUnsignedInt = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span>) * <span class="number">8</span>);</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> ThreeQuarters     = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((BitsInUnsignedInt  * <span class="number">3</span>) / <span class="number">4</span>);</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> OneEighth         = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(BitsInUnsignedInt / <span class="number">8</span>);</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> HighBits          = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="number">0xFFFFFFFF</span>) &lt;&lt; (BitsInUnsignedInt - OneEighth);</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash              = <span class="number">0</span>;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> test              = <span class="number">0</span>;</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash = (hash &lt;&lt; OneEighth) + str[i];</div><div class="line"></div><div class="line">      <span class="keyword">if</span>((test = hash &amp; HighBits)  != <span class="number">0</span>)</div><div class="line">      &#123;</div><div class="line">         hash = (( hash ^ (test &gt;&gt; ThreeQuarters)) &amp; (~HighBits));</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of  P. J. Weinberger Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ELFHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> x    = <span class="number">0</span>;</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash = (hash &lt;&lt; <span class="number">4</span>) + str[i];</div><div class="line">      <span class="keyword">if</span>((x = hash &amp; <span class="number">0xF0000000</span>L) != <span class="number">0</span>)</div><div class="line">      &#123;</div><div class="line">         hash ^= (x &gt;&gt; <span class="number">24</span>);</div><div class="line">      &#125;</div><div class="line">      hash &amp;= ~x;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of ELF Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">BKDRHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> seed = <span class="number">131</span>; <span class="comment">// 31 131 1313 13131 131313 etc..</span></div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash = (hash * seed) + str[i];</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of BKDR Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">SDBMHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash = str[i] + (hash &lt;&lt; <span class="number">6</span>) + (hash &lt;&lt; <span class="number">16</span>) - hash;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of SDBM Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">DJBHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">5381</span>;</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + str[i];</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of DJB Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">DEKHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;(str.length());</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash = ((hash &lt;&lt; <span class="number">5</span>) ^ (hash &gt;&gt; <span class="number">27</span>)) ^ str[i];</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of DEK Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">BPHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash = hash &lt;&lt; <span class="number">7</span> ^ str[i];</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of BP Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FNVHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> fnv_prime = <span class="number">0x811C9DC5</span>;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash *= fnv_prime;</div><div class="line">      hash ^= str[i];</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of FNV Hash Function */</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">APHash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; str)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0xAAAAAAAA</span>;</div><div class="line"></div><div class="line">   <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</div><div class="line">   &#123;</div><div class="line">      hash ^= ((i &amp; <span class="number">1</span>) == <span class="number">0</span>) ? (  (hash &lt;&lt;  <span class="number">7</span>) ^ str[i] * (hash &gt;&gt; <span class="number">3</span>)) :</div><div class="line">                               (~((hash &lt;&lt; <span class="number">11</span>) + (str[i] ^ (hash &gt;&gt; <span class="number">5</span>))));</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* End Of AP Hash Function */</span></div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MinMaxHeap 最小最大堆</title>
      <link href="/2013/12/23/minmaxheap-%E6%9C%80%E5%B0%8F%E6%9C%80%E5%A4%A7%E5%A0%86/"/>
      <url>/2013/12/23/minmaxheap-%E6%9C%80%E5%B0%8F%E6%9C%80%E5%A4%A7%E5%A0%86/</url>
      <content type="html"><![CDATA[<p>MinMaxHeap，最小最大堆，或称双端优先队列，提供操作</p><ul><li>插入一个数</li><li>取出最小值</li><li>取出最大值<a id="more"></a></li></ul><p>最小最大堆是一棵完全二叉树，且其中每个元素有一个key数据成员。树的各层交替为最小层和最大层。根结点在最小层。设x是最小最大堆的任意结点。若x在最小（最大）层上，则x中的元素的key值在以x为根的子树的所有元素中是最小（最大）的。位于最小（最大）层的结点称为最小（最大）结点。</p><p>1）插入</p><p>和普通的堆一样，先放到堆尾再调整。调整的过程，以插入元素在小根层为例：先和父亲比较，如果大于父亲则和父亲对调，以后在只在大根层作大顶堆调整；否则在小根层作小顶堆调整。</p><p>2）取出最小的数</p><p>也和普通堆相似，取堆头元素并把队尾元素放在堆头再调整堆。以堆头即第一层为小层为例：先和儿子比较（如果有儿子），如果比儿子大（儿子层是大层），和该儿子交换。</p><p>然后，如果有孙子，则在孙子层（小层）4个元素中找出最小的，与之交换，则在该孙子位置的情况和调整开始时堆头的情况是一样的，所以在该位置继续上面的调整过程。</p><p>3）取出最大的数</p><p>以第一层为小层为例：比较堆头的两个儿子谁大，取出作为最大的数，把堆尾元素填到该位置，在该位置开始调整。调整的过程和取出最小数的调整过程是一致的，大小相反。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> MinMaxHeap</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    MinMaxHeap(<span class="keyword">int</span> sz)</div><div class="line">    &#123;</div><div class="line">        n = <span class="number">0</span>;</div><div class="line">        maxSize = sz;</div><div class="line">        <span class="number">_</span>heap = <span class="keyword">new</span> T[sz + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span></span>;</div><div class="line">    <span class="function">T <span class="title">popMin</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">T <span class="title">popMax</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printRaw</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">_</span>heap[i] &lt;&lt; <span class="string">" "</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">level</span><span class="params">(<span class="keyword">int</span> p)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ((<span class="keyword">int</span>)(<span class="built_in">log</span>(p * <span class="number">1.0</span>) / <span class="built_in">log</span>(<span class="number">2.0</span>)) % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> MAX;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> MIN;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">VerifyMax</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> T &amp;)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">VerifyMin</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> T &amp;)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MinChildGrandChild</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MaxChildGrandChild</span><span class="params">(<span class="keyword">int</span> pos)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    T *<span class="number">_</span>heap;</div><div class="line">    <span class="keyword">int</span> maxSize, n;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MIN = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span> MinMaxHeap&lt;T&gt;::push(<span class="keyword">const</span> T &amp;x )</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (n == maxSize )</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//MinMaxFull( );</span></div><div class="line">        <span class="keyword">throw</span>;</div><div class="line">    &#125;</div><div class="line">    n++;</div><div class="line">    <span class="keyword">int</span> p = n / <span class="number">2</span>;     <span class="comment">//p is new node's parent</span></div><div class="line">    <span class="keyword">if</span> (!p)</div><div class="line">    &#123;</div><div class="line">        <span class="number">_</span>heap[<span class="number">1</span>] = x;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">switch</span> (level(p))</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> MIN:</div><div class="line">        <span class="keyword">if</span> (x &lt; <span class="number">_</span>heap[p])             <span class="comment">// 沿着最小层检查</span></div><div class="line">        &#123;</div><div class="line">            <span class="number">_</span>heap[n] = <span class="number">_</span>heap[p];</div><div class="line">            VerifyMin(p, x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> VerifyMax(n, x);            <span class="comment">// 沿着最大层检查</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> MAX:</div><div class="line">        <span class="keyword">if</span> (x &gt; <span class="number">_</span>heap[p])             <span class="comment">// 沿着最大层检查</span></div><div class="line">        &#123;</div><div class="line">            <span class="number">_</span>heap[n] = <span class="number">_</span>heap[p];</div><div class="line">            VerifyMax(p, x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> VerifyMin(n, x);             <span class="comment">// 沿着最小层检查</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;                           <span class="comment">//switch结束</span></div><div class="line">&#125;              <span class="comment">// Insert结束</span></div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span> MinMaxHeap&lt;T&gt;::VerifyMax(<span class="keyword">int</span> i, <span class="keyword">const</span> T &amp;x )</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 沿着从最大结点i</span></div><div class="line">    <span class="comment">// 到根结点的路径检查最大结点，将x插入正确位置</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gp = i / <span class="number">4</span>; gp &amp;&amp; (x &gt; <span class="number">_</span>heap[gp]); gp /= <span class="number">4</span>)   <span class="comment">// gp是 i的祖父</span></div><div class="line">    &#123;</div><div class="line">        <span class="number">_</span>heap[i] = <span class="number">_</span>heap[gp];             <span class="comment">// 将_heap[gp]移到_heap[i]</span></div><div class="line">        i = gp;</div><div class="line">    &#125;</div><div class="line">    <span class="number">_</span>heap[i] = x;         <span class="comment">// 将x插入结点i</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span> MinMaxHeap&lt;T&gt;::VerifyMin(<span class="keyword">int</span> i, <span class="keyword">const</span> T &amp;x )</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 沿着从最小结点i</span></div><div class="line">    <span class="comment">// 到根结点的路径检查最小结点，将x插入正确位置</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gp = i / <span class="number">4</span>; gp &amp;&amp; (x &lt; <span class="number">_</span>heap[gp]); gp /= <span class="number">4</span>)   <span class="comment">// gp是 i的祖父</span></div><div class="line">    &#123;</div><div class="line">        <span class="number">_</span>heap[i] = <span class="number">_</span>heap[gp];             <span class="comment">// 将_heap[gp]移到_heap[i]</span></div><div class="line">        i = gp;</div><div class="line">    &#125;</div><div class="line">    <span class="number">_</span>heap[i] = x;         <span class="comment">// 将x插入结点i</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> Type&gt;</div><div class="line"><span class="keyword">int</span> MinMaxHeap&lt;Type&gt;::MinChildGrandChild(<span class="keyword">int</span> i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> temp[<span class="number">6</span>] = &#123;<span class="number">2</span>*i, <span class="number">2</span>*i+<span class="number">1</span>, <span class="number">2</span>*i*<span class="number">2</span>, <span class="number">2</span>*i*<span class="number">2</span>+<span class="number">1</span>, (<span class="number">2</span>*i+<span class="number">1</span>)*<span class="number">2</span>, (<span class="number">2</span>*i+<span class="number">1</span>)*<span class="number">2</span>+<span class="number">1</span> &#125;;</div><div class="line"><span class="keyword">if</span> (<span class="number">2</span> * i &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> minVal = <span class="number">_</span>heap[<span class="number">2</span> * i];</div><div class="line"><span class="keyword">int</span> minIndex = <span class="number">2</span> * i;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">6</span>; j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(temp[j] &lt;= n)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">_</span>heap[temp[j]] &lt; minVal)</div><div class="line">&#123;</div><div class="line">minVal = <span class="number">_</span>heap[temp[j]];</div><div class="line">minIndex = temp[j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> minIndex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line">T MinMaxHeap&lt;T&gt;::popMin()   <span class="comment">// 从最小最大堆中删除并返回最小元素</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!n)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//MinMaxEmpty( );</span></div><div class="line">        <span class="keyword">throw</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="number">_</span>heap[<span class="number">0</span>] = INT_MAX;</div><div class="line">    T y = <span class="number">_</span>heap[<span class="number">1</span>];            <span class="comment">// 保存根元素</span></div><div class="line">    T x = <span class="number">_</span>heap[n--];</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = n / <span class="number">2</span>;            <span class="comment">// 为重新插入x作初始化，寻找插入x的位置</span></div><div class="line">    <span class="keyword">while</span> (i &lt;= j)   <span class="comment">// i 有子女，情况(2)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k = MinChildGrandChild(i);</div><div class="line">        <span class="keyword">if</span> (x &lt;= <span class="number">_</span>heap[k])</div><div class="line">            <span class="keyword">break</span>;          <span class="comment">// 情况 2(a)，可将x 插入_heap[i]</span></div><div class="line">        <span class="keyword">else</span>   <span class="comment">//情况2(b)或 (c)</span></div><div class="line">        &#123;</div><div class="line">            <span class="number">_</span>heap[i] = <span class="number">_</span>heap[k];</div><div class="line">            <span class="keyword">if</span> (k &lt;= <span class="number">2</span> * i + <span class="number">1</span>) <span class="comment">// k 是i的子女，情况2(b)</span></div><div class="line">            &#123;</div><div class="line">                i = k;                           <span class="comment">// 可将x插入_heap[k]</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>              <span class="comment">// k是i的孙子女，情况2(c)</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> p = k / <span class="number">2</span>;            <span class="comment">// p是k的双亲</span></div><div class="line">                <span class="keyword">if</span> (x &gt; <span class="number">_</span>heap[p])</div><div class="line">                &#123;</div><div class="line">                    T t = <span class="number">_</span>heap[p]; <span class="number">_</span>heap[p] = x; x = t;</div><div class="line">                &#125;</div><div class="line">            &#125;     <span class="comment">// if (k&lt;=2*i+1)结束</span></div><div class="line">            i = k;</div><div class="line">        &#125;        <span class="comment">//if (x.key&lt;=_heap[k].key)结束</span></div><div class="line">    &#125;              <span class="comment">// while结束</span></div><div class="line">    <span class="number">_</span>heap[i] = x;  <span class="comment">// 注意，即使现在n == 0，对_heap[1] 赋值也没错，这样简化边界判断</span></div><div class="line">    <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">int</span> MinMaxHeap&lt;T&gt;::MaxChildGrandChild(<span class="keyword">int</span> i)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> temp[<span class="number">6</span>] = &#123;<span class="number">2</span>*i, <span class="number">2</span>*i+<span class="number">1</span>, <span class="number">2</span>*i*<span class="number">2</span>, <span class="number">2</span>*i*<span class="number">2</span>+<span class="number">1</span>, (<span class="number">2</span>*i+<span class="number">1</span>)*<span class="number">2</span>, (<span class="number">2</span>*i+<span class="number">1</span>)*<span class="number">2</span>+<span class="number">1</span> &#125;;</div><div class="line"><span class="keyword">if</span> (<span class="number">2</span> * i &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> maxVal = <span class="number">_</span>heap[<span class="number">2</span> * i];</div><div class="line"><span class="keyword">int</span> maxIndex = <span class="number">2</span> * i;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">6</span>; j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(temp[j] &lt;= n)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (<span class="number">_</span>heap[temp[j]] &gt; maxVal)</div><div class="line">&#123;</div><div class="line">maxVal = <span class="number">_</span>heap[temp[j]];</div><div class="line">maxIndex = temp[j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> maxIndex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line">T MinMaxHeap&lt;T&gt;::popMax()   <span class="comment">// 从最小最大堆中删除并返回最大元素</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!n)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//MinMaxEmpty( );</span></div><div class="line">        <span class="keyword">throw</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123; n--; <span class="keyword">return</span> <span class="number">_</span>heap[<span class="number">1</span>]; &#125;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123; n--; <span class="keyword">return</span> <span class="number">_</span>heap[<span class="number">2</span>]; &#125;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">_</span>heap[<span class="number">2</span>] &gt; <span class="number">_</span>heap[<span class="number">3</span>] ? <span class="number">2</span> : <span class="number">3</span>;</div><div class="line">    T y = <span class="number">_</span>heap[i];            <span class="comment">// 保存根元素</span></div><div class="line">    T x = <span class="number">_</span>heap[n--];</div><div class="line">    <span class="keyword">int</span> j = n / <span class="number">2</span>;            <span class="comment">// 为重新插入x作初始化，寻找插入x的位置</span></div><div class="line">    <span class="number">_</span>heap[<span class="number">0</span>] = INT_MIN;</div><div class="line">    <span class="keyword">while</span> (i &lt;= j)   <span class="comment">// i 有子女，情况(2)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k = MaxChildGrandChild(i);</div><div class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">_</span>heap[k])</div><div class="line">            <span class="keyword">break</span>;          <span class="comment">// 情况 2(a)，可将x 插入_heap[i]</span></div><div class="line">        <span class="keyword">else</span>   <span class="comment">//情况2(b)或 (c)</span></div><div class="line">        &#123;</div><div class="line">            <span class="number">_</span>heap[i] = <span class="number">_</span>heap[k];</div><div class="line">            <span class="keyword">if</span> (k &lt;= <span class="number">2</span> * i + <span class="number">1</span>) <span class="comment">// k 是i的子女，情况2(b)</span></div><div class="line">            &#123;</div><div class="line">                i = k;                           <span class="comment">// 可将x插入_heap[k]</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>              <span class="comment">// k是i的孙子女，情况2(c)</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">int</span> p = k / <span class="number">2</span>;            <span class="comment">// p是k的双亲</span></div><div class="line">                <span class="keyword">if</span> (x &lt; <span class="number">_</span>heap[p])</div><div class="line">                &#123;</div><div class="line">                    T t = <span class="number">_</span>heap[p]; <span class="number">_</span>heap[p] = x; x = t;</div><div class="line">                &#125;</div><div class="line">            &#125;     <span class="comment">// if (k&lt;=2*i+1)结束</span></div><div class="line">            i = k;</div><div class="line">        &#125;        <span class="comment">//if (x.key&lt;=_heap[k].key)结束</span></div><div class="line">    &#125;              <span class="comment">// while结束</span></div><div class="line">    <span class="number">_</span>heap[i] = x;  <span class="comment">// 注意，即使现在n == 0，对_heap[1] 赋值也没错，这样简化边界判断</span></div><div class="line">    <span class="keyword">return</span> y;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考</p><p><a href="http://arxiv.org/ftp/cs/papers/0007/0007043.pdf" target="_blank" rel="external">http://arxiv.org/ftp/cs/papers/0007/0007043.pdf</a></p><p><a href="http://www.cs.otago.ac.nz/staffpriv/mike/Papers/MinMaxHeaps/MinMaxHeaps.pdf" target="_blank" rel="external">http://www.cs.otago.ac.nz/staffpriv/mike/Papers/MinMaxHeaps/MinMaxHeaps.pdf</a></p><p><a href="https://github.com/brownhead/minmaxheap-cpp" target="_blank" rel="external">https://github.com/brownhead/minmaxheap-cpp</a></p>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：线段树</title>
      <link href="/2013/12/20/%E7%AE%97%E6%B3%95%EF%BC%9A%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2013/12/20/%E7%AE%97%E6%B3%95%EF%BC%9A%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>线段树 Interval Tree，又称区间树 Segment Tree，其中每一个非叶子节点[a,b]，它的左儿子表示的区间为[a,(a+b)/2]，右儿子表示的区间为[(a+b)/2+1,b]。因此线段树是平衡二叉树，最后的子节点数目为N，即整个线段区间的长度。，因而常用于解决数列维护问题，它基本能保证每个操作的复杂度为O(lgN)。<a id="more"></a></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>每个区间的长度是区间内整数的个数</li><li>叶子节点长度为1，不能再往下分</li><li>若一个节点对应的区间是[a,b],则其子节点对应的区间分别是[a,(a+b)/2]和[ (a+b)/2+1,b]</li><li>线段树的平分构造，实际上是用了二分的方法。线段树是平衡树，它的深度为log2(b-a+1)</li><li>线段树把区间上的任意一条线段都分成不超过2logL条线段</li></ul><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>可以用二叉树结构，也可以用数组（数组的大小是长度的4倍）</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>用线段树解题，关键是要想清楚每个节点要存哪些信息（当然区间起终点，以及左右子节点指针是必须的），以及这些信息如何高效更新，维护，查询。不要一更新就更新到叶子节点，那样更新效率最坏就可能变成O(n)的了。</p><p>增加延迟标记，每个结点新增加一个标记，记录这个结点是否被进行了某种修改操作(这种修改操作会影响其子结点)。对于任意区间的修改，我们先按照查询的方式将其划分成线段树中的结点，然后修改这些结点的信息，并给这些结点标上代表这种修改操作的标记。在修改和查询的时候，如果我们到了一个结点p，并且决定考虑其子结点，那么我们就要看看结点p有没有标记，如果有，就要按照标记修改其子结点的信息，并且给子结点都标上相同的标记，同时消掉p的标记。</p><p>例题1：POJ 3264 Balanced Lineup 给定Q (1 ≤ Q ≤ 200,000)个数A1,A2 … AQ,多次求任一区间Ai – Aj中最大数和最小数的差。(此题可以用动态规划RMQ法做，更加快速)</p><p>例题2：POJ 3468 A Simple Problem with Integers 给定Q (1 ≤ Q ≤ 100,000)个数A1,A2 … AQ,以及可能多次进行的两个操作:1) 对某个区间Ai … Aj的个数都加n(n可变）2)  求某个区间Ai … Aj的数的和</p><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p>有时，区间的端点不是整数，或者区间太大导致建树内存开销过大MLE ,那么就需要进行“离散化”后再建树。</p><p>POJ 2528 Mayor’s posters 给定一些海报，可能互相重叠，告诉你每个海报宽度（高度都一样）和先后叠放次序，问没有被完全盖住的海报有多少张。</p><p>POJ 1151 Atlantis 给定一些矩形，其顶点坐标是浮点数，可能互相重叠，问这些矩形覆盖到的面积是多大。</p><h2 id="优化-ZKW"><a href="#优化-ZKW" class="headerlink" title="优化 ZKW"></a>优化 ZKW</h2><p>清华张昆玮，自底向上，非递归</p><p>参考:</p><p><a href="http://dongxicheng.org/structure/segment-tree/" target="_blank" rel="external">http://dongxicheng.org/structure/segment-tree/</a></p><p><a href="http://poj.org/summerschool/1_interval_tree.pdf" target="_blank" rel="external">http://poj.org/summerschool/1_interval_tree.pdf</a></p><p><a href="http://blog.csdn.net/metalseed/article/details/8039326" target="_blank" rel="external">http://blog.csdn.net/metalseed/article/details/8039326</a></p>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>poj 2388 寻找中位数</title>
      <link href="/2013/12/20/poj-2388-%E5%AF%BB%E6%89%BE%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
      <url>/2013/12/20/poj-2388-%E5%AF%BB%E6%89%BE%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>这也是Google面试题</p><p>股市上一个股票的价格从开市开始是不停的变化的，需要开发一个系统，给定一个股票，它能实时显示从开市到当前时间的这个股票的价格的中位数（中值）。</p><p>用双堆存储，一个大根堆，一个小根堆，则Inert为O(logn)，Median为O(1)<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindMedian</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PriorityQueue&lt;Integer&gt; maxHeap, minHeap;</div><div class="line"></div><div class="line">    FindMedian(<span class="keyword">int</span> n) &#123;</div><div class="line">        Comparator&lt;Integer&gt; revCmp = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer left, Integer right)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> right.compareTo(left);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">// Or you can use Collections' reverseOrder method as follows.</span></div><div class="line">        <span class="comment">// Comparator&lt;Integer&gt; revCmp = Collections.reverseOrder();</span></div><div class="line">        maxHeap = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(n, revCmp);</div><div class="line">        minHeap = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(n);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNewNumber</span><span class="params">(<span class="keyword">int</span> randomNumber)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (maxHeap.size() == minHeap.size()) &#123;</div><div class="line">            <span class="keyword">if</span> ((minHeap.peek() != <span class="keyword">null</span>) &amp;&amp; randomNumber &gt; minHeap.peek()) &#123;</div><div class="line">                maxHeap.offer(minHeap.poll());</div><div class="line">                minHeap.offer(randomNumber);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                maxHeap.offer(randomNumber);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;  <span class="comment">// trick</span></div><div class="line">            <span class="keyword">if</span>(randomNumber &lt; maxHeap.peek()) &#123;</div><div class="line">                minHeap.offer(maxHeap.poll());</div><div class="line">                maxHeap.offer(randomNumber);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                minHeap.offer(randomNumber);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMedian</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (maxHeap.isEmpty()) <span class="keyword">return</span> minHeap.peek();</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (minHeap.isEmpty()) <span class="keyword">return</span> maxHeap.peek();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (maxHeap.size() == minHeap.size()) &#123;</div><div class="line">            <span class="keyword">return</span> (minHeap.peek() + maxHeap.peek()) / <span class="number">2</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxHeap.size() &gt; minHeap.size()) &#123;</div><div class="line">            <span class="keyword">return</span> maxHeap.peek();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> minHeap.peek();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> n = in.nextInt();</div><div class="line">        FindMedian fm = <span class="keyword">new</span> FindMedian(n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> num = in.nextInt();</div><div class="line">            fm.addNewNumber(num);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(fm.getMedian());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>poj 3164 最小树形图 朱刘算法</title>
      <link href="/2013/12/20/poj-3164-%E6%9C%80%E5%B0%8F%E6%A0%91%E5%BD%A2%E5%9B%BE-%E6%9C%B1%E5%88%98%E7%AE%97%E6%B3%95/"/>
      <url>/2013/12/20/poj-3164-%E6%9C%80%E5%B0%8F%E6%A0%91%E5%BD%A2%E5%9B%BE-%E6%9C%B1%E5%88%98%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最小树形图，就是给有向带权图中指定一个特殊的点root，求一棵以root为根的有向生成树T，并且T中所有边的总权值最小。最小树形图的第一个算法是 1965年朱永津和刘振宏提出的复杂度为O(VE)的算法。<a id="more"></a></p><p>(无向图的最小生成树即最小树形图，可用Prim’s Algorithm、Kruskal’s Algorithm等算法求。)</p><p>判断是否存在树形图的方法很简单，只需要以v为根作一次图的遍历就可以了。</p><p>步骤：</p><ol><li><p>除根外每个点选最小入边（贪心）</p></li><li><p>检查环，每个点留一条入边，那么此时图中就有n-1条边，如果有环必定有点之间没有被连接。如果没有环同时每个结点（除根外）都有前驱，算法结束。</p></li><li><p>缩环成点，所有环上的所有的点（注意这些点每次循环都会被更新，是动态的），除了它的最小入边，其他的入边的权值都减去最小入边的权值，然后箭头指向“新”的点（也就是这个环）。</p></li></ol><p>对于无固定根最小树形图，只要虚拟一个根连接所有点，权为边权总和+1,最后的结果减去（边权+1）即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> VN=<span class="number">110</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">99999999</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> <span class="built_in">map</span>[VN][VN];</div><div class="line"><span class="keyword">int</span> n,m,vis[VN],pt[VN][<span class="number">2</span>],pre[VN];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cal</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(pt[i][<span class="number">0</span>]-pt[j][<span class="number">0</span>],<span class="number">2.0</span>)+<span class="built_in">pow</span>(pt[i][<span class="number">1</span>]-pt[j][<span class="number">1</span>],<span class="number">2.0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    vis[u]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">if</span>(!vis[i] &amp;&amp; <span class="built_in">map</span>[u][i]!=INF)</div><div class="line">            DFS(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Connected</span><span class="params">()</span></span>&#123;   <span class="comment">//判断是否连通，如果连通一定存在最小树形图。 </span></div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">if</span>(!vis[i])</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">ZLEmonds</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j,k;</div><div class="line">    <span class="keyword">bool</span> circle[VN];</div><div class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(circle,<span class="number">0</span>,<span class="keyword">sizeof</span>(circle));</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;  <span class="comment">//找出最短弧集合E0 </span></div><div class="line">            <span class="keyword">if</span>(circle[i])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            pre[i]=i;</div><div class="line">            <span class="built_in">map</span>[i][i]=INF;</div><div class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(circle[j])</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[j][i]&lt;<span class="built_in">map</span>[pre[i]][i])</div><div class="line">                    pre[i]=j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(circle[i])</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            j=i;</div><div class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">            <span class="keyword">while</span>(!vis[j] &amp;&amp; j!=<span class="number">1</span>)&#123;</div><div class="line">                vis[j]=<span class="number">1</span>;</div><div class="line">                j=pre[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(j==<span class="number">1</span>)    <span class="comment">//检查是否有环，能找到根节点说明没环 </span></div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            i=j;</div><div class="line">            ans+=<span class="built_in">map</span>[pre[i]][i];</div><div class="line">            <span class="keyword">for</span>(j=pre[i];j!=i;j=pre[j])&#123;    <span class="comment">//i不用标记，用作后面缩点用  </span></div><div class="line">                ans+=<span class="built_in">map</span>[pre[j]][j];</div><div class="line">                circle[j]=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(circle[j])</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[j][i]!=INF)</div><div class="line">                    <span class="built_in">map</span>[j][i]-=<span class="built_in">map</span>[pre[i]][i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(j=pre[i];j!=i;j=pre[j]) <span class="comment">//将环中所有的点成点i，改变边 </span></div><div class="line">                <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)&#123;</div><div class="line">                    <span class="keyword">if</span>(circle[k])</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    <span class="built_in">map</span>[i][k]=min(<span class="built_in">map</span>[i][k],<span class="built_in">map</span>[j][k]);</div><div class="line">                    <span class="keyword">if</span>(<span class="built_in">map</span>[k][j]!=INF)</div><div class="line">                        <span class="built_in">map</span>[k][i]=min(<span class="built_in">map</span>[k][i],<span class="built_in">map</span>[k][j]-<span class="built_in">map</span>[pre[j]][j]);</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(i&gt;n)&#123;    <span class="comment">//求出最小树形图的权值 </span></div><div class="line">            <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=n;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(circle[j])</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                ans+=<span class="built_in">map</span>[pre[j]][j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">        <span class="keyword">int</span> i,j;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">                <span class="built_in">map</span>[i][j]=INF;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;pt[i][<span class="number">0</span>],&amp;pt[i][<span class="number">1</span>]);</div><div class="line">        <span class="keyword">while</span>(m--)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;i,&amp;j);</div><div class="line">            <span class="built_in">map</span>[i][j]=Cal(i,j);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!Connected())</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"poor snoopy\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,ZLEmonds());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现自己的STL Iterator</title>
      <link href="/2013/12/16/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84stl-iterator/"/>
      <url>/2013/12/16/%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84stl-iterator/</url>
      <content type="html"><![CDATA[<p>STL表现的如此出色的，迭代器（iterator）做出了很大的贡献，功不可没。<a id="more"></a></p><h2 id="1-内嵌STL-Container"><a href="#1-内嵌STL-Container" class="headerlink" title="1 内嵌STL Container"></a>1 内嵌STL Container</h2><p>代理模式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> CourseList &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;Student&gt; StudentList;</div><div class="line">  StudentList students;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">typedef</span> StudentList::iterator iterator;</div><div class="line">  <span class="keyword">typedef</span> StudentList::const_iterator const_iterator;</div><div class="line">  <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> students.begin(); &#125;</div><div class="line">  <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> students.end(); &#125;</div><div class="line">  ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="2-在自己的-Collection-中实现-STL-Iterator"><a href="#2-在自己的-Collection-中实现-STL-Iterator" class="headerlink" title="2 在自己的 Collection 中实现 STL Iterator"></a>2 在自己的 Collection 中实现 STL Iterator</h2><p>stl iterator class</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> <span class="number">_</span>Category, <span class="keyword">typename</span> <span class="number">_</span>Tp, <span class="keyword">typename</span> <span class="number">_</span>Distance = <span class="keyword">ptrdiff_t</span>,</div><div class="line">            <span class="keyword">typename</span> <span class="number">_</span>Pointer = <span class="number">_</span>Tp*, <span class="keyword">typename</span> <span class="number">_</span>Reference = <span class="number">_</span>Tp&amp;&gt;</div><div class="line"><span class="keyword">struct</span> iterator</div><div class="line">&#123;</div><div class="line">   <span class="keyword">typedef</span> <span class="number">_</span>Category  iterator_category;</div><div class="line">   <span class="keyword">typedef</span> <span class="number">_</span>Tp        value_type;</div><div class="line">   <span class="keyword">typedef</span> <span class="number">_</span>Distance  difference_type;</div><div class="line">   <span class="keyword">typedef</span> <span class="number">_</span>Pointer   pointer;</div><div class="line">   <span class="keyword">typedef</span> <span class="number">_</span>Reference reference;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> mylist;  <span class="comment">// forward declare</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> mylist_iterator; <span class="comment">// forward declare</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> mylist_node &#123;</div><div class="line"><span class="keyword">friend</span> <span class="keyword">class</span> mylist&lt;T&gt;;</div><div class="line"><span class="keyword">friend</span> <span class="keyword">class</span> mylist_iterator&lt;T&gt;;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">mylist_node(<span class="keyword">const</span> T&amp; t, mylist_node&lt;T&gt; *next) : elem(t), next(next) &#123;&#125;</div><div class="line">~mylist_node() &#123; <span class="keyword">delete</span> next; &#125;</div><div class="line">T elem;</div><div class="line">mylist_node&lt;T&gt; *next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> mylist &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="keyword">typedef</span> mylist_iterator&lt;T&gt; iterator    ;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">mylist() : head(<span class="literal">NULL</span>), tail(<span class="literal">NULL</span>) &#123;&#125;</div><div class="line">~mylist() &#123; <span class="keyword">delete</span> head; &#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> head == <span class="literal">NULL</span>; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> T&amp; elem)</span></span>;</div><div class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mylist_iterator&lt;T&gt;(head); &#125;</div><div class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mylist_iterator&lt;T&gt;(<span class="literal">NULL</span>); &#125;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">mylist_node&lt;T&gt; *head, *tail;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">class</span> mylist_iterator : <span class="keyword">public</span> iterator&lt;forward_iterator_tag, T&gt; &#123;</div><div class="line"><span class="keyword">friend</span> <span class="keyword">class</span> mylist&lt;T&gt;;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">T&amp; <span class="keyword">operator</span>*();</div><div class="line"><span class="keyword">const</span> mylist_iterator&lt;T&gt;&amp; <span class="keyword">operator</span>++();</div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> mylist_iterator&lt;T&gt;&amp; other) <span class="keyword">const</span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">mylist_node&lt;T&gt; *pointee;</div><div class="line">mylist_iterator(mylist_node&lt;T&gt; *pointee) : pointee(pointee) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line">T&amp; mylist_iterator&lt;T&gt;::<span class="keyword">operator</span>*()</div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> pointee-&gt;elem;</div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">const</span> mylist_iterator&lt;T&gt;&amp; mylist_iterator&lt;T&gt;::<span class="keyword">operator</span>++()</div><div class="line">&#123;</div><div class="line">assert(pointee != <span class="literal">NULL</span>);</div><div class="line">pointee = pointee-&gt;next;</div><div class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">bool</span> mylist_iterator&lt;T&gt;:: <span class="keyword">operator</span>!=(<span class="keyword">const</span> mylist_iterator&lt;T&gt;&amp; other) <span class="keyword">const</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pointee != other.pointee;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-特殊行为的Iterator"><a href="#3-特殊行为的Iterator" class="headerlink" title="3 特殊行为的Iterator"></a>3 特殊行为的Iterator</h2><p>Stroustrup The C++ Programming Language gives an example of range-checking iterator.</p><p>下面我们来实现一个even numbers iterator</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> IterT, <span class="keyword">typename</span> TypeT&gt;</div><div class="line"><span class="keyword">class</span> even_iterator :</div><div class="line"><span class="keyword">public</span> <span class="built_in">std</span>::iterator&lt;input_iterator_tag, TypeT&gt;</div><div class="line">&#123;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">IterT m_itCur;</div><div class="line">IterT m_itEnd;</div><div class="line"></div><div class="line"><span class="keyword">protected</span>:</div><div class="line"><span class="keyword">void</span> <span class="number">__f</span>ind_first_even()</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (; m_itCur != m_itEnd; ++m_itCur)</div><div class="line"><span class="keyword">if</span> (*m_itCur % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> <span class="number">__f</span>ind_next_even()</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (m_itCur == m_itEnd) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">for</span> (++m_itCur; m_itCur != m_itEnd; ++m_itCur)</div><div class="line"><span class="keyword">if</span> (*m_itCur % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">even_iterator() :</div><div class="line">m_itEnd(), m_itCur() &#123;&#125;</div><div class="line"></div><div class="line">even_iterator(<span class="keyword">const</span> IterT&amp; itCur, <span class="keyword">const</span> IterT&amp; itEnd) :</div><div class="line">m_itCur(itCur), m_itEnd(itEnd)</div><div class="line">&#123; <span class="number">__f</span>ind_first_even(); &#125;</div><div class="line"></div><div class="line">even_iterator(<span class="keyword">const</span> even_iterator&amp; r) :</div><div class="line">m_itCur(r.m_itCur),</div><div class="line">m_itEnd(r.m_itEnd) &#123;&#125;</div><div class="line"></div><div class="line">even_iterator&lt;IterT, TypeT&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> even_iterator&amp; r)</div><div class="line">&#123;</div><div class="line">m_itCur = r.m_itCur;</div><div class="line">m_itEnd = r.m_itEnd;</div><div class="line"></div><div class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">even_iterator&lt;IterT, TypeT&gt;&amp; <span class="keyword">operator</span>++()</div><div class="line">&#123;</div><div class="line"><span class="number">__f</span>ind_next_even();</div><div class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">even_iterator&lt;IterT, TypeT&gt; <span class="keyword">operator</span>++(<span class="keyword">int</span>)</div><div class="line">&#123;</div><div class="line">even_iterator it = *<span class="keyword">this</span>;</div><div class="line"><span class="number">__f</span>ind_next_even();</div><div class="line"><span class="keyword">return</span> it;</div><div class="line">&#125;</div><div class="line"></div><div class="line">TypeT&amp; <span class="keyword">operator</span>*()</div><div class="line">&#123; <span class="keyword">return</span> *m_itCur; &#125;</div><div class="line"></div><div class="line">TypeT* <span class="keyword">operator</span>-&gt;()</div><div class="line">&#123; <span class="keyword">return</span> &amp;(*m_itCur); &#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> even_iterator&amp; r) <span class="keyword">const</span></div><div class="line">&#123; <span class="keyword">return</span> (m_itCur != r.m_itCur); &#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> even_iterator&amp; r) <span class="keyword">const</span></div><div class="line">&#123; <span class="keyword">return</span> !<span class="keyword">operator</span>!=(r); &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>Test</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>) time(<span class="literal">NULL</span>));</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vnNums(<span class="number">20</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> u = <span class="number">0</span>; u &lt; <span class="number">20</span>; ++u)</div><div class="line">vnNums[u] = rand() / (<span class="keyword">float</span>) RAND_MAX * <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"initial vector:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">copy(vnNums.begin(), vnNums.end(), ostream_iterator(<span class="built_in">cout</span>, <span class="string">"\t"</span>));</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> even_iterator&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator, <span class="keyword">const</span> <span class="keyword">int</span>&gt; int_vec_even_iter;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"even vector:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"even vector:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">copy(int_vec_even_iter(vnNums.begin(), vnNums.end()),</div><div class="line">int_vec_even_iter(vnNums.end(), vnNums.end()),</div><div class="line">ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>, <span class="string">"\t"</span>)</div><div class="line">);</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Iterator完整实现"><a href="#Iterator完整实现" class="headerlink" title="Iterator完整实现"></a>Iterator完整实现</h2><p>simple</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// forward declare the iterator</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt; <span class="keyword">class</span> T, <span class="keyword">int</span> N &gt; <span class="keyword">class</span> RingIter;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// define the container, make the iterator a friend</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt; <span class="keyword">class</span> T, <span class="keyword">int</span> N &gt;</div><div class="line"><span class="keyword">class</span> RingQueue &#123;</div><div class="line"></div><div class="line"><span class="keyword">friend</span> <span class="keyword">class</span> RingIter&lt; T, N &gt;;</div><div class="line"><span class="keyword">typedef</span> RingIter&lt;T, N&gt; iterator;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</div><div class="line"><span class="keyword">typedef</span> T value_type;</div><div class="line"><span class="keyword">typedef</span> T * pointer;</div><div class="line"><span class="keyword">typedef</span> T &amp; reference;</div><div class="line"></div><div class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> iterator( *<span class="keyword">this</span>, <span class="number">0</span> ); &#125;</div><div class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> const_iterator( *<span class="keyword">this</span>, <span class="number">0</span> ); &#125;</div><div class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> iterator( *<span class="keyword">this</span>, mySize ); &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// define the iterator</span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt; <span class="keyword">class</span> T, <span class="keyword">int</span> N &gt;</div><div class="line"><span class="keyword">class</span> RingIter &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">RingQueue&lt;T, N&gt; &amp; myRingQueue;</div><div class="line"><span class="keyword">int</span> mySize;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">RingIter( RingQueue &amp; rq, <span class="keyword">int</span> size )</div><div class="line">: myRingQueue( rq ), mySize ( size )</div><div class="line">&#123;&#125;</div><div class="line"></div><div class="line">T &amp; <span class="keyword">operator</span>*() &#123; <span class="keyword">return</span> myRingQueue[ myIncrement ]; &#125;</div><div class="line">iterator &amp; <span class="keyword">operator</span>++() &#123; ++myOffset; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</div><div class="line">iterator <span class="keyword">operator</span>++ ( <span class="keyword">int</span> )</div><div class="line">&#123;</div><div class="line">RingIter&lt;T, N&gt; clone( *<span class="keyword">this</span> );</div><div class="line">++myOffset;</div><div class="line"><span class="keyword">return</span> clone;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> RingCIter&lt;T, N&gt; const_iterator;</div></pre></td></tr></table></figure><p>complete</p><p>文件iterator_base.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*This is a internal header file.</span></div><div class="line"> *It contains all of the general iterator-related utility types,such as</div><div class="line"> * iterator_traits and struct iterator and functions, such as distance() </div><div class="line"> *and advance().</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MITERATOR_BASE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _MITERATOR_BASE_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span> <span class="comment">//for debug</span></span></div><div class="line"><span class="keyword">namespace</span> numb</div><div class="line">&#123;</div><div class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="keyword">ptrdiff_t</span>;</div><div class="line"><span class="comment">/* Abstructions for uniform iterator,</span></div><div class="line"> * general iterator-related utility types</div><div class="line"> */</div><div class="line">    <span class="comment">/* Iterator tags</span></div><div class="line">    * 5 kinds of iterators,such as input iterator,</div><div class="line">    * output iterator.</div><div class="line">    */</div><div class="line">    <span class="comment">///Input Iterator</span></div><div class="line">    <span class="keyword">struct</span> input_iterator_tag&#123;&#125;;</div><div class="line">    <span class="comment">///Output Iterator</span></div><div class="line">    <span class="keyword">struct</span> output_iterator_tag&#123;&#125;;</div><div class="line">    <span class="comment">///Forward Iterator</span></div><div class="line">    <span class="keyword">struct</span> forward_iterator_tag:<span class="keyword">public</span> input_iterator_tag &#123;&#125;;</div><div class="line">    <span class="comment">///Bidirectional Iterator</span></div><div class="line">    <span class="keyword">struct</span> bidirectional_iterator_tag:<span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</div><div class="line">    <span class="comment">///Random Acess Iterator</span></div><div class="line">    <span class="keyword">struct</span> random_iterator_tag:<span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</div><div class="line">    </div><div class="line">    <span class="comment">/* Common iterator class</span></div><div class="line">    * It contains nothing but some nested typedefs</div><div class="line">    * All iterator classes inherit from it.</div><div class="line">    */</div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> <span class="number">_</span>Category,</div><div class="line">             <span class="keyword">typename</span> <span class="number">_</span>T,</div><div class="line">             <span class="keyword">typename</span> <span class="number">_</span>Distance=<span class="keyword">ptrdiff_t</span>,</div><div class="line">             <span class="keyword">typename</span> <span class="number">_</span>Pointer=<span class="number">_</span>T*,</div><div class="line">             <span class="keyword">typename</span> <span class="number">_</span>Reference=<span class="number">_</span>T&amp;&gt;</div><div class="line">    <span class="keyword">struct</span> iterator</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//5 associated types</span></div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>Category iterator_category;</div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>T            value_type;</div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>Distance difference_type;</div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>Pointer  pointer;</div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>Reference  reference;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">/* Traits classes for iterators</span></div><div class="line">    * It contains nothing but some nested typedefs</div><div class="line">    */</div><div class="line">    <span class="comment">//General version</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> <span class="number">_</span>Iterator&gt;</div><div class="line">    <span class="keyword">struct</span> iterator_traits</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="number">_</span>Iterator::value_type           value_type;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="number">_</span>Iterator::iterator_category    iterator_category;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="number">_</span>Iterator::difference_type  difference_type;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="number">_</span>Iterator::pointer          pointer;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="number">_</span>Iterator::reference            reference;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//Partial specialization for pointer types.</span></div><div class="line">    <span class="comment">//(such as int*,char*,etc.)</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> <span class="number">_</span>Tp&gt;</div><div class="line">    <span class="keyword">struct</span> iterator_traits&lt;<span class="number">_</span>Tp*&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>Tp                   value_type;</div><div class="line">        <span class="keyword">typedef</span> random_iterator_tag   iterator_category;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>                difference_type;</div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>Tp*                   pointer;</div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>Tp&amp;                   reference;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//Partial specialization for pointer-to-const types.</span></div><div class="line">    <span class="comment">//(such as coonst int*,const char*,etc.)</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> <span class="number">_</span>Tp&gt;</div><div class="line">    <span class="keyword">struct</span> iterator_traits&lt;<span class="keyword">const</span> <span class="number">_</span>Tp*&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">typedef</span> <span class="number">_</span>Tp                   value_type;</div><div class="line">        <span class="keyword">typedef</span> random_iterator_tag   iterator_category;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>                difference_type;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="number">_</span>Tp*                  pointer;</div><div class="line">        <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="number">_</span>Tp&amp;                  reference;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    *Some general functionals</div><div class="line">    */</div><div class="line">     </div><div class="line">    <span class="comment">//A function that get the category of a iterator</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> <span class="number">_</span>Iter&gt;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;<span class="number">_</span>Iter&gt;::iterator_category</div><div class="line">    <span class="number">_</span>iterator_category(<span class="keyword">const</span> <span class="number">_</span>Iter)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">typename</span> iterator_traits&lt;<span class="number">_</span>Iter&gt;::iterator_category();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* Distance between iterators .</span></div><div class="line">    * @param   first  An input iterator</div><div class="line">    * @param   last   An input iterator</div><div class="line">    * @return  distance between them.</div><div class="line">    */</div><div class="line">    <span class="comment">//For all iterators but random acces iterator</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIter&gt;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;InputIter&gt;::difference_type</div><div class="line">    <span class="number">_</span>distance(InputIter first,InputIter last,input_iterator_tag)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">typename</span> iterator_traits&lt;InputIter&gt;::difference_type n=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(first!=last)</div><div class="line">        &#123;</div><div class="line">            ++first;</div><div class="line">            ++n;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//For random acces iterator,@n maybe negetive.</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> RandomIter&gt;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;RandomIter&gt;::difference_type</div><div class="line">    <span class="number">_</span>distance(RandomIter first,RandomIter last,random_iterator_tag)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> last-first;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//interface for client</span></div><div class="line">    <span class="comment">//InputIter stands for it is an input iterator at least.</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIter&gt;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;InputIter&gt;::<span class="function">difference_type</span></div><div class="line">    <span class="title">distance</span><span class="params">(InputIter first,InputIter last)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">_</span>distance(first,last,</div><div class="line">                         <span class="number">_</span>iterator_category(first));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/* Increment/decrement iterators .</span></div><div class="line">    * @param   i   An input iterator</div><div class="line">    * @param   n   A delta by which to change</div><div class="line">    * @return  nothing.</div><div class="line">    */</div><div class="line">    <span class="comment">//For input iterator ,n&gt;=0;</span></div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> InputIter,<span class="keyword">typename</span> Distance&gt;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="number">_</span>advance(InputIter i,Distance n,input_iterator_tag)</div><div class="line">    &#123;</div><div class="line">        assert(n&gt;=<span class="number">0</span>);</div><div class="line">        <span class="keyword">while</span>(n--) ++i;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//for bidirectional iterator</span></div><div class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> BidirecIter,<span class="keyword">typename</span> Distance&gt;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="number">_</span>advance(BidirecIter i,Distance n,bidirectional_iterator_tag)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(n&gt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">while</span>(n--)</div><div class="line">                ++i;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">while</span>(n++)</div><div class="line">                --i;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//For random access iterator</span></div><div class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> RandomIter,<span class="keyword">typename</span> Distance&gt;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> <span class="number">_</span>advance(RandomIter i,Distance n,random_iterator_tag)</div><div class="line">    &#123;    i+=n;   &#125;</div><div class="line">    <span class="comment">//Interface to client</span></div><div class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIter,<span class="keyword">typename</span> Distance&gt;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">advance</span><span class="params">(InputIter i,Distance n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="number">_</span>advance(i,n,<span class="number">_</span>iterator_category(i));</div><div class="line">    &#125;    </div><div class="line">&#125;<span class="comment">//end of numb</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><p>文件stl_iterator.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *  This is an internal header file.</div><div class="line"> *  This file implements some iterator adapters,</div><div class="line"> *  such as __normal_iterator,reverse_iterator, back_insert_iterator,</div><div class="line"> *  front_insert_iterator, insert_iterator, , and their</div><div class="line"> *  supporting functions and overloaded operators.</div><div class="line"> */</div><div class="line"> <span class="meta">#<span class="meta-keyword">ifndef</span> _mstl_iterator_h</span></div><div class="line"> <span class="meta">#<span class="meta-keyword">define</span> _mstl_iterator_h</span></div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iterator_base.h"</span></span></div><div class="line"> <span class="keyword">namespace</span> numb</div><div class="line"> &#123;</div><div class="line">    <span class="comment">//This iterator adapter is a normal iterator</span></div><div class="line">    <span class="keyword">using</span> numb::iterator;</div><div class="line">    <span class="keyword">using</span> numb::iterator_traits;</div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Iterator, <span class="keyword">typename</span> Container&gt;</div><div class="line">    <span class="keyword">class</span> <span class="number">_</span>normal_iterator</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">protected</span>:</div><div class="line">            Iterator M_current;</div><div class="line">            <span class="keyword">typedef</span> iterator_traits&lt;Iterator&gt;  traits_type;</div><div class="line">        <span class="keyword">public</span>:</div><div class="line">            <span class="keyword">typedef</span> Iterator                              iterator_type;</div><div class="line">            <span class="keyword">typedef</span> <span class="keyword">typename</span> traits_type::iterator_category  iterator_category;</div><div class="line">            <span class="keyword">typedef</span> <span class="keyword">typename</span> traits_type::value_type         value_type;</div><div class="line">            <span class="keyword">typedef</span> <span class="keyword">typename</span> traits_type::difference_type    difference_type;</div><div class="line">            <span class="keyword">typedef</span> <span class="keyword">typename</span> traits_type::reference      reference;</div><div class="line">            <span class="keyword">typedef</span> <span class="keyword">typename</span> traits_type::pointer        pointer;</div><div class="line">            <span class="comment">//default ctor</span></div><div class="line">            <span class="number">_</span>normal_iterator():M_current(Iterator())&#123;&#125;</div><div class="line">            <span class="comment">//copy ctor</span></div><div class="line">            <span class="keyword">explicit</span> <span class="number">_</span>normal_iterator(<span class="keyword">const</span> Iterator&amp; i):M_current(i)&#123;&#125;</div><div class="line">            </div><div class="line">            <span class="comment">//To-do: Allow iterator to const_iterator conversion</span></div><div class="line">            </div><div class="line">            <span class="comment">//for forward iterator </span></div><div class="line">            reference <span class="keyword">operator</span>*()<span class="keyword">const</span></div><div class="line">            &#123;    <span class="keyword">return</span> *M_current;&#125;</div><div class="line">            pointer <span class="keyword">operator</span>-&gt;()<span class="keyword">const</span></div><div class="line">            &#123;    <span class="keyword">return</span> M_current;&#125;</div><div class="line">            <span class="comment">//++i</span></div><div class="line">            <span class="number">_</span>normal_iterator&amp; </div><div class="line">            <span class="keyword">operator</span> ++()</div><div class="line">            &#123;</div><div class="line">                ++M_current;</div><div class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//i++</span></div><div class="line">            <span class="number">_</span>normal_iterator </div><div class="line">            <span class="keyword">operator</span> ++(<span class="keyword">int</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">_</span>normal_iterator(M_current++);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//for bidirectional iterator</span></div><div class="line">            <span class="comment">//--i</span></div><div class="line">            <span class="number">_</span>normal_iterator&amp; </div><div class="line">            <span class="keyword">operator</span> --()</div><div class="line">            &#123;</div><div class="line">                --M_current;</div><div class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//i--</span></div><div class="line">            <span class="number">_</span>normal_iterator </div><div class="line">            <span class="keyword">operator</span> --(<span class="keyword">int</span>)</div><div class="line">            &#123;<span class="keyword">return</span> <span class="number">_</span>normal_iterator(M_current--);&#125;</div><div class="line">            </div><div class="line">            <span class="comment">//for random access iterator,[],+=,-=,+,-</span></div><div class="line">            reference </div><div class="line">            <span class="keyword">operator</span>[](<span class="keyword">const</span> difference_type&amp; n)<span class="keyword">const</span></div><div class="line">            &#123;    <span class="keyword">return</span> M_current[n];&#125;</div><div class="line">            </div><div class="line">            <span class="number">_</span>normal_iterator&amp; </div><div class="line">            <span class="keyword">operator</span> +=(<span class="keyword">const</span> difference_type&amp; n)</div><div class="line">            &#123;</div><div class="line">                M_current+=n;</div><div class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="number">_</span>normal_iterator&amp;</div><div class="line">            <span class="keyword">operator</span> -=(<span class="keyword">const</span> difference_type&amp; n)</div><div class="line">            &#123;</div><div class="line">                M_current-=n;</div><div class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="number">_</span>normal_iterator</div><div class="line">            <span class="keyword">operator</span> +(<span class="keyword">const</span> difference_type&amp; n)<span class="keyword">const</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">_</span>normal_iterator(M_current+n);</div><div class="line">            &#125;</div><div class="line">            <span class="number">_</span>normal_iterator</div><div class="line">            <span class="keyword">operator</span> -(<span class="keyword">const</span> difference_type&amp; n)<span class="keyword">const</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">_</span>normal_iterator(M_current-n);</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">const</span> Iterator&amp;</span></div><div class="line">            <span class="title">base</span><span class="params">()</span> <span class="keyword">const</span></div><div class="line">            &#123; <span class="keyword">return</span> M_current; &#125;            </div><div class="line">    &#125;;<span class="comment">//end of _normal_iterator</span></div><div class="line"> &#125;<span class="comment">//end of namespace numb</span></div><div class="line"> <span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows CMD替代</title>
      <link href="/2013/12/05/windows-cmd%E6%9B%BF%E4%BB%A3/"/>
      <url>/2013/12/05/windows-cmd%E6%9B%BF%E4%BB%A3/</url>
      <content type="html"><![CDATA[<h2 id="Console2"><a href="#Console2" class="headerlink" title="Console2"></a>Console2</h2><p>官网：<a href="http://sourceforge.net/projects/console/" target="_blank" rel="external">http://sourceforge.net/projects/console/</a></p><p>中文输入支持：<a href="https://github.com/autosquid/Console2-Chinese-Input-Capable" target="_blank" rel="external">https://github.com/autosquid/Console2-Chinese-Input-Capable</a></p><p>中文偏移<br>所以需要在console2的窗口中 右击，选择 view-&gt;console windo——进入到cmd界面 然后在cmd的标签上，选择 属性-&gt;字体-&gt;新宋体</p><p><img src="/img/console2.png" alt="console2"></p><p>克隆版 ConsoleZ</p><h2 id="ConEmu"><a href="#ConEmu" class="headerlink" title="ConEmu"></a>ConEmu</h2><p>官网 <a href="http://code.google.com/p/conemu-maximus5/" target="_blank" rel="external">http://code.google.com/p/conemu-maximus5/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>poj 3630 phone list</title>
      <link href="/2013/12/02/poj-3630-phone-list/"/>
      <url>/2013/12/02/poj-3630-phone-list/</url>
      <content type="html"><![CDATA[<p>方法一、先排序，前缀子串肯定是与父串挨着的<br><a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>((<span class="keyword">char</span>*)a, (<span class="keyword">char</span>*)b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> num, n;</div><div class="line">    <span class="keyword">char</span> tel[<span class="number">10005</span>][<span class="number">11</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (num--) &#123;</div><div class="line">        <span class="keyword">int</span> i, flag = <span class="number">1</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tel[i]);</div><div class="line"></div><div class="line">        qsort(tel, n, <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">11</span>, cmp);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; ++i) &#123;</div><div class="line">            <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(tel[i<span class="number">-1</span>]);</div><div class="line">            <span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(tel[i]);</div><div class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (len1 &lt;= len2) &#123;</div><div class="line">                <span class="keyword">while</span>(tel[i<span class="number">-1</span>][j] == tel[i][j] &amp;&amp; j &lt; len1)</div><div class="line">                    ++j;</div><div class="line">                <span class="keyword">if</span> (j == len1)</div><div class="line">                    flag = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!flag)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>方法二、传统trie树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> cases, count;</div><div class="line"><span class="keyword">int</span> nodenum;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">bool</span> isExist;</div><div class="line">    node * branch[<span class="number">10</span>];</div><div class="line">&#125;Node[<span class="number">100000</span>];</div><div class="line"></div><div class="line"><span class="keyword">class</span> Trie</div><div class="line">&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    node root;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Trie()&#123;root = Node[<span class="number">0</span>];&#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> num[])</span></span></div><div class="line">    &#123;</div><div class="line">        node *location = &amp;root;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(num);</div><div class="line">        <span class="keyword">while</span>(num[i])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(i==len<span class="number">-1</span> &amp;&amp; location-&gt;branch[num[i]-<span class="string">'0'</span>] != <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(location-&gt;branch[num[i]-<span class="string">'0'</span>]==<span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                location-&gt;branch[num[i]-<span class="string">'0'</span>] = &amp;Node[nodenum];</div><div class="line">                Node[nodenum].isExist = <span class="literal">false</span>;</div><div class="line">                <span class="built_in">memset</span>(Node[nodenum].branch,<span class="literal">NULL</span>,<span class="keyword">sizeof</span>(Node[nodenum].branch));</div><div class="line">                nodenum++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(location-&gt;branch[num[i]-<span class="string">'0'</span>]-&gt;isExist == <span class="literal">true</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            location = location-&gt;branch[num[i]-<span class="string">'0'</span>];</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        location-&gt;isExist = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cases);</div><div class="line">    <span class="keyword">while</span>(cases--)</div><div class="line">    &#123;</div><div class="line">        nodenum = <span class="number">1</span>;</div><div class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;count);</div><div class="line">        <span class="keyword">char</span> tel[<span class="number">11</span>];</div><div class="line">        Trie t;</div><div class="line">        <span class="keyword">while</span>(count--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,tel);</div><div class="line">            <span class="keyword">if</span>(!t.insert(tel))</div><div class="line">            &#123;</div><div class="line">                flag = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>poj 2524 ubiquitous religions</title>
      <link href="/2013/12/02/poj-2524-ubiquitous-religions/"/>
      <url>/2013/12/02/poj-2524-ubiquitous-religions/</url>
      <content type="html"><![CDATA[<p>水题，并查集简单应用<br><a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50005</span></div><div class="line"><span class="keyword">int</span> uf_set[N];</div><div class="line"><span class="keyword">int</span> sum;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(uf_set, <span class="number">-1</span>, <span class="keyword">sizeof</span>(uf_set));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (uf_set[x] &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        uf_set[x] = Find(uf_set[x]);</div><div class="line">        <span class="keyword">return</span> uf_set[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> r1, <span class="keyword">int</span> r2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a = Find(r1);</div><div class="line">    <span class="keyword">int</span> b = Find(r2);</div><div class="line">    <span class="keyword">if</span> (a == b)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (uf_set[a] &lt; uf_set[b]) &#123;</div><div class="line">        uf_set[a] += uf_set[b];</div><div class="line">        uf_set[b] = a;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        uf_set[b] += uf_set[a];</div><div class="line">        uf_set[a] = b;</div><div class="line">    &#125;</div><div class="line">    --sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> c = <span class="number">1</span>, n, m;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        sum = n;</div><div class="line">        Init();</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            <span class="keyword">int</span> x, y;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            Union(x, y);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, c++, sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ 3437 Tree Grafting</title>
      <link href="/2013/12/02/poj-3437-tree-grafting/"/>
      <url>/2013/12/02/poj-3437-tree-grafting/</url>
      <content type="html"><![CDATA[<p>当前结点在二叉树表示中的深度等于父结点深度加上当前节点左兄弟的个数再加1<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40005</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> s[N];</div><div class="line">    <span class="keyword">int</span> tree_depth;</div><div class="line">    <span class="keyword">int</span> father[N];</div><div class="line">    <span class="keyword">int</span> bi_depth[N];</div><div class="line">    <span class="keyword">int</span> left_child[N];</div><div class="line">    <span class="keyword">int</span> max_tree_depth, max_bi_depth;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        ++num;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'#'</span>)</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        tree_depth = <span class="number">0</span>;</div><div class="line">        max_tree_depth = <span class="number">0</span>;</div><div class="line">        max_bi_depth = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(father, <span class="number">0</span>, N * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">        <span class="built_in">memset</span>(bi_depth, <span class="number">0</span>, N * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">        <span class="built_in">memset</span>(left_child, <span class="number">0</span>, N * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</div><div class="line">            <span class="keyword">if</span> (s[i<span class="number">-1</span>] == <span class="string">'d'</span>) &#123;</div><div class="line">                ++tree_depth;</div><div class="line">                <span class="keyword">if</span> (max_tree_depth &lt; tree_depth)</div><div class="line">                    max_tree_depth = tree_depth;</div><div class="line"></div><div class="line">                father[i] = i - <span class="number">1</span>;</div><div class="line">                bi_depth[i] = bi_depth[i<span class="number">-1</span>] + left_child[i<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">                ++left_child[i<span class="number">-1</span>];</div><div class="line">                <span class="keyword">if</span> (max_bi_depth &lt; bi_depth[i])</div><div class="line">                    max_bi_depth = bi_depth[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i<span class="number">-1</span>] == <span class="string">'u'</span>) &#123;</div><div class="line">                --tree_depth;</div><div class="line">                bi_depth[i] = bi_depth[father[i<span class="number">-1</span>]];</div><div class="line">                left_child[i] = left_child[father[i<span class="number">-1</span>]];</div><div class="line">                father[i] = father[father[i<span class="number">-1</span>]];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Tree %d: %d =&gt; %d\n"</span>, num, max_tree_depth, max_bi_depth);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>算法：工作分配</title>
      <link href="/2013/11/13/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%88%86%E9%85%8D/"/>
      <url>/2013/11/13/%E7%AE%97%E6%B3%95%EF%BC%9A%E5%B7%A5%E4%BD%9C%E5%88%86%E9%85%8D/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>设有n件工作分配给n个人。工人i完成工作j所需的费用为c[i][j] 。试设计一个算法，计算最佳工作分配方案，为每一个人都分配1 件不同的工作，并使总费用达到最小。</p><h2 id="方法一：回溯法"><a href="#方法一：回溯法" class="headerlink" title="方法一：回溯法"></a>方法一：回溯法</h2><p>n分作业分配给n个人，共有n!中排列方式，深度优先遍历其排列数，如果遍历的路径已经比当前最小的话费则舍弃对当前路径的遍历，返回上层节点，寻找合适的路径，即回溯，如果最后可行解比当前的最小费用小，那么就更新最佳的作业安排顺序，同时更新最小的耗费时间。<a id="more"></a></p><p>由于每个人都必须分配到工作，在这里可以建一个二维数组c[i][j]，用以表示工人i完成j所需的费用。给定一个循环，从第1个工人开始循环分配工作，直到所有工人都分配完。分配第k个工人时，再循环检查每个工作是否已被分配，没有则分配给k号工人，否则检查下一个工作。</p><p><strong>递归版</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> N;          <span class="comment">/*表示任务数和工人数*/</span></div><div class="line"></div><div class="line"><span class="comment">//c[i][j] 工人i完成工作j所需的费用</span></div><div class="line"><span class="comment">//task[i] 值为0表示任务i未分配，值为1表示任务已分配</span></div><div class="line"><span class="comment">//work[k] 值为0表示工人k未分配任务，值为j表示工人k已分配任务j</span></div><div class="line"><span class="comment">//mincost 最小总费用</span></div><div class="line"><span class="keyword">int</span> **c;</div><div class="line"><span class="keyword">int</span> mincost = INT32_MAX;</div><div class="line"><span class="keyword">int</span> *task, *temp, *worker;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Plan</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> cost)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i, j;</div><div class="line"><span class="keyword">if</span> (k &gt;= N &amp;&amp; cost &lt; mincost) &#123;</div><div class="line">mincost = cost;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">temp[i] = task[i];  <span class="comment">//记录工作分配，如只要输出最小费用，无需输出分配情况，可删除此循环及work, temp数组</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</div><div class="line"><span class="keyword">if</span> (task[j] == <span class="number">0</span> &amp;&amp; cost + c[k][j] &lt; mincost) &#123;</div><div class="line">worker[k] = j; task[j] = <span class="number">1</span>;  <span class="comment">//分配</span></div><div class="line">Plan(k + <span class="number">1</span>, cost + c[k][j]);</div><div class="line">worker[k] = <span class="number">0</span>;  task[j] = <span class="number">0</span>;  <span class="comment">//回溯</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i, j;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</div><div class="line"></div><div class="line">c = (<span class="keyword">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * N);</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">c[i] = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</div><div class="line">task = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</div><div class="line">worker = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</div><div class="line">temp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * N);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">worker[i] = <span class="number">0</span>; task[i] = <span class="number">0</span>; temp[i] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N; j++)</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i][j]);</div><div class="line"><span class="comment">//mincost += c[i][i];</span></div><div class="line">&#125;</div><div class="line">Plan(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">free</span>(task);</div><div class="line"><span class="built_in">free</span>(worker);</div><div class="line"><span class="built_in">free</span>(temp);</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line"><span class="built_in">free</span>(c[i]);</div><div class="line"><span class="built_in">free</span>(c);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n Mincost = %d\n"</span>, mincost);</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line"><span class="built_in">printf</span>(<span class="string">"Worker %d is assigned task %d\n"</span>, i, temp[i]);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>高效版</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> **aray;</div><div class="line"><span class="keyword">int</span> *<span class="built_in">list</span>;</div><div class="line"><span class="keyword">int</span> number;</div><div class="line"><span class="keyword">int</span> final_cost = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> current_cost = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> temp;</div><div class="line">temp = *a;</div><div class="line">*a = *b;</div><div class="line">*b = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="keyword">if</span>(k &gt;= number)</div><div class="line">&#123;</div><div class="line">final_cost=current_cost;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(i = k; i &lt; number; i++)</div><div class="line">&#123;</div><div class="line">current_cost += aray[k][<span class="built_in">list</span>[i]];</div><div class="line"><span class="keyword">if</span>(current_cost &lt; final_cost)</div><div class="line">&#123;</div><div class="line">swap(&amp;<span class="built_in">list</span>[k], &amp;<span class="built_in">list</span>[i]);</div><div class="line">search(k+<span class="number">1</span>);</div><div class="line">swap(&amp;<span class="built_in">list</span>[k], &amp;<span class="built_in">list</span>[i]);</div><div class="line">&#125;</div><div class="line">current_cost -= aray[k][<span class="built_in">list</span>[i]];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> m;</div><div class="line"><span class="keyword">int</span> i,j;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number);</div><div class="line"></div><div class="line">aray = (<span class="keyword">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *)*number);</div><div class="line"><span class="built_in">list</span> = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*number);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; number; i++)</div><div class="line"><span class="built_in">list</span>[i] = i;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; number; i++)</div><div class="line">aray[i] = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*number);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; number; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; number; j++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;aray[i][j]);</div><div class="line">&#125;</div><div class="line">final_cost += aray[i][i];</div><div class="line">&#125;</div><div class="line">search(<span class="number">0</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, final_cost);</div><div class="line"></div><div class="line"><span class="built_in">free</span>(<span class="built_in">list</span>);</div><div class="line"><span class="built_in">free</span>(aray);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="方法二：匈牙利算法"><a href="#方法二：匈牙利算法" class="headerlink" title="方法二：匈牙利算法"></a>方法二：匈牙利算法</h2><p><a href="http://zh.wikipedia.org/wiki/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95</a></p><p><a href="http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=hungarianAlgorithm" target="_blank" rel="external">http://community.topcoder.com/tc?module=Static&amp;d1=tutorials&amp;d2=hungarianAlgorithm</a></p><p>其基本的理论基础是针对cost矩阵，将cost矩阵的一行或一列数据加上或减去一个数，其最优任务分配求解问题不变。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 55             <span class="comment">//max number of vertices in one part</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 100000000    <span class="comment">//just infinity</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> cost[N][N];          <span class="comment">//cost matrix</span></div><div class="line"><span class="keyword">int</span> n, max_match;        <span class="comment">//n workers and n jobs</span></div><div class="line"><span class="keyword">int</span> lx[N], ly[N];        <span class="comment">//labels of X and Y parts</span></div><div class="line"><span class="keyword">int</span> xy[N];               <span class="comment">//xy[x] - vertex that is matched with x,</span></div><div class="line"><span class="keyword">int</span> yx[N];               <span class="comment">//yx[y] - vertex that is matched with y</span></div><div class="line"><span class="keyword">bool</span> S[N], T[N];         <span class="comment">//sets S and T in algorithm</span></div><div class="line"><span class="keyword">int</span> slack[N];            <span class="comment">//as in the algorithm description</span></div><div class="line"><span class="keyword">int</span> slackx[N];           <span class="comment">//slackx[y] such a vertex, that</span></div><div class="line">                         <span class="comment">// l(slackx[y]) + l(y) - w(slackx[y],y) = slack[y]</span></div><div class="line"><span class="keyword">int</span> prev[N];             <span class="comment">//array for memorizing alternating paths</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_labels</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(lx, <span class="number">0</span>, <span class="keyword">sizeof</span>(lx));</div><div class="line">    <span class="built_in">memset</span>(ly, <span class="number">0</span>, <span class="keyword">sizeof</span>(ly));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; n; x++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; n; y++)</div><div class="line">            lx[x] = max(lx[x], cost[x][y]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">augment</span><span class="params">()</span>                         <span class="comment">//main function of the algorithm</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (max_match == n) <span class="keyword">return</span>;        <span class="comment">//check wether matching is already perfect</span></div><div class="line">    <span class="keyword">int</span> x, y, root;                    <span class="comment">//just counters and root vertex</span></div><div class="line">    <span class="keyword">int</span> q[N], wr = <span class="number">0</span>, rd = <span class="number">0</span>;          <span class="comment">//q - queue for bfs, wr,rd - write and read</span></div><div class="line">                                       <span class="comment">//pos in queue</span></div><div class="line">    <span class="built_in">memset</span>(S, <span class="literal">false</span>, <span class="keyword">sizeof</span>(S));       <span class="comment">//init set S</span></div><div class="line">    <span class="built_in">memset</span>(T, <span class="literal">false</span>, <span class="keyword">sizeof</span>(T));       <span class="comment">//init set T</span></div><div class="line">    <span class="built_in">memset</span>(prev, <span class="number">-1</span>, <span class="keyword">sizeof</span>(prev));    <span class="comment">//init set prev - for the alternating tree</span></div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; n; x++)            <span class="comment">//finding root of the tree</span></div><div class="line">        <span class="keyword">if</span> (xy[x] == <span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            q[wr++] = root = x;</div><div class="line">            prev[x] = <span class="number">-2</span>;</div><div class="line">            S[x] = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; n; y++)            <span class="comment">//initializing slack array</span></div><div class="line">    &#123;</div><div class="line">        slack[y] = lx[root] + ly[y] - cost[root][y];</div><div class="line">        slackx[y] = root;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//second part of augment() function</span></div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)                                                        <span class="comment">//main cycle</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span> (rd &lt; wr)                                                 <span class="comment">//building tree with bfs cycle</span></div><div class="line">        &#123;</div><div class="line">            x = q[rd++];                                                <span class="comment">//current vertex from X part</span></div><div class="line">            <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; n; y++)                                     <span class="comment">//iterate through all edges in equality graph</span></div><div class="line">                <span class="keyword">if</span> (cost[x][y] == lx[x] + ly[y] &amp;&amp;  !T[y])</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span> (yx[y] == <span class="number">-1</span>) <span class="keyword">break</span>;                             <span class="comment">//an exposed vertex in Y found, so</span></div><div class="line">                                                                        <span class="comment">//augmenting path exists!</span></div><div class="line">                    T[y] = <span class="literal">true</span>;                                        <span class="comment">//else just add y to T,</span></div><div class="line">                    q[wr++] = yx[y];                                    <span class="comment">//add vertex yx[y], which is matched</span></div><div class="line">                                                                        <span class="comment">//with y, to the queue</span></div><div class="line">                    add_to_tree(yx[y], x);                              <span class="comment">//add edges (x,y) and (y,yx[y]) to the tree</span></div><div class="line">                &#125;</div><div class="line">            <span class="keyword">if</span> (y &lt; n) <span class="keyword">break</span>;                                           <span class="comment">//augmenting path found!</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (y &lt; n) <span class="keyword">break</span>;                                               <span class="comment">//augmenting path found!</span></div><div class="line"></div><div class="line">        update_labels();                                                <span class="comment">//augmenting path not found, so improve labeling</span></div><div class="line">        wr = rd = <span class="number">0</span>;                </div><div class="line">        <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; n; y++)        </div><div class="line">        <span class="comment">//in this cycle we add edges that were added to the equality graph as a</span></div><div class="line">        <span class="comment">//result of improving the labeling, we add edge (slackx[y], y) to the tree if</span></div><div class="line">        <span class="comment">//and only if !T[y] &amp;&amp;  slack[y] == 0, also with this edge we add another one</span></div><div class="line">        <span class="comment">//(y, yx[y]) or augment the matching, if y was exposed</span></div><div class="line">            <span class="keyword">if</span> (!T[y] &amp;&amp;  slack[y] == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (yx[y] == <span class="number">-1</span>)                                        <span class="comment">//exposed vertex in Y found - augmenting path exists!</span></div><div class="line">                &#123;</div><div class="line">                    x = slackx[y];</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    T[y] = <span class="literal">true</span>;                                        <span class="comment">//else just add y to T,</span></div><div class="line">                    <span class="keyword">if</span> (!S[yx[y]])</div><div class="line">                    &#123;</div><div class="line">                        q[wr++] = yx[y];                                <span class="comment">//add vertex yx[y], which is matched with</span></div><div class="line">                                                                        <span class="comment">//y, to the queue</span></div><div class="line">                        add_to_tree(yx[y], slackx[y]);                  <span class="comment">//and add edges (x,y) and (y,</span></div><div class="line">                                                                        <span class="comment">//yx[y]) to the tree</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">if</span> (y &lt; n) <span class="keyword">break</span>;                                               <span class="comment">//augmenting path found!</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (y &lt; n)                                                          <span class="comment">//we found augmenting path!</span></div><div class="line">    &#123;</div><div class="line">        max_match++;                                                    <span class="comment">//increment matching</span></div><div class="line">        <span class="comment">//in this cycle we inverse edges along augmenting path</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> cx = x, cy = y, ty; cx != <span class="number">-2</span>; cx = prev[cx], cy = ty)</div><div class="line">        &#123;</div><div class="line">            ty = xy[cx];</div><div class="line">            yx[cy] = cx;</div><div class="line">            xy[cx] = cy;</div><div class="line">        &#125;</div><div class="line">        augment();                                                      <span class="comment">//recall function, go to step 1 of the algorithm</span></div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">//end of augment() function</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_labels</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x, y, delta = INF;             <span class="comment">//init delta as infinity</span></div><div class="line">    <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; n; y++)            <span class="comment">//calculate delta using slack</span></div><div class="line">        <span class="keyword">if</span> (!T[y])</div><div class="line">            delta = min(delta, slack[y]);</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; n; x++)            <span class="comment">//update X labels</span></div><div class="line">        <span class="keyword">if</span> (S[x]) lx[x] -= delta;</div><div class="line">    <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; n; y++)            <span class="comment">//update Y labels</span></div><div class="line">        <span class="keyword">if</span> (T[y]) ly[y] += delta;</div><div class="line">    <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; n; y++)            <span class="comment">//update slack array</span></div><div class="line">        <span class="keyword">if</span> (!T[y])</div><div class="line">            slack[y] -= delta;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_to_tree</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> prevx)</span> </span></div><div class="line"><span class="comment">//x - current vertex,prevx - vertex from X before x in the alternating path,</span></div><div class="line"><span class="comment">//so we add edges (prevx, xy[x]), (xy[x], x)</span></div><div class="line">&#123;</div><div class="line">    S[x] = <span class="literal">true</span>;                    <span class="comment">//add x to S</span></div><div class="line">    prev[x] = prevx;                <span class="comment">//we need this when augmenting</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; n; y++)    <span class="comment">//update slacks, because we add new vertex to S</span></div><div class="line">        <span class="keyword">if</span> (lx[x] + ly[y] - cost[x][y] &lt; slack[y])</div><div class="line">        &#123;</div><div class="line">            slack[y] = lx[x] + ly[y] - cost[x][y];</div><div class="line">            slackx[y] = x;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungarian</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;                      <span class="comment">//weight of the optimal matching</span></div><div class="line">    max_match = <span class="number">0</span>;                    <span class="comment">//number of vertices in current matching</span></div><div class="line">    <span class="built_in">memset</span>(xy, <span class="number">-1</span>, <span class="keyword">sizeof</span>(xy));</div><div class="line">    <span class="built_in">memset</span>(yx, <span class="number">-1</span>, <span class="keyword">sizeof</span>(yx));</div><div class="line">    init_labels();                    <span class="comment">//step 0</span></div><div class="line">    augment();                        <span class="comment">//steps 1-3</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; n; x++)       <span class="comment">//forming answer there</span></div><div class="line">        ret += cost[x][xy[x]];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树的重建</title>
      <link href="/2013/11/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%87%8D%E5%BB%BA/"/>
      <url>/2013/11/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%87%8D%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>对于二叉树，中序加其它任何一个序列（前序、后序、层序）即可重建二叉树，其它序列组合则不能重建。<a id="more"></a></p><p>下面以中序和后序为例</p><p>输入</p><p>第一行为一个整数n。</p><p>第二、三行，即已知的中序、后序遍历序列。</p><p>输出</p><p>若所给的中序、后序遍历序列的确对应于某棵二叉树，则输出其先序遍历序列。否则，输出-1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</div><div class="line"><span class="keyword">int</span> *inmap;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    <span class="keyword">struct</span> Node *left, *right;</div><div class="line"></div><div class="line">    Node(<span class="keyword">int</span> elem): data(elem), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuildInPost</span><span class="params">(Node **p, <span class="keyword">int</span> *in, <span class="keyword">int</span> beginI, <span class="keyword">int</span> endI, <span class="keyword">int</span> *post, <span class="keyword">int</span> beginP, <span class="keyword">int</span> endP)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!flag) &#123;</div><div class="line">        <span class="keyword">if</span>(beginI &gt; endI || beginP &gt; endP)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> elem = post[endP];</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        i = inmap[elem] - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (i &gt; endI) &#123;</div><div class="line">            flag = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> leftNum = i - beginI;</div><div class="line">        *p = <span class="keyword">new</span> Node(elem);</div><div class="line">        rebuildInPost(&amp;((*p)-&gt;left), in, beginI, i<span class="number">-1</span>, post, beginP, beginP+leftNum<span class="number">-1</span>);</div><div class="line">        rebuildInPost(&amp;((*p)-&gt;right), in, i+<span class="number">1</span>, endI, post, beginP+leftNum, endP<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node *root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; root-&gt;data &lt;&lt; <span class="string">" "</span>;</div><div class="line">        preOrder(root-&gt;left);</div><div class="line">        preOrder(root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeTree</span><span class="params">(Node *root)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    freeTree(root-&gt;left);</div><div class="line">    freeTree(root-&gt;right);</div><div class="line"></div><div class="line">    <span class="keyword">delete</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> num;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; num;</div><div class="line">    <span class="keyword">int</span> *in = <span class="keyword">new</span> <span class="keyword">int</span>[num];</div><div class="line">    <span class="keyword">int</span> *post = <span class="keyword">new</span> <span class="keyword">int</span>[num];</div><div class="line">    inmap = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; in[i];</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++)</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; post[i];</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</div><div class="line">        inmap[in[i - <span class="number">1</span>]] = i;</div><div class="line"></div><div class="line">    Node *root = <span class="literal">NULL</span>;</div><div class="line">    rebuildInPost(&amp;root, in, <span class="number">0</span>, num - <span class="number">1</span>, post, <span class="number">0</span>, num - <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (flag)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        preOrder(root);</div><div class="line"></div><div class="line">    freeTree(root);</div><div class="line">    <span class="keyword">delete</span> []in;</div><div class="line">    <span class="keyword">delete</span> []post;</div><div class="line">    <span class="keyword">delete</span> []inmap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ 2820 Ancient Cipher 古代密码</title>
      <link href="/2013/11/01/poj-2820-ancient-cipher-%E5%8F%A4%E4%BB%A3%E5%AF%86%E7%A0%81/"/>
      <url>/2013/11/01/poj-2820-ancient-cipher-%E5%8F%A4%E4%BB%A3%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>摘要： 巧妙的解法，借鉴了别人的 只要看字母频率就可以直接得出结论<br><a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * a, <span class="keyword">const</span> <span class="keyword">void</span> * b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> *(<span class="keyword">int</span> *)a - *(<span class="keyword">int</span> *)b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> cipher[<span class="number">105</span>];</div><div class="line">    <span class="keyword">char</span> origin[<span class="number">105</span>];</div><div class="line">    <span class="keyword">int</span> ctime[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> otime[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, cipher, origin);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(cipher); i++)</div><div class="line">    &#123;</div><div class="line">        ctime[cipher[i] - <span class="string">'A'</span>]++;</div><div class="line">        otime[origin[i] - <span class="string">'A'</span>]++;</div><div class="line">    &#125;</div><div class="line">    qsort(ctime, <span class="number">26</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</div><div class="line">    qsort(otime, <span class="number">26</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(ctime[i] != otime[i])</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NO"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"YES"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>poj 1961 求某串中所有循环前缀串的长度和循环次数</title>
      <link href="/2013/10/30/poj-1961-%E6%B1%82%E6%9F%90%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%BE%AA%E7%8E%AF%E5%89%8D%E7%BC%80%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E5%BE%AA%E7%8E%AF%E6%AC%A1%E6%95%B0/"/>
      <url>/2013/10/30/poj-1961-%E6%B1%82%E6%9F%90%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%BE%AA%E7%8E%AF%E5%89%8D%E7%BC%80%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6%E5%92%8C%E5%BE%AA%E7%8E%AF%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>kmp算法的应用，和poj 2406类似</p><p>如果长度为l的前缀是由字符串重复构成的，则next[l] != 0，且此时构成前缀的重复子串的最小长度为l - next[l]，l % (l - next[l]) = 0，最大重复次数为l / (l - next[l])。<a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></div><div class="line"><span class="keyword">char</span> str[N];</div><div class="line"><span class="keyword">int</span> next[N], len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (i &lt; len)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || str[i] == str[j])</div><div class="line">        &#123;</div><div class="line">            i++; j++;</div><div class="line">            next[i] = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> j = next[j];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len) &amp;&amp; len)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(str, <span class="number">0</span>, N);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</div><div class="line">        get_next();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>, count++);</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= len; i++)</div><div class="line">            <span class="keyword">if</span> (next[i] &amp;&amp; i % (i - next[i]) == <span class="number">0</span>)</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, i / (i - next[i]));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>约瑟夫问题 Josephus Problem</title>
      <link href="/2013/10/29/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98-josephus-problem/"/>
      <url>/2013/10/29/%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98-josephus-problem/</url>
      <content type="html"><![CDATA[<p>约瑟夫问题（Josephus Problem）</p><p>据说着名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人 开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。</p><p>然而Josephus 和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。</p><p>UVA <a href="http://uva.onlinejudge.org/external/1/133.html" target="_blank" rel="external">133</a> <a href="http://uva.onlinejudge.org/external/3/305.html" target="_blank" rel="external">305</a> <a href="http://uva.onlinejudge.org/external/4/402.html" target="_blank" rel="external">402</a> <a href="http://uva.onlinejudge.org/external/100/10015.html" target="_blank" rel="external">10015</a><a id="more"></a></p><h2 id="方法一、直接模拟求解"><a href="#方法一、直接模拟求解" class="headerlink" title="方法一、直接模拟求解"></a>方法一、直接模拟求解</h2><p>只要画两个圆圈就可以让自己与朋友免于死亡游戏，这两个圆圈内圈是排列顺序，而外圈是自杀顺序，如下图所示：</p><p><img src="/img/josephus.jpg" alt="josephus"></p><p>使用程式来求解的话，只要将阵列当作环状来处理就可以了，在阵列中由计数1开始，每找到三个无资料区就填入一个计数，直而计数达41为止，然后将阵列由索引1开始列出，就可以得知每个位置的自杀顺序，这就是约瑟夫排列，41个人而报数3的约琴夫排列如下所示：</p><p>14 36 1 38 15 2 24 30 3 16 34 4 25 17 5 40 31 6 18 26 7 37 19 8 35 27 9 20 32 10 41 21 11 28 39 12 22 33 13 29 23</p><p>由上可知，最后一个自杀的是在第31个位置，而倒数第二个自杀的要排在第16个位置，之前的人都死光了，所以他们也就不知道约琴夫与他的朋友并没有遵守游戏规则了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 41</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> man[N] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, pos = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> alive = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(count &lt;= N) &#123;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            pos = (pos+<span class="number">1</span>) % N;  <span class="comment">// 环状处理</span></div><div class="line">            <span class="keyword">if</span>(man[pos] == <span class="number">0</span>)</div><div class="line">                i++;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(i == M) &#123;  <span class="comment">// 报数为3了</span></div><div class="line">                i = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">while</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line">        man[pos] = count;</div><div class="line">        count++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n约琴夫排列："</span>);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, man[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n您想要救多少人？"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;alive);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\nL表示这%d人要放的位置：\n"</span>, alive);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(man[i] &lt;= N - alive) <span class="built_in">printf</span>(<span class="string">"D"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"L"</span>);</div><div class="line">        <span class="keyword">if</span>((i+<span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"  "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也可以用队列模拟，首先把每个人依序进队，pop (m - 1)个人，push 到队尾，第 m 人直接出队。</p><p>时间复杂度分析：推广到n个人，间隔m个人杀一个，时间复杂度为O(mn)</p><h2 id="方法二、动态规划"><a href="#方法二、动态规划" class="headerlink" title="方法二、动态规划"></a>方法二、动态规划</h2><p><a href="http://en.wikipedia.org/wiki/Josephus_problem" target="_blank" rel="external">http://en.wikipedia.org/wiki/Josephus_problem</a></p><p><img src="/img/Josephus2.png" alt="josephusDY"></p><p>除去一人后，剩下来的人重新编号，就变成了子问题了。观察原编号和新编号的关系，可得到递推公式</p><pre><code>f(n, m) = (f(n - 1, m) + m) % nf(1, m) = 0</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">josephus</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> answer = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</div><div class="line">        answer = (answer + m) % i;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"存活的人是"</span> &lt;&lt; answer &lt;&lt; <span class="string">"号"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim Youcompleteme on 64bit Windows</title>
      <link href="/2013/10/29/vim-youcompleteme-on-64bit-windows/"/>
      <url>/2013/10/29/vim-youcompleteme-on-64bit-windows/</url>
      <content type="html"><![CDATA[<p>摘要：64bit vim, YCM, 64bit clang VS 2012, 64bit Widnows<br><a id="more"></a></p><h2 id="vim-x64-for-windows"><a href="#vim-x64-for-windows" class="headerlink" title="vim x64 for windows"></a>vim x64 for windows</h2><p><a href="https://bitbucket.org/Haroogan/vim-for-windows" target="_blank" rel="external">https://bitbucket.org/Haroogan/vim-for-windows</a></p><p>或 <a href="https://bintray.com/veegee/generic/vim_x64" target="_blank" rel="external">https://bintray.com/veegee/generic/vim_x64</a></p><p>vim 插件管理 Vundle 或NeoBundle</p><p><a href="https://github.com/Shougo/neobundle.vim" target="_blank" rel="external">https://github.com/Shougo/neobundle.vim</a></p><h2 id="MinGW-环境"><a href="#MinGW-环境" class="headerlink" title="MinGW 环境"></a>MinGW 环境</h2><p><a href="https://bitbucket.org/Haroogan/vim-youcompleteme-for-windows/src" target="_blank" rel="external">https://bitbucket.org/Haroogan/vim-youcompleteme-for-windows/src</a></p><p>查找头文件目录，添加到.ycm_extra_conf.py</p><pre><code>g++ -E -x c++ - -v &lt; /dev/nullclang++ -E -x c++ - -v &lt; /dev/null</code></pre><p>Or in Windows Command Prompt:</p><pre><code>g++ -E -x c++ - -v &lt; nulclang++ -E -x c++ - -v &lt; nul</code></pre><h2 id="VS2012-环境"><a href="#VS2012-环境" class="headerlink" title="VS2012 环境"></a>VS2012 环境</h2><h3 id="LLVM-CLANG-x64-for-windows"><a href="#LLVM-CLANG-x64-for-windows" class="headerlink" title="LLVM/CLANG x64 for windows"></a>LLVM/CLANG x64 for windows</h3><p><a href="http://my.oschina.net/GIIoOS/blog/165542" target="_blank" rel="external">http://my.oschina.net/GIIoOS/blog/165542</a></p><p><a href="https://sourceforge.net/projects/clangonwin/" target="_blank" rel="external">https://sourceforge.net/projects/clangonwin/</a></p><p>需要 VS 2012</p><p>cmake</p><p>git for windows <a href="http://msysgit.github.io/" target="_blank" rel="external">http://msysgit.github.io/</a></p><h3 id="编译-YCM"><a href="#编译-YCM" class="headerlink" title="编译 YCM"></a>编译 YCM</h3><p>下面主角登场了</p><pre><code>cmake -G &quot;Visual Studio 11 Win64&quot; -DPATH_TO_LLVM_ROOT=d:\library\LLVM34 -DUSE_CLANG_COMPLETER=1 -DEXTERNAL_LIBCLANG_PATH=d:\library\LLVM34\lib\libclang.lib -DPYTHON_LIBRARY=D:\library\Python27\libs\python27.lib -DPYTHON_INCLUDE_DIR=D:\library\Python27\include . &lt;USERFOLDER&gt;\.vim\bundle\YouCompleteme\cpp</code></pre><p>_vimrc配置</p><pre><code>let g:ycm_key_list_select_completion = [&apos;&lt;C-TAB&gt;&apos;, &apos;&lt;Down&gt;&apos;]let g:ycm_key_list_previous_completion = [&apos;&lt;C-S-TAB&gt;&apos;, &apos;&lt;Up&gt;&apos;]let g:SuperTabDefaultCompletionType = &apos;&lt;C-Tab&gt;&apos;let g:ycm_global_ycm_extra_conf = &apos;PATHTO\.vim\dot.ycm_extra_conf.py&apos;</code></pre><p>dot.ycm_extra_conf.py 配置添加</p><p>‘-I’,<br>‘C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\include’</p><p>我们一般把“-I”用作自己的代码，”-isystem”用作第三代码。这样编译代码的时候，第三方代码编译时的warning，就不会显示出来，只需要专注在自己写的代码。</p><h2 id="与SuperTab、UltiSnips配合"><a href="#与SuperTab、UltiSnips配合" class="headerlink" title="与SuperTab、UltiSnips配合"></a>与SuperTab、UltiSnips配合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&quot;supertab插件</div><div class="line">let g:SuperTabDefaultCompletionType = &quot;context&quot; &quot;自动检测需要补全什么内容</div><div class="line">let g:SuperTabCompletionContexts = [&apos;s:ContextText&apos;, &apos;s:ContextDiscover&apos;]</div><div class="line">let g:SuperTabContextDiscoverDiscovery = [&quot;&amp;completefunc:&lt;c-x&gt;&lt;c-u&gt;&quot;, &quot;&amp;omnifunc:&lt;c-x&gt;&lt;c-o&gt;&quot;]</div><div class="line">&quot;let g:SuperTabContextDefaultCompletionType = &apos;&lt;c-n&gt;&apos;设置补全方式</div><div class="line">&quot;let g:SuperTabRetainCompletionType=2        &quot;记住上次的补全方式，直到退出插入模式</div><div class="line"></div><div class="line">let g:ycm_key_list_select_completion = [&apos;&lt;C-TAB&gt;&apos;, &apos;&lt;Down&gt;&apos;]</div><div class="line">let g:ycm_key_list_previous_completion = [&apos;&lt;C-S-TAB&gt;&apos;, &apos;&lt;Up&gt;&apos;]</div><div class="line">let g:SuperTabDefaultCompletionType = &apos;&lt;C-Tab&gt;&apos;</div><div class="line">&quot;let g:ycm_collect_identifiers_from_tags_files = 1</div><div class="line">&quot;let g:ycm_autoclose_preview_window_after_completion=1</div><div class="line">nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</div><div class="line"></div><div class="line">&quot;let g:UltiSnipsExpandTrigger=&quot;&lt;c-j&gt;&quot;</div><div class="line">&quot;let g:UltiSnipsJumpForwardTrigger=&quot;&lt;c-j&gt;&quot;</div><div class="line">&quot;let g:UltiSnipsJumpBackwardTrigger=&quot;&lt;c-k&gt;&quot;</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>递归算法转换为非递归算法</title>
      <link href="/2013/10/29/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E8%BD%AC%E6%8D%A2%E4%B8%BA%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2013/10/29/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E8%BD%AC%E6%8D%A2%E4%B8%BA%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>递归算法实际上是一种分而治之的方法，它把复杂问题分解为简单问题来求解。对于某些复杂问题(例如hanio塔问题)，递归算法是一种自然且合乎逻辑的解决问题的方式，但是递归算法的执行效率通常比较差。因此，在求解某些问题时，常采用递归算法来分析问题，用非递归算法来求解问题；另外，有些程序设计语言不支持递归，这就需要把递归算法转换为非递归算法。</p><p>将递归算法转换为非递归算法有两种方法，一种是直接求值，不需要回溯；另一种是不能直接求值，需要回溯。前者使用一些变量保存中间结果，称为直接转换法；后者使用栈保存中间结果，称为间接转换法，下面分别讨论这两种方法。<br><a id="more"></a></p><h2 id="直接转换法"><a href="#直接转换法" class="headerlink" title="直接转换法"></a>直接转换法</h2><p>直接转换法通常用来消除尾递归和单向递归，将递归结构用循环结构来替代。</p><p>尾递归是指在递归算法中，递归调用语句只有一个，而且是处在算法的最后。对于尾递归形式的递归算法，可以利用循环结构来替代。</p><p>单向递归是指递归算法中虽然有多处递归调用语句，但各递归调用语句的参数之间没有关系，并且这些递归调用语句都处在递归算法的最后。显然，尾递归是单向递归的特例。对于单向递归，可以设置一些变量保存中间结构，将递归结构用循环结构来替代。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//斐波那契数列</span></div><div class="line"><span class="comment">//递归</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (n= =<span class="number">1</span> | | n= =<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">　　    <span class="keyword">else</span> <span class="keyword">return</span> f(n<span class="number">-1</span>)+f(n<span class="number">-2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//非递归</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">　　<span class="keyword">int</span> i, s;</div><div class="line">      <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</div><div class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(n&lt;<span class="number">3</span>)</div><div class="line">          <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">　　<span class="keyword">int</span> s1=<span class="number">1</span>, s2=<span class="number">1</span>;</div><div class="line">　　<span class="keyword">for</span> (i=<span class="number">3</span>; i &lt;n; i++)</div><div class="line">     &#123;</div><div class="line">　　     s=s1+s2;</div><div class="line">　　     s2=s1; <span class="comment">// 保存f(n-2)的值</span></div><div class="line">　　     s1=s; <span class="comment">//保存f(n-1)的值</span></div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="基于栈结构的间接转换"><a href="#基于栈结构的间接转换" class="headerlink" title="基于栈结构的间接转换"></a>基于栈结构的间接转换</h2><p>通用的变换规则如下：假设template P(p1, p2, …,pm)是一个递归过程或函数（省略参数类型说明），其中p1, … , pm为参数，并设过程中有n个局部变量q1, …, qn和t个递归调用本过程P的语句。</p><p>(1) 在P中增设工作栈S，以存放当前层工作记录。每个工作记录包含m+n+2个数据项，其说明如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> levelstr</div><div class="line">&#123;   <span class="keyword">int</span> p0; <span class="comment">// 返回语句标号</span></div><div class="line">    ParaType p；    <span class="comment">// p用来保存返回值, 类型与递归过程返回值类型ParaType一致</span></div><div class="line">    <span class="comment">// 若递归过程为void, 则此项无意义</span></div><div class="line">    ParaType p1, ..., pm;   <span class="comment">// 按原类型定义</span></div><div class="line">    ParaType q1, ..., qn;   <span class="comment">// 按原类型定义</span></div><div class="line">&#125; s；</div></pre></td></tr></table></figure><p>(2) 在P中设置t+2个语句标号：&lt;标号0＞, &lt;标号1＞, …, &lt;标号t+1＞。其中，&lt;标号0＞设在过程体中第一个可执行的语句上，&lt;标号t+1＞设在过程体结束处之前，其余t个标号分别设置在t个调用过程语句的返回处。</p><p>(3) 在过程体的第一个执行语句（即&lt;标号0＞的语句为过程P的递归入口）之前，增加下列两个语句作为过程P的非递归入口（从调用过程P的主过程进入过程P的入口）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Stack&lt;levelstr&gt; s; <span class="comment">// 栈初始化</span></div><div class="line">s.push(&lt;标号t+<span class="number">1</span>&gt;, p, p1, ..., pm, q1, ..., qn); <span class="comment">// 当前参量进栈</span></div></pre></td></tr></table></figure><p>(4) 假设过程体中第I(i＝1, …, t)个递归调用语句为P(a1, a2, …, am)，其中，ai(i＝1, …, m)为实参。则用下列3个语句替换它。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">S.push(&lt;标号i&gt;, a1, ..., am);   <span class="comment">// 调用实参进栈</span></div><div class="line"><span class="keyword">goto</span> &lt;标号<span class="number">0</span>&gt;;   <span class="comment">// 转向递归入口处</span></div><div class="line">&lt;标号i&gt;：s.pop( );  <span class="comment">// 退栈操作</span></div></pre></td></tr></table></figure><p>由于goto语句不能转向一个语句的内部，因此，如果某个递归调用语句包含在另一个语句的内部，则应加以适当处理使所有的语句标号只出现在第一层。</p><p>如下列语句组:</p><pre><code>while(条件w)LINESw;LINES;（其中LINESw为第k个递归调用语句）</code></pre><p>可改为：</p><pre><code>&lt;标号w1&gt;：if(条件w){ s.push(...)； goto &lt;标号0&gt;;}        else goto &lt;标号w2&gt;&lt;标号k&gt;： s.pop(); goto &lt;标号w1&gt;;&lt;标号w2&gt;： LINES; ...</code></pre><p>(5) 在过程体中所有递归出口处增加语句。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s.peek().p = ...； <span class="comment">// 若递归过程有返回值，执行此赋值语句</span></div><div class="line"><span class="keyword">goto</span> s.peek().p0； <span class="comment">// 转向栈顶的返回语句标号处</span></div></pre></td></tr></table></figure><p>此goto语句的正规写法为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(s.peek( ). p0)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">case</span> &lt;标号<span class="number">0</span>&gt;:<span class="keyword">goto</span> &lt;标号<span class="number">0</span>&gt;; <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> &lt;标号<span class="number">1</span>&gt;:<span class="keyword">goto</span> &lt;标号<span class="number">1</span>&gt;; <span class="keyword">break</span>;</div><div class="line">                 ...</div><div class="line">    <span class="keyword">case</span> &lt;标号t+<span class="number">1</span>&gt;:<span class="keyword">goto</span> &lt;标号t+<span class="number">1</span>&gt;; <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>(6) 标号为t+1的语句是增添的实现函数值出栈操作的语句，作为过程P的非递归出口（即返回调用该递归过程的主过程）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;标号t+<span class="number">1</span>&gt;: temp = s.peek().p； <span class="comment">// temp为临时变量, 保存返回值</span></div><div class="line">                   <span class="comment">// 如递归无返回值, 此语句和下面的return语句可以省略</span></div><div class="line">s.pop();</div><div class="line">retutn temp；</div></pre></td></tr></table></figure><p>(7) 切记实现参量“当前层化”，过程体中出现的所有参变量和局部变量均以栈顶工作记录中相应的数据项代替。</p><p>(8) 若算法中有复合递归调用的语句，则应增设局部变量消除复合调用，即，将形如f(…, f(…), …);的语句改写为&lt;局部变量＞：f(…);…f(…, &lt;局部变量＞,…);的形式。</p><p>(9) 经过上述变换规则得到的不含递归的算法尚需进行最后一步变换，即简化不必要的操作，如消去冗余进栈的内容等，并画出相应的流程图，从流程图中找出各循环的循环体和循环条件，从而消去goto语句，得到结构清晰的非递归算法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//汉诺塔递归</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> n，<span class="keyword">char</span> x，y，z)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) move(x,<span class="number">1</span>,z); <span class="comment">// 将编号为1的盘子从x移到z</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        Hanoi(n<span class="number">-1</span>,x,z,y);</div><div class="line">        Move(x,n,z);</div><div class="line">        Hanoi(n<span class="number">-1</span>,y,x,z);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//机械转换</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> x, y, z)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> levelstr</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> adr, ptrn; <span class="keyword">char</span> xp, yp, zp；</div><div class="line">    &#125; *s, currentp;</div><div class="line">    s= <span class="keyword">new</span> Stack(m*m<span class="number">-1</span>);    <span class="comment">// m*m-1是栈的初始化大小</span></div><div class="line">    s.push(<span class="number">3</span>, n, x, y, z);</div><div class="line">    <span class="number">0</span>:currentp = s.peek();  <span class="comment">// 局部变量currentp用来保存栈顶元素</span></div><div class="line">        <span class="keyword">if</span>(currentp.prtn == <span class="number">1</span>)&#123;</div><div class="line">          move(currentp.xp, <span class="number">1</span>, currentp.Zp);</div><div class="line">          <span class="keyword">goto</span> currentp.adr;</div><div class="line">        &#125;</div><div class="line">        s.push(<span class="number">1</span>, currentp.ptrn<span class="number">-1</span>, currentp.xp,</div><div class="line">              currentp.zp, cutrretnp.Yp);</div><div class="line">        <span class="keyword">goto</span> <span class="number">0</span>;</div><div class="line">    <span class="number">1</span>:s.pop();</div><div class="line">        currentp = s.peek();</div><div class="line">        move(currentp.Xp,currentp.Ptrn, currentp.zp);</div><div class="line">        s.push(<span class="number">2</span>, currentp.ptrn –<span class="number">1</span>, currentp.yp,</div><div class="line">              currentp.xp, currentp. zp);</div><div class="line">        <span class="keyword">goto</span> <span class="number">0</span>;</div><div class="line">    <span class="number">2</span>:s.pop();</div><div class="line">        currentp = s.peek();</div><div class="line">        <span class="keyword">goto</span> currentp.adr;</div><div class="line">    <span class="number">3</span>:s.pop();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//优化，去goto</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> x, y, z)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> levelstr</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> ptrn; <span class="keyword">char</span> xp, yp, zp;</div><div class="line">    &#125; s[arrmax];</div><div class="line">    <span class="keyword">int</span> top; <span class="keyword">char</span> temp; top = <span class="number">0</span>;</div><div class="line">    s[top] = (n, x, y, z); <span class="comment">// 栈初始化</span></div><div class="line">    <span class="keyword">while</span>(!((top==<span class="number">0</span>)&amp;&amp;(s[top].ptrn==<span class="number">1</span>)))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(s[top].ptrn &gt; <span class="number">1</span>)</div><div class="line">            s[top++] =(s[top].ptrn<span class="number">-1</span>, s[top].xp,</div><div class="line">                        s[top].zp, s[top].yp);</div><div class="line">        move(s[top].xp, <span class="number">1</span>, s[top].zp);</div><div class="line">        <span class="keyword">if</span> (top &gt; <span class="number">0</span>) &#123;</div><div class="line">            top--;</div><div class="line">            move(s[top].xp, s[top].ptrn, s[top].zp);</div><div class="line">            s[top].ptrn--;</div><div class="line">            temp = s[top].xp;</div><div class="line">            s[top].xp = s[top].Yp;</div><div class="line">            s[top].yp = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    move(s[top].xp, <span class="number">1</span>, s[top].zp);</div><div class="line">    top--;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim 插件配置攻略</title>
      <link href="/2013/10/26/vim-%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E6%94%BB%E7%95%A5/"/>
      <url>/2013/10/26/vim-%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE%E6%94%BB%E7%95%A5/</url>
      <content type="html"><![CDATA[<p>网友 k-vim 的配置 <a href="https://github.com/wklken" target="_blank" rel="external">https://github.com/wklken</a></p><blockquote><p>给人一条Vim 命令，他能折腾一晚上；告诉他怎么自定义Vim 命令，他能捣腾一辈子</p><p>生命不息,折腾不止 (╯‵□′)╯︵┻━┻)</p><p>编辑器之神 = 生产力(效率为王) + 性感(界面快捷键) + 装x神器</p></blockquote><h3 id="vim基本用法"><a href="#vim基本用法" class="headerlink" title="vim基本用法"></a>vim基本用法</h3><p>初学者: <a href="http://blog.csdn.net/wklken/article/details/7533272" target="_blank" rel="external">vim训练稿</a><br>几年前的三月份,第一次正儿八经开始使用vim,后来整理了一份,对着敲几遍,训练稿</p><p>推荐: 耗子叔的 <a href="http://coolshell.cn/articles/5426.html" target="_blank" rel="external">简明vim练级攻略</a></p><p>或者,玩游戏 <a href="http://vim-adventures.com/" target="_blank" rel="external">vim大冒险</a></p><pre><code>二八定律,关注可以最大提升自身生产力的那20%插件,具体要亲自实践有什么问题,先看插件文档说明-&gt;代码选项-&gt;github上的issues-&gt;google it你遇到的问题,一定别人也遇到了,大部分可解决,少部分无解….</code></pre><p>   文章: <a href="http://www.kunli.info/2013/08/13/vim/" target="_blank" rel="external">不要复杂化vim</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>中缀表达式求值</title>
      <link href="/2013/10/23/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
      <url>/2013/10/23/%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>给定一个中缀表达式，求出该表达式的值。</p><p>要求支持“加减乘除 + - * /、取余 %、幂运算 ^、一元正负号 + -、括号 ()、数的科学表示法符号 E e”，其中含有一元操作符’+ -‘，也含有从右向左结合性的操作符’^’，注意操作数的位数可以为多位。<br><a id="more"></a></p><h2 id="直接计算中缀表达式"><a href="#直接计算中缀表达式" class="headerlink" title="直接计算中缀表达式"></a>直接计算中缀表达式</h2><p>延迟缓冲：自左向右扫描表达式，用栈记录已扫描的部分（含已执行运算的结果）。在每一字符处，while（栈的顶部存在可优先计算的子表达式），该子表达式退栈；计算其数值计算结果进栈。当前字符进栈，转入下一字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">evaluate</span><span class="params">(<span class="keyword">char</span>* S, <span class="keyword">char</span>*&amp; RPN)</span> </span>&#123; <span class="comment">//对（已剔除白空格的）表达式S求值，并转换为逆波兰式RPN</span></div><div class="line">   Stack&lt;<span class="keyword">float</span>&gt; opnd; Stack&lt;<span class="keyword">char</span>&gt; optr; <span class="comment">//运算数栈、运算符栈</span></div><div class="line">   optr.push(<span class="string">'\0'</span>); <span class="comment">//尾哨兵'\0'也作为头哨兵首先入栈</span></div><div class="line">   <span class="keyword">while</span> (!optr.empty()) &#123; <span class="comment">//在运算符栈非空之前，逐个处理表达式中各字符</span></div><div class="line">      <span class="keyword">if</span> (<span class="built_in">isdigit</span>(*S)) &#123; <span class="comment">//若当前字符为操作数，则</span></div><div class="line">         readNumber(S, opnd); append(RPN, opnd.top()); <span class="comment">//读入操作数，并将其接至RPN末尾</span></div><div class="line">      &#125; <span class="keyword">else</span> <span class="comment">//若当前字符为运算符，则</span></div><div class="line">         <span class="keyword">switch</span>(orderBetween(optr.top(), *S)) &#123; <span class="comment">//视其与栈顶运算符之间优先级高低分别处理</span></div><div class="line">            <span class="keyword">case</span> <span class="string">'&lt;'</span>: <span class="comment">//栈顶运算符优先级更低时</span></div><div class="line">               optr.push(*S); S++; <span class="comment">//计算推迟，当前运算符进栈</span></div><div class="line">               <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'='</span>: <span class="comment">//优先级相等（当前运算符为右括号或者尾部哨兵'\0'）时</span></div><div class="line">               optr.pop(); S++; <span class="comment">//脱括号并接收下一个字符</span></div><div class="line">               <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'&gt;'</span>: &#123; <span class="comment">//栈顶运算符优先级更高时，可实施相应的计算，并将结果重新入栈</span></div><div class="line">               <span class="keyword">char</span> op = optr.pop(); append(RPN, op); <span class="comment">//栈顶运算符出栈并续接至RPN末尾</span></div><div class="line">               <span class="keyword">if</span> (<span class="string">'!'</span> == op) &#123; <span class="comment">//若属于一元运算符</span></div><div class="line">                  <span class="keyword">float</span> pOpnd = opnd.pop(); <span class="comment">//只需取出一个操作数，并</span></div><div class="line">                  opnd.push(calcu(op, pOpnd)); <span class="comment">//实施一元计算，结果入栈</span></div><div class="line">               &#125; <span class="keyword">else</span> &#123; <span class="comment">//对于其它（二元）运算符</span></div><div class="line">                  <span class="keyword">float</span> pOpnd2 = opnd.pop(), pOpnd1 = opnd.pop(); <span class="comment">//取出后、前操作数</span></div><div class="line">                  opnd.push(calcu(pOpnd1, op, pOpnd2)); <span class="comment">//实施二元计算，结果入栈</span></div><div class="line">              &#125;</div><div class="line">              <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">default</span> : <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">         &#125;<span class="comment">//switch</span></div><div class="line">   &#125;<span class="comment">//while</span></div><div class="line">   <span class="keyword">return</span> opnd.pop(); <span class="comment">//弹出并返回最后的计算结果</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N_OPTR 9 <span class="comment">//运算符总数</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;ADD, SUB, MUL, DIV, POW, FAC, L_P, R_P, EOE&#125; Operator; <span class="comment">//运算符集合</span></div><div class="line"><span class="comment">//加、减、乘、除、乘方、阶乘、左括号、右括号、起始符与终止符</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> pri[N_OPTR][N_OPTR] = &#123; <span class="comment">//运算符优先等级 [栈顶] [当前]</span></div><div class="line"><span class="comment">/*            |-------------- 当前运算符 --------------|*/</span></div><div class="line"><span class="comment">/*            +    -    *    /    ^    !    (    )    \0*/</span></div><div class="line"><span class="comment">/* --  + */</span>  <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>,</div><div class="line"><span class="comment">/* |   - */</span>  <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>,</div><div class="line"><span class="comment">/* 栈  * */</span>  <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>,</div><div class="line"><span class="comment">/* 顶  / */</span>  <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>,</div><div class="line"><span class="comment">/* 运  ^ */</span>  <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>,</div><div class="line"><span class="comment">/* 算  ! */</span>  <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>, <span class="string">' '</span>, <span class="string">'&gt;'</span>, <span class="string">'&gt;'</span>,</div><div class="line"><span class="comment">/* 符  ( */</span>  <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'='</span>, <span class="string">' '</span>,</div><div class="line"><span class="comment">/* |   ) */</span>  <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>,</div><div class="line"><span class="comment">/* -- \0 */</span>  <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">'&lt;'</span>, <span class="string">' '</span>, <span class="string">'='</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Operator <span class="title">optr2rank</span><span class="params">(<span class="keyword">char</span> op)</span> </span>&#123; <span class="comment">//由运算符转译出编号</span></div><div class="line"><span class="keyword">switch</span> (op) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'+'</span> : <span class="keyword">return</span> ADD; <span class="comment">//加</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'-'</span> : <span class="keyword">return</span> SUB; <span class="comment">//减</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'*'</span> : <span class="keyword">return</span> MUL; <span class="comment">//乘</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'/'</span> : <span class="keyword">return</span> DIV; <span class="comment">//除</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'^'</span> : <span class="keyword">return</span> POW; <span class="comment">//乘方</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'!'</span> : <span class="keyword">return</span> FAC; <span class="comment">//阶乘</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'('</span> : <span class="keyword">return</span> L_P; <span class="comment">//左括号</span></div><div class="line">      <span class="keyword">case</span> <span class="string">')'</span> : <span class="keyword">return</span> R_P; <span class="comment">//右括号</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'\0'</span>: <span class="keyword">return</span> EOE; <span class="comment">//起始符与终止符</span></div><div class="line">      <span class="keyword">default</span>  : <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="comment">//未知运算符</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">orderBetween</span><span class="params">(<span class="keyword">char</span> op1, <span class="keyword">char</span> op2)</span> <span class="comment">//比较两个运算符之间的优先级</span></span></div><div class="line">&#123; <span class="keyword">return</span> pri[optr2rank(op1)][optr2rank(op2)]; &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readNumber</span><span class="params">(<span class="keyword">char</span>*&amp; p, Stack&lt;<span class="keyword">float</span>&gt;&amp; stk)</span> </span>&#123; <span class="comment">//将起始于p的子串解析为数值，并存入操作数栈</span></div><div class="line">   stk.push((<span class="keyword">float</span>)(*p - <span class="string">'0'</span>)); <span class="comment">//当前数位对应的数值进栈</span></div><div class="line">   <span class="keyword">while</span> (<span class="built_in">isdigit</span>(*(++p))) <span class="comment">//只要后续还有紧邻的数字（即多位整数的情况），则</span></div><div class="line">      stk.push(stk.pop() * <span class="number">10</span> + (*p - <span class="string">'0'</span>)); <span class="comment">//弹出原操作数并追加新数位后，新数值重新入栈</span></div><div class="line">   <span class="keyword">if</span> (<span class="string">'.'</span> != *p) <span class="keyword">return</span>; <span class="comment">//此后非小数点，则意味着当前操作数解析完成</span></div><div class="line">   <span class="keyword">float</span> fraction = <span class="number">1</span>; <span class="comment">//否则，意味着还有小数部分</span></div><div class="line">   <span class="keyword">while</span> (<span class="built_in">isdigit</span>(*(++p))) <span class="comment">//逐位加入</span></div><div class="line">      stk.push(stk.pop() + (*p - <span class="string">'0'</span>)*(fraction /= <span class="number">10</span>)); <span class="comment">//小数部分</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">calcu</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">char</span> op, <span class="keyword">float</span> b)</span> </span>&#123; <span class="comment">//执行二元运算</span></div><div class="line"><span class="keyword">switch</span> (op) &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">'+'</span> : <span class="keyword">return</span> a + b;</div><div class="line"><span class="keyword">case</span> <span class="string">'-'</span> : <span class="keyword">return</span> a - b;</div><div class="line"><span class="keyword">case</span> <span class="string">'*'</span> : <span class="keyword">return</span> a * b;</div><div class="line">      <span class="keyword">case</span> <span class="string">'/'</span> : <span class="keyword">if</span> (<span class="number">0</span>==b) <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="keyword">return</span> a/b; <span class="comment">//注意：如此判浮点数为零可能不安全</span></div><div class="line">      <span class="keyword">case</span> <span class="string">'^'</span> : <span class="keyword">return</span> <span class="built_in">pow</span>(a, b);</div><div class="line">      <span class="keyword">default</span>  : <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">calcu</span><span class="params">(<span class="keyword">char</span> op, <span class="keyword">float</span> b)</span> </span>&#123; <span class="comment">//执行一元运算</span></div><div class="line"><span class="keyword">switch</span> (op) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'!'</span> : <span class="keyword">return</span> (<span class="keyword">float</span>)facI((<span class="keyword">int</span>)b); <span class="comment">//目前仅有阶乘，可照此方式添加</span></div><div class="line">      <span class="keyword">default</span>  : <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">char</span>*&amp; rpn, <span class="keyword">float</span> opnd)</span> </span>&#123; <span class="comment">//将操作数接至RPN末尾</span></div><div class="line">   <span class="keyword">int</span> n = <span class="built_in">strlen</span>(rpn); <span class="comment">//RPN当前长度（以'\0'结尾，长度n + 1）</span></div><div class="line">   <span class="keyword">char</span> buf[<span class="number">64</span>];</div><div class="line">   <span class="keyword">if</span> (opnd != (<span class="keyword">float</span>)(<span class="keyword">int</span>)opnd) <span class="built_in">sprintf</span>(buf, <span class="string">"%.2f \0"</span>, opnd); <span class="comment">//浮点格式，或</span></div><div class="line">   <span class="keyword">else</span>                          <span class="built_in">sprintf</span>(buf, <span class="string">"%d \0"</span>, (<span class="keyword">int</span>)opnd); <span class="comment">//整数格式</span></div><div class="line">   rpn = (<span class="keyword">char</span>*) <span class="built_in">realloc</span>(rpn, <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (n + <span class="built_in">strlen</span>(buf) + <span class="number">1</span>)); <span class="comment">//扩展空间</span></div><div class="line">   <span class="built_in">strcat</span>(rpn, buf); <span class="comment">//RPN加长</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">char</span>*&amp; rpn, <span class="keyword">char</span> optr)</span> </span>&#123; <span class="comment">//将运算符接至RPN末尾</span></div><div class="line">   <span class="keyword">int</span> n = <span class="built_in">strlen</span>(rpn); <span class="comment">//RPN当前长度（以'\0'结尾，长度n + 1）</span></div><div class="line">   rpn = (<span class="keyword">char</span>*) <span class="built_in">realloc</span>(rpn, <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (n + <span class="number">3</span>)); <span class="comment">//扩展空间</span></div><div class="line">   <span class="built_in">sprintf</span>(rpn + n, <span class="string">"%c "</span>, optr); rpn[n + <span class="number">2</span>] = <span class="string">'\0'</span>; <span class="comment">//接入指定的运算符</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="中缀转后缀"><a href="#中缀转后缀" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h2><p>首先介绍一个人工转换的方法，假设有一个中缀表达式a+b*c-(d+e)</p><ol><li><p>首先将这个中缀表达式的所有运算加括号((a+(b*c))-(d+e))</p></li><li><p>然后将所有运算符放到括号后面，这样就变成了((a(bc)* )+ (de)+ )-</p></li><li><p>把所有括号去掉abc*+de+-，最后得出的结果就是后缀表达式</p></li></ol><p>上面这个方法可以在比如做题分析的时候用人脑的时候使用，接下来介绍用程序实现将中缀转换成后缀表达式的思路</p><p>预处理中缀表达式</p><ol><li><p>判断是否有不能处理的字符；</p></li><li><p>去除所有的空格；</p></li><li><p>处理一元操作符’+’和’-‘：</p><p> 3.1 如果是在开始位置，在开始处添加”0”；</p><p> 3.2 如果是在“非数字字符”（右括号‘)’除外）之后，那么先在一元操作符前插入”(0”，然后在一个“完整的数字”或者“括号后面”添加右括号”)”；</p></li></ol><p>中缀转后缀</p><ol><li>如果是操作数，读取其所有的位，然后进入后缀表达式队列；</li><li>如果是操作符( + – * / ^ % )<br>2.1 如果“操作符栈”为空，直接入栈；<br>2.2 如果当前操作符优先级&gt;栈顶元素优先级，那么入栈；<br>2.3 如果当前操作符优先级&lt;栈顶元素优先级，那么栈顶操作符出栈，循环执行；<br>2.4 如果当前操作符优先级=栈顶元素优先级，如果当前元素是右结合性，那么入栈；否则，栈顶元素出栈；循环执行。</li><li>如果是左括号’(‘，直接入栈</li><li>如果是右括号’)’，如果栈非空，那么栈顶元素出栈，直到遇到左括号’(‘；</li><li>遍历结束中，将操作符栈中的元素依次出栈，添加到后缀表达式队列中。</li></ol><p>参考:  <a href="http://blog.csdn.net/daheiantian/article/details/6553713" target="_blank" rel="external">http://blog.csdn.net/daheiantian/article/details/6553713</a></p>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速排序 QuickSort</title>
      <link href="/2013/10/21/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quicksort/"/>
      <url>/2013/10/21/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-quicksort/</url>
      <content type="html"><![CDATA[<p>7-4 快速排序中的堆栈深度</p><p>7.1节中QUICKSORT算法包含有两个对其自身的递归调用。在调用PARTITION后，左边的子数组和右边的子数组分别被递归调用。QUICKSORT中的第二次递归调用并不是必须的；可以用迭代控制来代替它。这种技术称作尾递归，大多数的编译程序都加以了采用。考虑下面这个快速排序的版本，它模拟了尾递归：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">QUICKSORT&apos;(A, p, r)</div><div class="line">1  while p&lt;r</div><div class="line">2      do q &lt;- PARTITION(A, p, r)</div><div class="line">3         QUICKSORT(A, p, q-1)</div><div class="line">4         p &lt;- q+1</div></pre></td></tr></table></figure><p>a) 论证QUICKSORT’(A, 1, Length[A])能正确地对数组A进行排序。</p><p>首先证明QUICKSORT(A, 1, Length[A])能正确地对数组A进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">QUICKSORT(A, p, r)</div><div class="line">1  if p&lt;r</div><div class="line">2      then q &lt;- PARTITION(A, p, r)</div><div class="line">3           QUICKSORT(A, p, q-1)</div><div class="line">4           QUICKSORT(A, q+1, r)</div></pre></td></tr></table></figure><p>循环不变式：QUICKSORT(A, p, r)调用后，A[p..r]中的元素是有序的。</p><p>初始化：r-p=1时，调用QUICK(A, p, r)。因为p&lt;r，故进入if语句块，调用q&lt;-PARTITION(A, p, r)后，A[p..q-1]的元素一定小于A[q]，A[q+1..r]的元素一定大于A[q]，又因为A[p..r]此时只包含两个元素，所以在调用q&lt;-PARTITION(A, p, r)后A[p..r]有序。因为此时q只能等于p或r，所以下面的QUICKSORT(A, p, q-1)、QUICKSORT(A, q+1, r)将不做任何操作。显然，循环不变式是成立的。</p><p>保持：对任意数组A下标范围内的p、r调用QUICKSORT(A, p, r)时，假设循环不变式成立，于是QUICKSORT(A, p, q-1)使A[p..q-1]有序，QUICKSORT(A, q+1, r)使A[q+1..r]有序。并且由于调用了q&lt;-PARTITION(A, p, r)，A[p..q-1]的元素都小于A[q]，A[q+1..r]的元素都大于A[q]，于是数组A[p..r]就有序了。</p><p>终止：最外层QUICKSORT(A, 1, Length[A])调用结束时，根据循环不变式，A[1..n]有序。</p><p>QUICKSORT’调用与QUICKSORT相同的PARTITION，然后都以(A, p, q-1)调用自身。QUICKSORT以(A, q+1, r)再次调用自身，而QUICKSORT’则是让p&lt;-q+1后执行了while循环的另一次迭代。实际上不难看出，这一操作与QUICKSORT的第二次自身调用效果相同。于是QUICKSORT’(A, 1, Length[A])能正确对数组A进行排序。</p><p>c) 修改QUICKSORT’的代码，使其最坏情况栈深度为Θ(lgn)。保持算法的O(nlgn)期望运行时间不变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">QUICKSORT&apos;&apos;(A, p, r)</div><div class="line">1 while p&lt;r</div><div class="line">2     do q &lt;- PARTITION(A, p, r)</div><div class="line">3        if q-p&lt;r-q</div><div class="line">4            then QUICKSORT&apos;&apos;(A, p, q-1)</div><div class="line">5                 p &lt;- q+1</div><div class="line">6            else QUICKSORT&apos;&apos;(A, q+1, r)</div><div class="line">7                 r &lt;- q-1</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ 1664 放苹果</title>
      <link href="/2013/10/20/poj-1664-%E6%94%BE%E8%8B%B9%E6%9E%9C/"/>
      <url>/2013/10/20/poj-1664-%E6%94%BE%E8%8B%B9%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法？（用K表示）5，1，1和1，5，1 是同一种分法。</p><p>自己想了半天，什么排列组合之类的，后来去搜题解，才知道是用递归……<br><a id="more"></a></p><p>动态规划：其实这根将一个整数m分成n个整数之和是类似的。</p><p>另外一种表述是，给定了任意数量的现金，我们能写出一个程序，计算出所有换零钱方式的和数吗？（见《计算机程序的构造和解释》 p26）</p><p>设f[m][n]为将m分成最多n份的方案数，且其中的方案不重复，即每个方案前一个份的值一定不会比后面的大。则有：</p><pre><code>f(m,n) = f(m,n - 1) + f(m - n,n)       = 1 // m== 0 || n == 1       = 0 // m &lt; 0</code></pre><p>f(m,n - 1)相当于第一盘子中为0，只用将数分成n - 1份即可。因为0不会大于任何数，相当于f(m,n - 1)中的方案前面加一个为0的盘子，而且不违背f的定义。所以f(m,n - 1)一定是f(m,n)的方案的一部分，即含有0的方案数。</p><p>f(m - n,n)相当于在每个盘子中加一个数1。因为每个盘子中加一个数1不会影响f(m,n - 1)中的方案的可行性，也不会影响f的定义。所以f(m - n,n)一定是f(m,n)的方案的一部分，即不含有0的方案数。(先把每个都放一个苹果，这样问题就转化为：m-n个苹果放进n个盘子里，盘子允许空)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dynamic</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> dynamic(m, n - <span class="number">1</span>) + dynamic(m - n, n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> m, n, num;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; num;</div><div class="line"><span class="keyword">while</span> (num--) &#123;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; dynamic(m, n) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac OSX 下 java 环境</title>
      <link href="/2013/09/28/mac-osx-%E4%B8%8B-java-%E7%8E%AF%E5%A2%83/"/>
      <url>/2013/09/28/mac-osx-%E4%B8%8B-java-%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="解决javac和java命令在Mac-OSX终端里的乱码问题"><a href="#解决javac和java命令在Mac-OSX终端里的乱码问题" class="headerlink" title="解决javac和java命令在Mac OSX终端里的乱码问题"></a>解决javac和java命令在Mac OSX终端里的乱码问题</h2><p>解决方法有3个：</p><p>1）指定输出的编码为UTF-8</p><pre><code>javac -J-Dfile.encoding=UTF-8</code></pre><p>.profile添加</p><pre><code>export _JAVA_OPTIONS=&quot;-Dfile.encoding=UTF-8&quot;</code></pre><p>2）输出英文</p><pre><code>export LC_ALL=en</code></pre><p>3）通过iconv转码</p><pre><code>javac something|iconv -f GBK -t UTF-8</code></pre><h2 id="Sublime-Text-编译运行-Java"><a href="#Sublime-Text-编译运行-Java" class="headerlink" title="Sublime Text 编译运行 Java"></a>Sublime Text 编译运行 Java</h2><pre><code>{  &quot;cmd&quot;: [&quot;javac \&quot;$file_name\&quot; &amp;&amp; java \&quot;$file_base_name\&quot;&quot;],  &quot;shell&quot;: true,  &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,  &quot;selector&quot;: &quot;source.java&quot;}</code></pre>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ 1007 DNA逆序对</title>
      <link href="/2013/09/27/poj-1007-dna%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
      <url>/2013/09/27/poj-1007-dna%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
      <content type="html"><![CDATA[<p>题意就是让你求逆序对，然后按照逆序对的大小将字符串输出，如果逆序对数目一样，则不要改变原来的顺序输出。</p><p>至于逆序对数…对于”ZWQM”，因为Z&gt;W&gt;Q&gt;M，则一共有6个逆序对:ZW、ZQ、ZM、WQ、WM、QM…就这样暴力算出每个字符串的逆序对数目，然后排序就行了。下面程序中用的是最简单的冒泡排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="keyword">int</span> max = <span class="number">0</span>, min;</div><div class="line">    <span class="keyword">int</span> i, j, k;</div><div class="line">    <span class="keyword">char</span> item[<span class="number">101</span>][<span class="number">51</span>];</div><div class="line">    <span class="keyword">int</span> len[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> flag[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, item[i]);</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">            <span class="keyword">for</span> (k = j + <span class="number">1</span>; k &lt; n; k++)</div><div class="line">                <span class="keyword">if</span> (item[i][j] &gt; item[i][k]) len[i]++;</div><div class="line">        <span class="keyword">if</span> (len[i] &gt; max) max = len[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">    &#123;</div><div class="line">        min = max + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++)</div><div class="line">            <span class="keyword">if</span> (len[j] &lt; min &amp;&amp; (flag[j] == <span class="number">0</span>))</div><div class="line">            &#123;</div><div class="line">                min = len[j];</div><div class="line">                k = j;</div><div class="line">            &#125;</div><div class="line">        flag[k] = <span class="number">1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, item[k]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ 1006 Biorhythms</title>
      <link href="/2013/09/26/poj-1006-biorhythms/"/>
      <url>/2013/09/26/poj-1006-biorhythms/</url>
      <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>人自出生起就有体力，情感和智力三个生理周期，分别为23，28和33天。一个周期内有一天为峰值，在这一天，人在对应的方面（体力，情感或智力）表现最好。通常这三个周期的峰值不会是同一天。现在给出三个日期，分别对应于体力，情感，智力出现峰值的日期。然后再给出一个起始日期，要求从这一天开始，算出最少再过多少天后三个峰值同时出现。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先我们要知道，任意两个峰值之间一定相距整数倍的周期。假设一年的第N天达到峰值，则下次达到峰值的时间为N+Tk(T是周期，k是任意正整数)。所以，三个峰值同时出现的那一天(S)应满足</p><pre><code>S = N1 + T1*k1 = N2 + T2*k2 = N3 + T3*k3</code></pre><p>N1,N2,N3分别为为体力，情感，智力出现峰值的日期， T1，T2,T3分别为体力，情感，智力周期。 我们需要求出k1,k2,k3三个非负整数使上面的等式成立。</p><p>想直接求出k1,k2,k3貌似很难，但是我们的目的是求出S， 可以考虑从结果逆推。根据上面的等式，S满足三个要求：除以T1余数为N1，除以T2余数为N2，除以T3余数为N3。这样我们就把问题转化为求一个最小数，该数除以T1余N1，除以T2余N2,除以T3余N3。这就是著名的中国剩余定理，我们的老祖宗在几千年前已经对这个问题想出了一个精妙的解法。依据此解法的算法，时间复杂度可达到O(1)。下面就介绍一下中国剩余定理。</p><h2 id="中国剩余定理介绍"><a href="#中国剩余定理介绍" class="headerlink" title="中国剩余定理介绍"></a>中国剩余定理介绍</h2><p>在《孙子算经》中有这样一个问题：“今有物不知其数，三三数之剩二（除以3余2），五五数之剩三（除以5余3），七七数之剩二（除以7余2），问物几何？”这个问题称为“孙子问题”，该问题的一般解法国际上称为“中国剩余定理”。具体解法分三步：</p><p>找出三个数：从3和5的公倍数中找出被7除余1的最小数15，从3和7的公倍数中找出被5除余1 的最小数21，最后从5和7的公倍数中找出除3余1的最小数70。<br>用15乘以2（2为最终结果除以7的余数），用21乘以3（3为最终结果除以5的余数），同理，用70乘以2（2为最终结果除以3的余数），然后把三个乘积相加（15<em>2+21</em>3+70*2）得到和233。<br>用233除以3，5，7三个数的最小公倍数105，得到余数23，即233%105=23。这个余数23就是符合条件的最小数。</p><p>就这么简单。我们在感叹神奇的同时不禁想知道古人是如何想到这个方法的，有什么基本的数学依据吗？</p><h2 id="中国剩余定理分析"><a href="#中国剩余定理分析" class="headerlink" title="中国剩余定理分析"></a>中国剩余定理分析</h2><p>我们将“孙子问题”拆分成几个简单的小问题，从零开始，试图揣测古人是如何推导出这个解法的。</p><p>首先，我们假设n1是满足除以3余2的一个数，比如2，5，8等等，也就是满足3*k+2（k&gt;=0）的一个任意数。同样，我们假设n2是满足除以5余3的一个数，n3是满足除以7余2的一个数。</p><p>有了前面的假设，我们先从n1这个角度出发，已知n1满足除以3余2，能不能使得 n1+n2 的和仍然满足除以3余2？进而使得n1+n2+n3的和仍然满足除以3余2？</p><p>这就牵涉到一个最基本数学定理，如果有a%b=c,则有(a+kb)%b=c(k为非零整数)，换句话说，如果一个除法运算的余数为c，那么被除数与k倍的除数相加（或相减）的和（差）再与除数相除，余数不变。这个是很好证明的。</p><p>以此定理为依据，如果n2是3的倍数，n1+n2就依然满足除以3余2。同理，如果n3也是3的倍数，那么n1+n2+n3的和就满足除以3余2。这是从n1的角度考虑的，再从n2，n3的角度出发，我们可推导出以下三点：</p><ul><li>为使n1+n2+n3的和满足除以3余2，n2和n3必须是3的倍数。</li><li>为使n1+n2+n3的和满足除以5余3，n1和n3必须是5的倍数。</li><li>为使n1+n2+n3的和满足除以7余2，n1和n2必须是7的倍数。</li></ul><p>因此，为使n1+n2+n3的和作为“孙子问题”的一个最终解，需满足：</p><ul><li>n1除以3余2，且是5和7的公倍数。</li><li>n2除以5余3，且是3和7的公倍数。</li><li>n3除以7余2，且是3和5的公倍数。</li></ul><p>所以，孙子问题解法的本质是从5和7的公倍数中找一个除以3余2的数n1，从3和7的公倍数中找一个除以5余3的数n2，从3和5的公倍数中找一个除以7余2的数n3，再将三个数相加得到解。在求n1，n2，n3时又用了一个小技巧，以n1为例，并非从5和7的公倍数中直接找一个除以3余2的数，而是先找一个除以3余1的数，再乘以2。</p><p>这里又有一个数学公式，如果a%b=c，那么（a*k）%b=a%b+a%b+…+a%b=c+c+…+c=kc（k&gt;0）,也就是说，如果一个除法的余数为c，那么被除数的k倍与除数相除的余数为kc。展开式中已证明。</p><p>最后，我们还要清楚一点，n1+n2+n3只是问题的一个解，并不是最小的解。如何得到最小解？我们只需要从中最大限度的减掉掉3，5，7的公倍数105即可。道理就是前面讲过的定理“如果a%b=c,则有(a-kb)%b=c”。所以（n1+n2+n3）%105就是最终的最小解。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过分析发现，中国剩余定理的孙子解法并没有什么高深的技巧，就是以下两个基本数学定理的灵活运用：</p><ul><li>如果 a%b=c , 则有 (a+kb)%b=c (k为非零整数)。</li><li>如果 a%b=c，那么 (a*k)%b=kc (k为大于零的整数)。</li></ul><p>再看我们这道题，读入p,e,i,d 4个整数</p><p>已知(n+d)%23=p;   (n+d)%28=e;   (n+d)%33=i ,求n 。</p><p>解法就是：</p><p>已知(n+d)%23=p;   (n+d)%28=e;   (n+d)%33=i</p><p>使33×28×a被23除余1，用33×28×8=5544；</p><p>使23×33×b被28除余1，用23×33×19=14421；</p><p>使23×28×c被33除余1，用23×28×2=1288。</p><p>因此有（5544×p+14421×e+1288×i）% lcm(23,28,33) =n+d</p><p>又23、28、33互质，即lcm(23,28,33)= 21252;</p><p>所以有n=（5544×p+14421×e+1288×i-d）%21252</p><p>本题所求的是最小整数解，避免n为负，因此最后结果为n= [n+21252]% 21252</p><p>那么最终求解n的表达式就是：<br>n=(5544<em>p+14421</em>e+1288*i-d+21252)%21252</p><p>参考：</p><p><a href="http://www.cnblogs.com/walker01/archive/2010/01/23/1654880.html" target="_blank" rel="external">http://www.cnblogs.com/walker01/archive/2010/01/23/1654880.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Generate Ctags Files</title>
      <link href="/2013/09/26/generate-ctags-files/"/>
      <url>/2013/09/26/generate-ctags-files/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ctags -I __THROW -I __attribute_pure__ -I __nonnull -I __attribute__ --file-scope=yes --langmap=c:+.h --languages=c,c++ --links=yes --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q  <span class="_">-f</span> ~/.vim/systags /usr/include/* /usr/include/sys/* /usr/include/bits/*  /usr/include/netinet/* /usr/include/arpa/* /usr/include/mysql/*</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="comment"># ./ctags_with_dep.sh file1.c file2.c ... to generate a tags file for these files.</span></div><div class="line"></div><div class="line">gcc -M $* | sed <span class="_">-e</span> <span class="string">'s/[\\ ]/\n/g'</span> | \</div><div class="line">        sed <span class="_">-e</span> <span class="string">'/^$/d'</span> <span class="_">-e</span> <span class="string">'/\.o:[ \t]*$/d'</span> | \</div><div class="line">        ctags -L - --c++-kinds=+p --fields=+iaS --extra=+q</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gcc -M -I ~/include $* | sed <span class="_">-e</span> <span class="string">'s/[\\ ]/\n/g'</span> | \</div><div class="line">sed <span class="_">-e</span> <span class="string">'/^$/d'</span> <span class="_">-e</span> <span class="string">'/\.o:[ \t]*$/d'</span> | \</div><div class="line">ctags -L - --c++-kinds=+p --fields=+iaS --extra=+q</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>POJ 1002 电话号码</title>
      <link href="/2013/09/26/poj-1002-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/"/>
      <url>/2013/09/26/poj-1002-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>Input</p><p>输入的格式是，第一行是一个正整数，指定电话号码薄中号码的数量（最多100000）。余下的每行是一个电话号码。每个电话号码由数字，大写字母（除了Q和Z）以及连接符组成。每个电话号码中只会刚好有7个数字或者字母。<br>Output</p><p>对于每个出现重复的号码产生一行输出，输出是号码的标准格式紧跟一个空格然后是它的重复次数。如果存在多个重复的号码，则按照号码的字典升序输出。如果输入数据中没有重复的号码，输出一行：</p><p>No duplicates.</p><p><a href="http://poj.org/problem?id=1002" target="_blank" rel="external">http://poj.org/problem?id=1002</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 10000000</span></div><div class="line"><span class="keyword">int</span> num[SIZE];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">trans</span><span class="params">(<span class="keyword">char</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (x &gt;= <span class="string">'0'</span> &amp;&amp; x &lt;= <span class="string">'9'</span>) <span class="keyword">return</span> x - <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="string">'A'</span> || x == <span class="string">'B'</span> || x == <span class="string">'C'</span>) <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="string">'D'</span> || x == <span class="string">'E'</span> || x == <span class="string">'F'</span>) <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="string">'G'</span> || x == <span class="string">'H'</span> || x == <span class="string">'I'</span>) <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="string">'J'</span> || x == <span class="string">'K'</span> || x == <span class="string">'L'</span>) <span class="keyword">return</span> <span class="number">5</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="string">'M'</span> || x == <span class="string">'N'</span> || x == <span class="string">'O'</span>) <span class="keyword">return</span> <span class="number">6</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="string">'P'</span> || x == <span class="string">'R'</span> || x == <span class="string">'S'</span>) <span class="keyword">return</span> <span class="number">7</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="string">'T'</span> || x == <span class="string">'U'</span> || x == <span class="string">'V'</span>) <span class="keyword">return</span> <span class="number">8</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="string">'W'</span> || x == <span class="string">'X'</span> || x == <span class="string">'Y'</span>) <span class="keyword">return</span> <span class="number">9</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">char</span> x[<span class="number">1000</span>];</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, x);</div><div class="line">        <span class="keyword">int</span> base =<span class="number">1</span>, sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (j = <span class="built_in">strlen</span>(x) - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (x[j] == <span class="string">'-'</span>) <span class="keyword">continue</span>;</div><div class="line">            sum += base * trans(x[j]);</div><div class="line">            base = base * <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        num[sum]++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; SIZE; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (num[i] &gt; <span class="number">1</span>)</div><div class="line">        &#123;</div><div class="line">            p = <span class="number">1</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%03d-%04d %d\n"</span>, i / <span class="number">10000</span>, i % <span class="number">10000</span>, num[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!p) <span class="built_in">printf</span>(<span class="string">"No duplicates.\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ 1001 求高精度幂</title>
      <link href="/2013/09/25/poj-1001-%E6%B1%82%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%B9%82/"/>
      <url>/2013/09/25/poj-1001-%E6%B1%82%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%B9%82/</url>
      <content type="html"><![CDATA[<p>问题：对一个实数R( 0.0 &lt; R &lt; 99.999 )，要求写程序精确计算 R 的 n 次方(Rn)，其中n 是整数并且 0 &lt; n &lt;= 25。</p><h2 id="计算结果位数的确定"><a href="#计算结果位数的确定" class="headerlink" title="计算结果位数的确定"></a>计算结果位数的确定</h2><ul><li>两数之和的最大为较大的数的位数加1</li><li>乘积的位数最大为两个因子的位数之和</li><li>阶乘：lgn! = lgn + lg(n-1) + … + lg1 = lnn/ln10 + ln(n-1)/ln10 + … + ln1/ln10 = trunc(1/ln10 * (lnn + ln(n-1) + … + ln1))</li><li>乘方：lg(a^b) = trunc(lg(a^b)) + 1 = trunc(b * lga) + 1 = trunc(b * lna/ln10) + 1</li></ul><a id="more"></a><h2 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ncarry = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len; i++)</div><div class="line">&#123;</div><div class="line">    k = a[i] + b[i] + ncarry;</div><div class="line">    a[i+<span class="number">1</span>] += k/N;</div><div class="line">    ncarry = k%N;</div><div class="line">&#125;</div><div class="line"><span class="comment">//当最后 ncarry &gt; 0 时，len会变化</span></div></pre></td></tr></table></figure><h2 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先比较大小，大的为a</span></div><div class="line">ncarry = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= len; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (a[i] - b[i] - ncarry) &gt;= <span class="number">0</span>)</div><div class="line">        a[i] = a[i] - b[i] - ncarry, ncarry = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        a[i] = a[i] + N - b[i] - ncarry, ncarry = <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= lena; i++)</div><div class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= lenb; j++)</div><div class="line">        c[i+j] += a[i] * b[j];</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= lena + lenb; i++)</div><div class="line">&#123;</div><div class="line">    c[i+<span class="number">1</span>] += c[i]/N;</div><div class="line">    c[i] = c[i]/N;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">POJ-1001</div><div class="line">提交状态：</div><div class="line">Accepted    244K 0MS   C++    2039B</div><div class="line">解题思路：</div><div class="line">1、首先要保证两个整数的乘法运算是正确的</div><div class="line">2、接受数据之后，先去掉小数点，并且根据幂指数确定小数点的位数，此时要注意的是如果出现1.0000这样有无效零的情况，先将0去掉。</div><div class="line">3、多次调用高精度乘法函数得到整数结果</div><div class="line">4、补上小数点并输出，因为在2中已经去掉了无效零，于是结果中便不会出现小数点右边末尾出现零的情况。</div><div class="line">5、还有就是如果小数点的总位数大于等于结果的长度，应该先输出"."</div><div class="line">*/</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1000</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> *point)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> t[], <span class="keyword">int</span> n)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">( <span class="keyword">int</span> tmp[], <span class="keyword">int</span> n, <span class="keyword">char</span> result[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">char</span> t[], <span class="keyword">char</span> result[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> point, <span class="keyword">char</span> result[])</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> s[SIZE];</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;n) != EOF) &#123;</div><div class="line">        <span class="keyword">int</span> i, point = <span class="number">0</span>;</div><div class="line">        process(s, &amp;point);</div><div class="line">        <span class="keyword">char</span> result[SIZE * <span class="number">2</span>];</div><div class="line">        <span class="keyword">char</span> tmp[SIZE];</div><div class="line">        <span class="built_in">strcpy</span>(result, s);</div><div class="line">        <span class="built_in">strcpy</span>(tmp, s);</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="built_in">strcpy</span>(s, tmp);</div><div class="line">            mul(s, result, result);</div><div class="line">        &#125;</div><div class="line">        show(point * n, result);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> *point)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (s[i] != <span class="string">'\0'</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'.'</span>) <span class="keyword">break</span>;</div><div class="line">        ++i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (s[len - <span class="number">1</span>] == <span class="string">'0'</span>) --len;</div><div class="line">    s[len] = <span class="string">'\0'</span>;</div><div class="line">    *point = i &lt; len ? (len - i - <span class="number">1</span>) : <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">        s[i] = s[i + <span class="number">1</span>];</div><div class="line">        ++i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> t[], <span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> tmp;</div><div class="line">    <span class="keyword">while</span> (i &lt; j)</div><div class="line">    &#123;</div><div class="line">        tmp = t[i];</div><div class="line">        t[i] = t[j];</div><div class="line">        t[j] = tmp;</div><div class="line">        ++i, --j;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> tmp[], <span class="keyword">int</span> n, <span class="keyword">char</span> result[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i, j, k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">    &#123;</div><div class="line">        tmp[i + <span class="number">1</span>] += tmp[i] / <span class="number">10</span>;</div><div class="line">        tmp[i] = tmp[i] % <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (tmp[i] == <span class="number">0</span>) --i;</div><div class="line">    <span class="keyword">for</span> (j = i; j &gt;= <span class="number">0</span>; j--)</div><div class="line">        result[k++] = tmp[j] + <span class="string">'0'</span>;</div><div class="line">    result[k] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">char</span> t[], <span class="keyword">char</span> result[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ls = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">int</span> lt = <span class="built_in">strlen</span>(t);</div><div class="line">    reverse(s, ls);</div><div class="line">    reverse(t, lt);</div><div class="line">    <span class="keyword">int</span> tmp[SIZE * <span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">int</span> i, j, k;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ls; i++)</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lt; j++)</div><div class="line">            tmp [i + j] += (<span class="keyword">int</span>)(s[i] - <span class="string">'0'</span>)*(<span class="keyword">int</span>)(t[j] - <span class="string">'0'</span>);</div><div class="line">    check(tmp, i + j, result);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> point, <span class="keyword">char</span> result[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(result);</div><div class="line">    <span class="keyword">if</span> (point &gt;= len)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"."</span>);</div><div class="line">    <span class="keyword">while</span> (point &gt; len)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        point--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, result[i]);</div><div class="line">        <span class="keyword">if</span> (i == len - <span class="number">1</span> - point &amp;&amp; point != <span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> poj </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 中的装饰器(decorator)</title>
      <link href="/2013/09/16/python-%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8(decorator)/"/>
      <url>/2013/09/16/python-%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8(decorator)/</url>
      <content type="html"><![CDATA[<p>decorator可作用于函数和类，功能有两个：</p><ul><li>Call proxy</li><li>Interface proxy<a id="more"></a></li></ul><h2 id="Function-Decorator"><a href="#Function-Decorator" class="headerlink" title="Function Decorator"></a>Function Decorator</h2><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span><span class="params">(arg)</span>:</span></div><div class="line">    …</div><div class="line"></div><div class="line">F(<span class="number">99</span>)</div></pre></td></tr></table></figure><p>效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span><span class="params">(arg)</span>:</span></div><div class="line">    …</div><div class="line"></div><div class="line">F = decorator(F)</div><div class="line">F(<span class="number">99</span>)</div></pre></td></tr></table></figure><p>Call proxy示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(F)</span>:</span></div><div class="line">    <span class="comment"># Process function F</span></div><div class="line">    <span class="keyword">return</span> F</div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span> …</div></pre></td></tr></table></figure><p>Interface proxy示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(F)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></div><div class="line">        <span class="comment"># Use F and args</span></div><div class="line">        <span class="comment"># F(*args) calls original function</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></div><div class="line">    …</div><div class="line"></div><div class="line">func(<span class="number">6</span>, <span class="number">7</span>)    <span class="comment"># 6, 7 are passed to wrapper's *args</span></div></pre></td></tr></table></figure><p>decorator class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">decorator</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></div><div class="line">        self.func = func</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args)</span>:</span></div><div class="line">        <span class="comment"># Use self.func and args</span></div><div class="line">        <span class="comment"># self.func(*args) calls original function</span></div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x, y)</span>:</span></div><div class="line">    …</div><div class="line"></div><div class="line">func(<span class="number">6</span>, <span class="number">7</span>)</div></pre></td></tr></table></figure><h2 id="Class-Decorator"><a href="#Class-Decorator" class="headerlink" title="Class Decorator"></a>Class Decorator</h2><p>语法与function decorator类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(cls)</span>:</span></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></div><div class="line">            self.wrapped = cls(*args)</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">            <span class="keyword">return</span> getattr(self.wrapped, name)</div><div class="line">    <span class="keyword">return</span> Wrapper</div><div class="line"></div><div class="line"><span class="meta">@decorator</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        self.attr = <span class="string">'spam'</span></div><div class="line"></div><div class="line">x = C(<span class="number">6</span>, <span class="number">7</span>)</div><div class="line">print(x.attr)</div></pre></td></tr></table></figure><h2 id="Decorator-参数"><a href="#Decorator-参数" class="headerlink" title="Decorator 参数"></a>Decorator 参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(A, B)</span>:</span></div><div class="line">    <span class="comment"># save or use A, B</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">actualDecorator</span><span class="params">(F)</span>:</span></div><div class="line">        <span class="comment"># Save or use function F</span></div><div class="line">        <span class="comment"># Return a callable: nested def, class with __call__, etc.</span></div><div class="line">        <span class="keyword">return</span> callable</div><div class="line">    <span class="keyword">return</span> actualDecorator</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zsh与oh-my-zsh</title>
      <link href="/2013/09/15/zsh%E4%B8%8Eoh-my-zsh/"/>
      <url>/2013/09/15/zsh%E4%B8%8Eoh-my-zsh/</url>
      <content type="html"><![CDATA[<p>zsh 介绍  <a href="http://foocoder.com/blog/wo-zai-yong-de-macruan-jian-2.html/" target="_blank" rel="external">http://foocoder.com/blog/wo-zai-yong-de-macruan-jian-2.html/</a></p><h2 id="安装-zsh-与-oh-my-zsh"><a href="#安装-zsh-与-oh-my-zsh" class="headerlink" title="安装 zsh 与 oh-my-zsh"></a>安装 zsh 与 oh-my-zsh</h2><pre><code>brew install zshcurl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</code></pre><p>修改/etc/shells，添加/usr/local/bin/zsh</p><p>更改默认 shell 为 zsh</p><pre><code>chsh -s /usr/local/bin/zsh</code></pre><h2 id="配置-iTerm2-的主题与字体"><a href="#配置-iTerm2-的主题与字体" class="headerlink" title="配置 iTerm2 的主题与字体"></a>配置 iTerm2 的主题与字体</h2><p>iTerm2 主页<a href="http://www.iterm2.com/" target="_blank" rel="external">http://www.iterm2.com/</a></p><p>iTerm2 Solarized主题<a href="https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized" target="_blank" rel="external">https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized</a></p><p>在此我们使用 Solarized Dark主题，OMZ 里有一个与之配合的主题agnoster，修改~/.zshrc</p><pre><code>export ZSH_THEME=&quot;agnoster&quot;DEFAULT_USER=&quot;xilaideng&quot;</code></pre><p>zsh powerline 主题</p><p><a href="https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme" target="_blank" rel="external">https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme</a></p><p><a href="https://github.com/milkbikis/powerline-shell" target="_blank" rel="external">https://github.com/milkbikis/powerline-shell</a></p><p>zsh主题列表<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p><p>下载 zsh agnoster theme 所需要的字体</p><p><a href="https://gist.github.com/qrush/1595572/raw/417a3fa36e35ca91d6d23ac961071094c26e5fad/Menlo-Powerline.otf" target="_blank" rel="external">https://gist.github.com/qrush/1595572/raw/417a3fa36e35ca91d6d23ac961071094c26e5fad/Menlo-Powerline.otf</a></p><p><a href="https://github.com/Lokaltog/powerline-fonts" target="_blank" rel="external">https://github.com/Lokaltog/powerline-fonts</a></p>]]></content>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
